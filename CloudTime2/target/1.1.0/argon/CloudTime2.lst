
c:/Users/217fa/Documents/IoT/particle-03-Metawaveforce/CloudTime2/target/1.1.0/argon/CloudTime2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a48  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00017f54  2**0
                  CONTENTS
  3 .data         000004c8  2003deb0  000d7a60  0000deb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000478  2003e378  2003e378  0001e378  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d7f28  000d7f28  00017f28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d7f50  000d7f50  00017f50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000b001b  00000000  00000000  00017f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000ff5c  00000000  00000000  000c7f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014fff  00000000  00000000  000d7ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001ff0  00000000  00000000  000ececa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003100  00000000  00000000  000eeeba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00033d01  00000000  00000000  000f1fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00026820  00000000  00000000  00125cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d3fb1  00000000  00000000  0014c4db  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bcd4  00000000  00000000  0022048c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	50 6f 0d 00                                         Po..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb3d 	bl	d66ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb42 	bl	d66c2 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003deb0 	.word	0x2003deb0
   d4048:	000d7a60 	.word	0x000d7a60
   d404c:	2003e378 	.word	0x2003e378
   d4050:	2003e378 	.word	0x2003e378
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fc7f 	bl	d595c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7a54 	.word	0x000d7a54
   d4080:	000d7a14 	.word	0x000d7a14

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b836 	b.w	d40f4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f925 	bl	d42d8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bc31 	b.w	d58f8 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 b8e9 	b.w	d526c <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 b8e7 	b.w	d526c <free>
	...

000d40a0 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 f81c 	bl	d50e4 <panic_>
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d4ea5 	.word	0x000d4ea5

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c4:	4770      	bx	lr

000d40c6 <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.12>:
    }


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d40c6:	b508      	push	{r3, lr}
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d40c8:	2000      	movs	r0, #0
   d40ca:	f001 f8af 	bl	d522c <spark_sync_time_pending>
   d40ce:	b110      	cbz	r0, d40d6 <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.12+0x10>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40d0:	f001 f89c 	bl	d520c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d40d4:	b958      	cbnz	r0, d40ee <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.12+0x28>
   d40d6:	2000      	movs	r0, #0
   d40d8:	f001 f8a8 	bl	d522c <spark_sync_time_pending>
   d40dc:	b128      	cbz	r0, d40ea <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.12+0x24>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40de:	f001 f895 	bl	d520c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d40e2:	f080 0001 	eor.w	r0, r0, #1
   d40e6:	b2c0      	uxtb	r0, r0
   d40e8:	bd08      	pop	{r3, pc}
   d40ea:	2001      	movs	r0, #1
   d40ec:	bd08      	pop	{r3, pc}
        while (_while() && !_condition()) {
            spark_process();
   d40ee:	f001 f885 	bl	d51fc <spark_process>
   d40f2:	e7e9      	b.n	d40c8 <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.12+0x2>

000d40f4 <setup>:
   
int currentDateTime;


// setup() runs once, when the device is first turned on.
void setup() {
   d40f4:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
 Serial.begin(9600);
   d40f6:	f001 fd0d 	bl	d5b14 <_Z16_fetch_usbserialv>
   d40fa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40fe:	f001 fcf7 	bl	d5af0 <_ZN9USBSerial5beginEl>
   Wire.begin();
   d4102:	f002 f823 	bl	d614c <_Z19__fetch_global_Wirev>
   d4106:	f001 fdd3 	bl	d5cb0 <_ZN7TwoWire5beginEv>
   while(!Serial);
   d410a:	f001 fd03 	bl	d5b14 <_Z16_fetch_usbserialv>
   d410e:	f001 fcf6 	bl	d5afe <_ZN9USBSerialcvbEv>
   d4112:	2800      	cmp	r0, #0
   d4114:	d0f9      	beq.n	d410a <setup+0x16>
   Serial.println("BeginlinSync");
   d4116:	f001 fcfd 	bl	d5b14 <_Z16_fetch_usbserialv>
   d411a:	4908      	ldr	r1, [pc, #32]	; (d413c <setup+0x48>)
   d411c:	f001 fab5 	bl	d568a <_ZN5Print7printlnEPKc>
    display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d4120:	223c      	movs	r2, #60	; 0x3c
   d4122:	2102      	movs	r1, #2
   d4124:	4806      	ldr	r0, [pc, #24]	; (d4140 <setup+0x4c>)
   d4126:	f000 fb2b 	bl	d4780 <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   d412a:	4805      	ldr	r0, [pc, #20]	; (d4140 <setup+0x4c>)
   d412c:	f000 fc6e 	bl	d4a0c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4130:	4803      	ldr	r0, [pc, #12]	; (d4140 <setup+0x4c>)
}
   d4132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   Wire.begin();
   while(!Serial);
   Serial.println("BeginlinSync");
    display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
  display.clearDisplay();
  display.display();
   d4136:	f000 bbf3 	b.w	d4920 <_ZN16Adafruit_SSD13067displayEv>
   d413a:	bf00      	nop
   d413c:	000d6f64 	.word	0x000d6f64
   d4140:	2003e37c 	.word	0x2003e37c

000d4144 <_Z20printcurrentDateTimePc>:
      printcurrentDateTime(currentDateTime);
    }  
  }

}
void printcurrentDateTime(char nowTime[9]) {
   d4144:	b538      	push	{r3, r4, r5, lr}
  display.clearDisplay( );
   d4146:	4c20      	ldr	r4, [pc, #128]	; (d41c8 <_Z20printcurrentDateTimePc+0x84>)
      printcurrentDateTime(currentDateTime);
    }  
  }

}
void printcurrentDateTime(char nowTime[9]) {
   d4148:	4605      	mov	r5, r0
  display.clearDisplay( );
   d414a:	4620      	mov	r0, r4
   d414c:	f000 fc5e 	bl	d4a0c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4150:	4620      	mov	r0, r4
   d4152:	f000 fbe5 	bl	d4920 <_ZN16Adafruit_SSD13067displayEv>
  // display a pixel in each corner of the screen
  display.drawPixel(0, 0, WHITE);
   d4156:	2200      	movs	r2, #0
   d4158:	4611      	mov	r1, r2
   d415a:	4620      	mov	r0, r4
   d415c:	2301      	movs	r3, #1
   d415e:	f000 fa6d 	bl	d463c <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 0, WHITE);
   d4162:	4620      	mov	r0, r4
   d4164:	2301      	movs	r3, #1
   d4166:	2200      	movs	r2, #0
   d4168:	217f      	movs	r1, #127	; 0x7f
   d416a:	f000 fa67 	bl	d463c <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(0, 63, WHITE);
   d416e:	4620      	mov	r0, r4
   d4170:	2301      	movs	r3, #1
   d4172:	223f      	movs	r2, #63	; 0x3f
   d4174:	2100      	movs	r1, #0
   d4176:	f000 fa61 	bl	d463c <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 63, WHITE);
   d417a:	2301      	movs	r3, #1
   d417c:	223f      	movs	r2, #63	; 0x3f
   d417e:	4620      	mov	r0, r4
   d4180:	217f      	movs	r1, #127	; 0x7f
   d4182:	f000 fa5b 	bl	d463c <_ZN16Adafruit_SSD13069drawPixelEsst>
 display.setTextSize(1);
   d4186:	4620      	mov	r0, r4
   d4188:	2101      	movs	r1, #1
   d418a:	f000 fe01 	bl	d4d90 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d418e:	4620      	mov	r0, r4
   d4190:	2101      	movs	r1, #1
   d4192:	f000 fe02 	bl	d4d9a <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(27,30);
   d4196:	221e      	movs	r2, #30
   d4198:	4620      	mov	r0, r4
   d419a:	211b      	movs	r1, #27
   d419c:	f000 fdf5 	bl	d4d8a <_ZN12Adafruit_GFX9setCursorEss>
  display.print(nowTime);
   d41a0:	4629      	mov	r1, r5
   d41a2:	4620      	mov	r0, r4
   d41a4:	f001 fa5e 	bl	d5664 <_ZN5Print5printEPKc>
   delay(1000);
   d41a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d41ac:	f001 fb66 	bl	d587c <delay>
   display.display();
   d41b0:	4620      	mov	r0, r4
   d41b2:	f000 fbb5 	bl	d4920 <_ZN16Adafruit_SSD13067displayEv>
   delay(1000);
   d41b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d41ba:	f001 fb5f 	bl	d587c <delay>
   display.display();
   d41be:	4620      	mov	r0, r4
   d41c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.setCursor(27,30);
  display.print(nowTime);
   delay(1000);
   display.display();
   delay(1000);
   display.display();
   d41c4:	f000 bbac 	b.w	d4920 <_ZN16Adafruit_SSD13067displayEv>
   d41c8:	2003e37c 	.word	0x2003e37c

000d41cc <_Z12sync_my_timev>:
  // The core of your code will likely live here.
  sync_my_time();
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
 //printcurrentDateTime();
}
void sync_my_time() {
   d41cc:	b570      	push	{r4, r5, r6, lr}
   d41ce:	b094      	sub	sp, #80	; 0x50
  String DateTime;
   d41d0:	493d      	ldr	r1, [pc, #244]	; (d42c8 <_Z12sync_my_timev+0xfc>)
   d41d2:	a805      	add	r0, sp, #20
   d41d4:	f001 f997 	bl	d5506 <_ZN6StringC1EPK19__FlashStringHelper>
  String TimeOnly;
   d41d8:	493b      	ldr	r1, [pc, #236]	; (d42c8 <_Z12sync_my_timev+0xfc>)
   d41da:	a809      	add	r0, sp, #36	; 0x24
   d41dc:	f001 f993 	bl	d5506 <_ZN6StringC1EPK19__FlashStringHelper>
  char currentDateTime[25];
  char currentTime[9];
  Time.zone(-6); // Set Time Zone to MDT (UTC - 7)
   d41e0:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d41e4:	f001 fada 	bl	d579c <_ZN9TimeClass4zoneEf>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41e8:	f000 fe64 	bl	d4eb4 <HAL_Timer_Get_Milli_Seconds>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d41ec:	ac14      	add	r4, sp, #80	; 0x50
   d41ee:	4606      	mov	r6, r0
   d41f0:	2500      	movs	r5, #0
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
   d41f2:	2000      	movs	r0, #0
   d41f4:	f001 f812 	bl	d521c <spark_sync_time>
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
   d41f8:	f7ff ff65 	bl	d40c6 <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.12>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d41fc:	f844 5d1c 	str.w	r5, [r4, #-28]!
        return CLOUD_FN(spark_sync_time_last(&tm, nullptr), 0);
   d4200:	4629      	mov	r1, r5
   d4202:	4620      	mov	r0, r4
   d4204:	f001 f81a 	bl	d523c <spark_sync_time_last>
  // Request time synch from Particle Device Cloud and wait for data to come back
  Particle.syncTime();
  waitUntil(Particle.syncTimeDone);

  // Check if synchronized successfully
  if (Particle.timeSyncedLast() >= cur) {
   d4208:	42b0      	cmp	r0, r6
   d420a:	d354      	bcc.n	d42b6 <_Z12sync_my_timev+0xea>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d420c:	f001 fb25 	bl	d585a <_ZN9TimeClass3nowEv>
   d4210:	4601      	mov	r1, r0
   d4212:	4620      	mov	r0, r4
   d4214:	f001 fade 	bl	d57d4 <_ZN9TimeClass7timeStrEl>
    DateTime = Time.timeStr();
   d4218:	4621      	mov	r1, r4
   d421a:	a805      	add	r0, sp, #20
   d421c:	f001 f9a3 	bl	d5566 <_ZN6StringaSEOS_>
   d4220:	4620      	mov	r0, r4
   d4222:	f001 f929 	bl	d5478 <_ZN6StringD1Ev>
    TimeOnly = DateTime.substring(11,19);       // pull out only Time from DateTime String
   d4226:	2313      	movs	r3, #19
   d4228:	220b      	movs	r2, #11
   d422a:	a905      	add	r1, sp, #20
   d422c:	4620      	mov	r0, r4
   d422e:	f001 f9cb 	bl	d55c8 <_ZNK6String9substringEjj>
   d4232:	4621      	mov	r1, r4
   d4234:	a809      	add	r0, sp, #36	; 0x24
   d4236:	f001 f996 	bl	d5566 <_ZN6StringaSEOS_>
   d423a:	4620      	mov	r0, r4
   d423c:	f001 f91c 	bl	d5478 <_ZN6StringD1Ev>
    Serial.println(DateTime);
   d4240:	f001 fc68 	bl	d5b14 <_Z16_fetch_usbserialv>
   d4244:	9905      	ldr	r1, [sp, #20]
   d4246:	f001 fa20 	bl	d568a <_ZN5Print7printlnEPKc>
    Serial.println(TimeOnly);
   d424a:	f001 fc63 	bl	d5b14 <_Z16_fetch_usbserialv>
   d424e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4250:	f001 fa1b 	bl	d568a <_ZN5Print7printlnEPKc>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4254:	462b      	mov	r3, r5
   d4256:	2219      	movs	r2, #25
   d4258:	4621      	mov	r1, r4
   d425a:	a805      	add	r0, sp, #20
   d425c:	f001 f99c 	bl	d5598 <_ZNK6String8getBytesEPhjj>
   d4260:	462b      	mov	r3, r5
   d4262:	2209      	movs	r2, #9
   d4264:	a902      	add	r1, sp, #8
   d4266:	a809      	add	r0, sp, #36	; 0x24
   d4268:	f001 f996 	bl	d5598 <_ZNK6String8getBytesEPhjj>
    // Using Time with Formatted Print Statements
    DateTime.toCharArray(currentDateTime,25);   // convert DateTime in to an array of char for printf()
    TimeOnly.toCharArray(currentTime,9);        // convert TImeOnly to an array of char for printf()
    Serial.printf("The current date and time is %s \n",currentDateTime);
   d426c:	f001 fc52 	bl	d5b14 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4270:	4623      	mov	r3, r4
   d4272:	4a16      	ldr	r2, [pc, #88]	; (d42cc <_Z12sync_my_timev+0x100>)
   d4274:	4629      	mov	r1, r5
   d4276:	f001 fa41 	bl	d56fc <_ZN5Print11printf_implEbPKcz>
    Serial.printf("The current time is %s \n",currentTime);
   d427a:	f001 fc4b 	bl	d5b14 <_Z16_fetch_usbserialv>
   d427e:	ab02      	add	r3, sp, #8
   d4280:	4a13      	ldr	r2, [pc, #76]	; (d42d0 <_Z12sync_my_timev+0x104>)
   d4282:	4629      	mov	r1, r5
   d4284:	f001 fa3a 	bl	d56fc <_ZN5Print11printf_implEbPKcz>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
   d4288:	4628      	mov	r0, r5
   d428a:	f000 ffc7 	bl	d521c <spark_sync_time>
   d428e:	f7ff ff1a 	bl	d40c6 <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.12>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d4292:	a814      	add	r0, sp, #80	; 0x50
        return CLOUD_FN(spark_sync_time_last(&tm, nullptr), 0);
   d4294:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d4296:	f840 5d4c 	str.w	r5, [r0, #-76]!
        return CLOUD_FN(spark_sync_time_last(&tm, nullptr), 0);
   d429a:	f000 ffcf 	bl	d523c <spark_sync_time_last>
    Particle.syncTime();
    //Wait to receive time from Particle Device Cloud
    waitUntil(Particle.syncTimeDone);
    // Check if synchronized successfully
    if(Particle.timeSyncedLast() >= cur){
   d429e:	42b0      	cmp	r0, r6
   d42a0:	d309      	bcc.n	d42b6 <_Z12sync_my_timev+0xea>
      // Print current time
      Serial.printlnf("Current time is %s",currentTime);
   d42a2:	f001 fc37 	bl	d5b14 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d42a6:	ab02      	add	r3, sp, #8
   d42a8:	4a0a      	ldr	r2, [pc, #40]	; (d42d4 <_Z12sync_my_timev+0x108>)
   d42aa:	2101      	movs	r1, #1
   d42ac:	f001 fa26 	bl	d56fc <_ZN5Print11printf_implEbPKcz>
      printcurrentDateTime(currentDateTime);
   d42b0:	4620      	mov	r0, r4
   d42b2:	f7ff ff47 	bl	d4144 <_Z20printcurrentDateTimePc>
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
 //printcurrentDateTime();
}
void sync_my_time() {
  String DateTime;
  String TimeOnly;
   d42b6:	a809      	add	r0, sp, #36	; 0x24
   d42b8:	f001 f8de 	bl	d5478 <_ZN6StringD1Ev>
  sync_my_time();
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
 //printcurrentDateTime();
}
void sync_my_time() {
  String DateTime;
   d42bc:	a805      	add	r0, sp, #20
   d42be:	f001 f8db 	bl	d5478 <_ZN6StringD1Ev>
      Serial.printlnf("Current time is %s",currentTime);
      printcurrentDateTime(currentDateTime);
    }  
  }

}
   d42c2:	b014      	add	sp, #80	; 0x50
   d42c4:	bd70      	pop	{r4, r5, r6, pc}
   d42c6:	bf00      	nop
   d42c8:	000d758e 	.word	0x000d758e
   d42cc:	000d6f71 	.word	0x000d6f71
   d42d0:	000d6f93 	.word	0x000d6f93
   d42d4:	000d6fac 	.word	0x000d6fac

000d42d8 <loop>:
  display.clearDisplay();
  display.display();
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d42d8:	b508      	push	{r3, lr}
  // The core of your code will likely live here.
  sync_my_time();
   d42da:	f7ff ff77 	bl	d41cc <_Z12sync_my_timev>
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
   d42de:	f64e 2160 	movw	r1, #60000	; 0xea60
   d42e2:	f242 7010 	movw	r0, #10000	; 0x2710
   d42e6:	f001 fd06 	bl	d5cf6 <_Z6randomii>
 //printcurrentDateTime();
}
   d42ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  sync_my_time();
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
   d42ee:	f001 bac5 	b.w	d587c <delay>

000d42f2 <_ZN16Adafruit_SSD1306D0Ev>:
   d42f2:	b510      	push	{r4, lr}
   d42f4:	4604      	mov	r4, r0
   d42f6:	f7ff fece 	bl	d4096 <_ZdlPv>
   d42fa:	4620      	mov	r0, r4
   d42fc:	bd10      	pop	{r4, pc}
	...

000d4300 <_GLOBAL__sub_I_display>:
  display.print(nowTime);
   delay(1000);
   display.display();
   delay(1000);
   display.display();
   d4300:	b510      	push	{r4, lr}

#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1); 
   d4302:	4c07      	ldr	r4, [pc, #28]	; (d4320 <_GLOBAL__sub_I_display+0x20>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4304:	f000 fd66 	bl	d4dd4 <HAL_Pin_Map>
   d4308:	f04f 31ff 	mov.w	r1, #4294967295
   d430c:	4620      	mov	r0, r4
   d430e:	f000 f9df 	bl	d46d0 <_ZN16Adafruit_SSD1306C1Ea>
   d4312:	4620      	mov	r0, r4
   d4314:	4a03      	ldr	r2, [pc, #12]	; (d4324 <_GLOBAL__sub_I_display+0x24>)
   d4316:	4904      	ldr	r1, [pc, #16]	; (d4328 <_GLOBAL__sub_I_display+0x28>)
  display.print(nowTime);
   delay(1000);
   display.display();
   delay(1000);
   display.display();
   d4318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1); 
   d431c:	f001 bf36 	b.w	d618c <__aeabi_atexit>
   d4320:	2003e37c 	.word	0x2003e37c
   d4324:	2003e378 	.word	0x2003e378
   d4328:	000d40c5 	.word	0x000d40c5

000d432c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d432c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d432e:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4330:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4334:	2c02      	cmp	r4, #2
   d4336:	d008      	beq.n	d434a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4338:	2c03      	cmp	r4, #3
   d433a:	d00f      	beq.n	d435c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d433c:	2c01      	cmp	r4, #1
   d433e:	d170      	bne.n	d4422 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4340:	8904      	ldrh	r4, [r0, #8]
   d4342:	3c01      	subs	r4, #1
   d4344:	1aa2      	subs	r2, r4, r2
   d4346:	b212      	sxth	r2, r2
      break;
   d4348:	e00c      	b.n	d4364 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d434a:	8944      	ldrh	r4, [r0, #10]
   d434c:	3c01      	subs	r4, #1
   d434e:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4350:	8904      	ldrh	r4, [r0, #8]
   d4352:	1ae4      	subs	r4, r4, r3
   d4354:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4356:	b212      	sxth	r2, r2
      x -= (w-1);
   d4358:	b209      	sxth	r1, r1
      break;
   d435a:	e062      	b.n	d4422 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d435c:	8944      	ldrh	r4, [r0, #10]
   d435e:	1ae4      	subs	r4, r4, r3
   d4360:	1a61      	subs	r1, r4, r1
   d4362:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4364:	2a00      	cmp	r2, #0
   d4366:	db5b      	blt.n	d4420 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4368:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d436c:	4294      	cmp	r4, r2
   d436e:	f340 8090 	ble.w	d4492 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4372:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4374:	bfbe      	ittt	lt
   d4376:	185b      	addlt	r3, r3, r1
   d4378:	b21b      	sxthlt	r3, r3
    __y = 0;
   d437a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d437c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4380:	18cc      	adds	r4, r1, r3
   d4382:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4384:	bfc4      	itt	gt
   d4386:	1a43      	subgt	r3, r0, r1
   d4388:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d438a:	2b00      	cmp	r3, #0
   d438c:	f340 8081 	ble.w	d4492 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4390:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4392:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4394:	4f3f      	ldr	r7, [pc, #252]	; (d4494 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4396:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d439a:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d439e:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d43a0:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d43a4:	d017      	beq.n	d43d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d43a6:	f1c1 0108 	rsb	r1, r1, #8
   d43aa:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d43ac:	493a      	ldr	r1, [pc, #232]	; (d4498 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d43ae:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d43b0:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d43b2:	bf3f      	itttt	cc
   d43b4:	ebc3 0e00 	rsbcc	lr, r3, r0
   d43b8:	21ff      	movcc	r1, #255	; 0xff
   d43ba:	fa41 f10e 	asrcc.w	r1, r1, lr
   d43be:	400e      	andcc	r6, r1
   d43c0:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d43c2:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d43c4:	bf0c      	ite	eq
   d43c6:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d43c8:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d43ca:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d43cc:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d43ce:	d360      	bcc.n	d4492 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d43d0:	1a18      	subs	r0, r3, r0
   d43d2:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d43d4:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d43d6:	2b07      	cmp	r3, #7
   d43d8:	d917      	bls.n	d440a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d43da:	2d01      	cmp	r5, #1
   d43dc:	bf0c      	ite	eq
   d43de:	20ff      	moveq	r0, #255	; 0xff
   d43e0:	2000      	movne	r0, #0
   d43e2:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d43e6:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d43e8:	3a08      	subs	r2, #8
   d43ea:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d43ec:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d43ee:	f801 0c80 	strb.w	r0, [r1, #-128]
   d43f2:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d43f6:	d8f7      	bhi.n	d43e8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d43f8:	f1a3 0208 	sub.w	r2, r3, #8
   d43fc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4400:	3201      	adds	r2, #1
   d4402:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4406:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d440a:	2b00      	cmp	r3, #0
   d440c:	d041      	beq.n	d4492 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d440e:	4a23      	ldr	r2, [pc, #140]	; (d449c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4410:	5cd2      	ldrb	r2, [r2, r3]
   d4412:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4414:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4416:	bf0c      	ite	eq
   d4418:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d441a:	4393      	bicne	r3, r2
   d441c:	7023      	strb	r3, [r4, #0]
   d441e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4420:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4422:	2a00      	cmp	r2, #0
   d4424:	db35      	blt.n	d4492 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4426:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d442a:	4294      	cmp	r4, r2
   d442c:	dd31      	ble.n	d4492 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d442e:	2900      	cmp	r1, #0
    w += x;
   d4430:	bfbc      	itt	lt
   d4432:	18c9      	addlt	r1, r1, r3
   d4434:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4436:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d443a:	bfb8      	it	lt
   d443c:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d443e:	18ce      	adds	r6, r1, r3
   d4440:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4442:	bfc4      	itt	gt
   d4444:	1a63      	subgt	r3, r4, r1
   d4446:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4448:	2b00      	cmp	r3, #0
   d444a:	dd22      	ble.n	d4492 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d444c:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d444e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4452:	4810      	ldr	r0, [pc, #64]	; (d4494 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4454:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4458:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d445a:	2001      	movs	r0, #1
   d445c:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4460:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4462:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4464:	d109      	bne.n	d447a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4466:	3b01      	subs	r3, #1
   d4468:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d446a:	1c5c      	adds	r4, r3, #1
   d446c:	d011      	beq.n	d4492 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d446e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4472:	4310      	orrs	r0, r2
   d4474:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4478:	e7f5      	b.n	d4466 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d447a:	43d2      	mvns	r2, r2
   d447c:	b2d2      	uxtb	r2, r2
   d447e:	3b01      	subs	r3, #1
   d4480:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4482:	1c58      	adds	r0, r3, #1
   d4484:	d005      	beq.n	d4492 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4486:	f811 0b01 	ldrb.w	r0, [r1], #1
   d448a:	4010      	ands	r0, r2
   d448c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4490:	e7f5      	b.n	d447e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d4492:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4494:	2003dec0 	.word	0x2003dec0
   d4498:	2003deb8 	.word	0x2003deb8
   d449c:	2003deb0 	.word	0x2003deb0

000d44a0 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d44a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d44a2:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d44a4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d44a8:	2c02      	cmp	r4, #2
   d44aa:	d008      	beq.n	d44be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d44ac:	2c03      	cmp	r4, #3
   d44ae:	d00f      	beq.n	d44d0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d44b0:	2c01      	cmp	r4, #1
   d44b2:	d112      	bne.n	d44da <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d44b4:	8904      	ldrh	r4, [r0, #8]
   d44b6:	1ae4      	subs	r4, r4, r3
   d44b8:	1aa2      	subs	r2, r4, r2
   d44ba:	b212      	sxth	r2, r2
      break;
   d44bc:	e06d      	b.n	d459a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d44be:	8904      	ldrh	r4, [r0, #8]
   d44c0:	3c01      	subs	r4, #1
   d44c2:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d44c4:	8944      	ldrh	r4, [r0, #10]
   d44c6:	1ae4      	subs	r4, r4, r3
   d44c8:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d44ca:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d44cc:	b212      	sxth	r2, r2
      break;
   d44ce:	e004      	b.n	d44da <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d44d0:	8944      	ldrh	r4, [r0, #10]
   d44d2:	3c01      	subs	r4, #1
   d44d4:	1a61      	subs	r1, r4, r1
   d44d6:	b209      	sxth	r1, r1
      break;
   d44d8:	e05f      	b.n	d459a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d44da:	2900      	cmp	r1, #0
   d44dc:	db5c      	blt.n	d4598 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d44de:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d44e2:	428c      	cmp	r4, r1
   d44e4:	f340 8091 	ble.w	d460a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d44e8:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d44ea:	bfbc      	itt	lt
   d44ec:	18d2      	addlt	r2, r2, r3
   d44ee:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d44f0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d44f4:	bfb8      	it	lt
   d44f6:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d44f8:	18d4      	adds	r4, r2, r3
   d44fa:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d44fc:	bfc4      	itt	gt
   d44fe:	1a83      	subgt	r3, r0, r2
   d4500:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4502:	2b00      	cmp	r3, #0
   d4504:	f340 8081 	ble.w	d460a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4508:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d450a:	4e40      	ldr	r6, [pc, #256]	; (d460c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d450c:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d450e:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4510:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4514:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4518:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d451c:	d017      	beq.n	d454e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d451e:	f1c4 0408 	rsb	r4, r4, #8
   d4522:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4524:	4c3a      	ldr	r4, [pc, #232]	; (d4610 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4526:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4528:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d452a:	bf3f      	itttt	cc
   d452c:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4530:	24ff      	movcc	r4, #255	; 0xff
   d4532:	fa44 f40e 	asrcc.w	r4, r4, lr
   d4536:	4027      	andcc	r7, r4
   d4538:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d453a:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d453c:	bf0c      	ite	eq
   d453e:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4540:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4542:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4544:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4546:	d360      	bcc.n	d460a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d4548:	1a10      	subs	r0, r2, r0
   d454a:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d454c:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d454e:	2a07      	cmp	r2, #7
   d4550:	d917      	bls.n	d4582 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4552:	2d01      	cmp	r5, #1
   d4554:	bf0c      	ite	eq
   d4556:	24ff      	moveq	r4, #255	; 0xff
   d4558:	2400      	movne	r4, #0
   d455a:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d455e:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4560:	3908      	subs	r1, #8
   d4562:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4564:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4566:	f800 4c80 	strb.w	r4, [r0, #-128]
   d456a:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d456e:	d8f7      	bhi.n	d4560 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4570:	f1a2 0108 	sub.w	r1, r2, #8
   d4574:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d4578:	3101      	adds	r1, #1
   d457a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d457e:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4582:	2a00      	cmp	r2, #0
   d4584:	d041      	beq.n	d460a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4586:	4923      	ldr	r1, [pc, #140]	; (d4614 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d4588:	5c89      	ldrb	r1, [r1, r2]
   d458a:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d458c:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d458e:	bf0c      	ite	eq
   d4590:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d4592:	438a      	bicne	r2, r1
   d4594:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d4596:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4598:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d459a:	2900      	cmp	r1, #0
   d459c:	db35      	blt.n	d460a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d459e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d45a2:	428c      	cmp	r4, r1
   d45a4:	dd31      	ble.n	d460a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d45a6:	2a00      	cmp	r2, #0
    w += x;
   d45a8:	bfbc      	itt	lt
   d45aa:	18d2      	addlt	r2, r2, r3
   d45ac:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d45ae:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d45b2:	bfb8      	it	lt
   d45b4:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d45b6:	18d6      	adds	r6, r2, r3
   d45b8:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d45ba:	bfc4      	itt	gt
   d45bc:	1aa3      	subgt	r3, r4, r2
   d45be:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d45c0:	2b00      	cmp	r3, #0
   d45c2:	dd22      	ble.n	d460a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d45c4:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d45c6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d45ca:	4810      	ldr	r0, [pc, #64]	; (d460c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d45cc:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d45d0:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d45d2:	2201      	movs	r2, #1
   d45d4:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d45d8:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d45da:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d45dc:	d109      	bne.n	d45f2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d45de:	1e5a      	subs	r2, r3, #1
   d45e0:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d45e2:	1c5c      	adds	r4, r3, #1
   d45e4:	d011      	beq.n	d460a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d45e6:	f810 2b01 	ldrb.w	r2, [r0], #1
   d45ea:	430a      	orrs	r2, r1
   d45ec:	f800 2c01 	strb.w	r2, [r0, #-1]
   d45f0:	e7f5      	b.n	d45de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d45f2:	43c9      	mvns	r1, r1
   d45f4:	b2c9      	uxtb	r1, r1
   d45f6:	1e5a      	subs	r2, r3, #1
   d45f8:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d45fa:	1c5a      	adds	r2, r3, #1
   d45fc:	d005      	beq.n	d460a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d45fe:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4602:	400a      	ands	r2, r1
   d4604:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4608:	e7f5      	b.n	d45f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d460a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d460c:	2003dec0 	.word	0x2003dec0
   d4610:	2003deb8 	.word	0x2003deb8
   d4614:	2003deb0 	.word	0x2003deb0

000d4618 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>:
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d4618:	b410      	push	{r4}
  
  if(hwSPI) {
   d461a:	b12a      	cbz	r2, d4628 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0x10>
    (void)SPI.transfer(d);
   d461c:	4619      	mov	r1, r3
   d461e:	4806      	ldr	r0, [pc, #24]	; (d4638 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0x20>)
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}
   d4620:	f85d 4b04 	ldr.w	r4, [sp], #4


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
   d4624:	f000 bf12 	b.w	d544c <_ZN8SPIClass8transferEh>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4628:	2201      	movs	r2, #1
   d462a:	b2c9      	uxtb	r1, r1
   d462c:	b2c0      	uxtb	r0, r0
  }
}
   d462e:	f85d 4b04 	ldr.w	r4, [sp], #4
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4632:	f001 bd45 	b.w	d60c0 <shiftOut>
   d4636:	bf00      	nop
   d4638:	2003e6ec 	.word	0x2003e6ec

000d463c <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d463e:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4640:	4606      	mov	r6, r0
   d4642:	4614      	mov	r4, r2
   d4644:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4646:	db3f      	blt.n	d46c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4648:	f000 fbac 	bl	d4da4 <_ZN12Adafruit_GFX5widthEv>
   d464c:	4285      	cmp	r5, r0
   d464e:	da3b      	bge.n	d46c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4650:	2c00      	cmp	r4, #0
   d4652:	db39      	blt.n	d46c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4654:	4630      	mov	r0, r6
   d4656:	f000 fba8 	bl	d4daa <_ZN12Adafruit_GFX6heightEv>
   d465a:	4284      	cmp	r4, r0
   d465c:	da34      	bge.n	d46c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d465e:	4630      	mov	r0, r6
   d4660:	f000 fb9e 	bl	d4da0 <_ZN12Adafruit_GFX11getRotationEv>
   d4664:	2802      	cmp	r0, #2
   d4666:	d127      	bne.n	d46b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4668:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d466a:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d466c:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d466e:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4670:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d4672:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4674:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d4676:	b204      	sxth	r4, r0
   d4678:	e006      	b.n	d4688 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d467a:	2801      	cmp	r0, #1
   d467c:	d104      	bne.n	d4688 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d467e:	8933      	ldrh	r3, [r6, #8]
   d4680:	3b01      	subs	r3, #1
   d4682:	1b1b      	subs	r3, r3, r4
   d4684:	462c      	mov	r4, r5
   d4686:	b21d      	sxth	r5, r3
   d4688:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d468a:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d468c:	fb94 f0f0 	sdiv	r0, r4, r0
   d4690:	b200      	sxth	r0, r0
   d4692:	4b0e      	ldr	r3, [pc, #56]	; (d46cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d4694:	f004 0207 	and.w	r2, r4, #7
   d4698:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d469c:	d104      	bne.n	d46a8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d469e:	4097      	lsls	r7, r2
   d46a0:	5c5a      	ldrb	r2, [r3, r1]
   d46a2:	4317      	orrs	r7, r2
   d46a4:	545f      	strb	r7, [r3, r1]
   d46a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d46a8:	5c58      	ldrb	r0, [r3, r1]
   d46aa:	2701      	movs	r7, #1
   d46ac:	fa07 f202 	lsl.w	r2, r7, r2
   d46b0:	ea20 0202 	bic.w	r2, r0, r2
   d46b4:	545a      	strb	r2, [r3, r1]
   d46b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d46b8:	2803      	cmp	r0, #3
   d46ba:	d1de      	bne.n	d467a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d46bc:	8973      	ldrh	r3, [r6, #10]
   d46be:	3b01      	subs	r3, #1
   d46c0:	1b5b      	subs	r3, r3, r5
   d46c2:	4625      	mov	r5, r4
   d46c4:	b21c      	sxth	r4, r3
   d46c6:	e7df      	b.n	d4688 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d46c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d46ca:	bf00      	nop
   d46cc:	2003dec0 	.word	0x2003dec0

000d46d0 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d46d0:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d46d2:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d46d4:	4604      	mov	r4, r0
   d46d6:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d46d8:	2180      	movs	r1, #128	; 0x80
   d46da:	f000 fa77 	bl	d4bcc <_ZN12Adafruit_GFXC1Ess>
   d46de:	4b06      	ldr	r3, [pc, #24]	; (d46f8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d46e0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d46e2:	23ff      	movs	r3, #255	; 0xff
   d46e4:	7763      	strb	r3, [r4, #29]
   d46e6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d46ea:	77e3      	strb	r3, [r4, #31]
   d46ec:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d46ee:	f884 5020 	strb.w	r5, [r4, #32]
}
   d46f2:	4620      	mov	r0, r4
   d46f4:	bd38      	pop	{r3, r4, r5, pc}
   d46f6:	bf00      	nop
   d46f8:	000d6fc8 	.word	0x000d6fc8

000d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d46fc:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d46fe:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4702:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4704:	4604      	mov	r4, r0
   d4706:	460d      	mov	r5, r1
  if (sid != -1)
   d4708:	d022      	beq.n	d4750 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x54>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d470a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d470e:	2101      	movs	r1, #1
   d4710:	b280      	uxth	r0, r0
   d4712:	f001 fcbc 	bl	d608e <digitalWrite>
    digitalWrite(dc, LOW);
   d4716:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d471a:	2100      	movs	r1, #0
   d471c:	b280      	uxth	r0, r0
   d471e:	f001 fcb6 	bl	d608e <digitalWrite>
    digitalWrite(cs, LOW);
   d4722:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4726:	2100      	movs	r1, #0
   d4728:	b280      	uxth	r0, r0
   d472a:	f001 fcb0 	bl	d608e <digitalWrite>
    fastSPIwrite(c);
   d472e:	f994 101e 	ldrsb.w	r1, [r4, #30]
   d4732:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4736:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   d473a:	462b      	mov	r3, r5
   d473c:	f7ff ff6c 	bl	d4618 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
   d4740:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4744:	2101      	movs	r1, #1
   d4746:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d4748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d474c:	f001 bc9f 	b.w	d608e <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d4750:	f001 fcfc 	bl	d614c <_Z19__fetch_global_Wirev>
   d4754:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4758:	f001 fab4 	bl	d5cc4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d475c:	f001 fcf6 	bl	d614c <_Z19__fetch_global_Wirev>
   d4760:	6803      	ldr	r3, [r0, #0]
   d4762:	2100      	movs	r1, #0
   d4764:	689b      	ldr	r3, [r3, #8]
   d4766:	4798      	blx	r3
    Wire.write(c);
   d4768:	f001 fcf0 	bl	d614c <_Z19__fetch_global_Wirev>
   d476c:	6803      	ldr	r3, [r0, #0]
   d476e:	4629      	mov	r1, r5
   d4770:	689b      	ldr	r3, [r3, #8]
   d4772:	4798      	blx	r3
    Wire.endTransmission();
   d4774:	f001 fcea 	bl	d614c <_Z19__fetch_global_Wirev>
  }
}
   d4778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d477c:	f001 baa9 	b.w	d5cd2 <_ZN7TwoWire15endTransmissionEv>

000d4780 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4780:	b538      	push	{r3, r4, r5, lr}
   d4782:	4604      	mov	r4, r0
   d4784:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d4786:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4788:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d478c:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d478e:	3301      	adds	r3, #1
   d4790:	d033      	beq.n	d47fa <_ZN16Adafruit_SSD13065beginEhh+0x7a>
    pinMode(dc, OUTPUT);
   d4792:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4796:	2101      	movs	r1, #1
   d4798:	b280      	uxth	r0, r0
   d479a:	f001 fc67 	bl	d606c <pinMode>
    pinMode(cs, OUTPUT);
   d479e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d47a2:	2101      	movs	r1, #1
   d47a4:	b280      	uxth	r0, r0
   d47a6:	f001 fc61 	bl	d606c <pinMode>
    if (!hwSPI){
   d47aa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d47ae:	b95b      	cbnz	r3, d47c8 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d47b0:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d47b4:	2101      	movs	r1, #1
   d47b6:	b280      	uxth	r0, r0
   d47b8:	f001 fc58 	bl	d606c <pinMode>
    	pinMode(sclk, OUTPUT);
   d47bc:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d47c0:	2101      	movs	r1, #1
   d47c2:	b280      	uxth	r0, r0
   d47c4:	f001 fc52 	bl	d606c <pinMode>
    	}
    if (hwSPI){
   d47c8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d47cc:	b1cb      	cbz	r3, d4802 <_ZN16Adafruit_SSD13065beginEhh+0x82>
        digitalWrite(cs, HIGH);
   d47ce:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d47d2:	2101      	movs	r1, #1
   d47d4:	b280      	uxth	r0, r0
   d47d6:	f001 fc5a 	bl	d608e <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
   d47da:	2101      	movs	r1, #1
   d47dc:	484f      	ldr	r0, [pc, #316]	; (d491c <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d47de:	f000 fdd4 	bl	d538a <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
   d47e2:	2110      	movs	r1, #16
   d47e4:	484d      	ldr	r0, [pc, #308]	; (d491c <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d47e6:	f000 fe1d 	bl	d5424 <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
   d47ea:	2100      	movs	r1, #0
   d47ec:	484b      	ldr	r0, [pc, #300]	; (d491c <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d47ee:	f000 fdcf 	bl	d5390 <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
   d47f2:	484a      	ldr	r0, [pc, #296]	; (d491c <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d47f4:	f000 fdc4 	bl	d5380 <_ZN8SPIClass5beginEv>
   d47f8:	e003      	b.n	d4802 <_ZN16Adafruit_SSD13065beginEhh+0x82>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d47fa:	f001 fca7 	bl	d614c <_Z19__fetch_global_Wirev>
   d47fe:	f001 fa57 	bl	d5cb0 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d4802:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4806:	2101      	movs	r1, #1
   d4808:	b280      	uxth	r0, r0
   d480a:	f001 fc2f 	bl	d606c <pinMode>
  digitalWrite(rst, HIGH);
   d480e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4812:	2101      	movs	r1, #1
   d4814:	b280      	uxth	r0, r0
   d4816:	f001 fc3a 	bl	d608e <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d481a:	2001      	movs	r0, #1
   d481c:	f001 f82e 	bl	d587c <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d4820:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4824:	2100      	movs	r1, #0
   d4826:	b280      	uxth	r0, r0
   d4828:	f001 fc31 	bl	d608e <digitalWrite>
  // wait 10ms
  delay(10);
   d482c:	200a      	movs	r0, #10
   d482e:	f001 f825 	bl	d587c <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d4832:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4836:	2101      	movs	r1, #1
   d4838:	b280      	uxth	r0, r0
   d483a:	f001 fc28 	bl	d608e <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d483e:	4620      	mov	r0, r4
   d4840:	21ae      	movs	r1, #174	; 0xae
   d4842:	f7ff ff5b 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4846:	4620      	mov	r0, r4
   d4848:	21d5      	movs	r1, #213	; 0xd5
   d484a:	f7ff ff57 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d484e:	4620      	mov	r0, r4
   d4850:	2180      	movs	r1, #128	; 0x80
   d4852:	f7ff ff53 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4856:	4620      	mov	r0, r4
   d4858:	21a8      	movs	r1, #168	; 0xa8
   d485a:	f7ff ff4f 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d485e:	4620      	mov	r0, r4
   d4860:	213f      	movs	r1, #63	; 0x3f
   d4862:	f7ff ff4b 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4866:	4620      	mov	r0, r4
   d4868:	21d3      	movs	r1, #211	; 0xd3
   d486a:	f7ff ff47 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d486e:	4620      	mov	r0, r4
   d4870:	2100      	movs	r1, #0
   d4872:	f7ff ff43 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4876:	4620      	mov	r0, r4
   d4878:	2140      	movs	r1, #64	; 0x40
   d487a:	f7ff ff3f 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d487e:	218d      	movs	r1, #141	; 0x8d
   d4880:	4620      	mov	r0, r4
   d4882:	f7ff ff3b 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4886:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4888:	bf0c      	ite	eq
   d488a:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d488c:	2114      	movne	r1, #20
   d488e:	4620      	mov	r0, r4
   d4890:	f7ff ff34 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4894:	4620      	mov	r0, r4
   d4896:	2120      	movs	r1, #32
   d4898:	f7ff ff30 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d489c:	4620      	mov	r0, r4
   d489e:	2100      	movs	r1, #0
   d48a0:	f7ff ff2c 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d48a4:	4620      	mov	r0, r4
   d48a6:	21a1      	movs	r1, #161	; 0xa1
   d48a8:	f7ff ff28 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d48ac:	4620      	mov	r0, r4
   d48ae:	21c8      	movs	r1, #200	; 0xc8
   d48b0:	f7ff ff24 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d48b4:	4620      	mov	r0, r4
   d48b6:	21da      	movs	r1, #218	; 0xda
   d48b8:	f7ff ff20 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d48bc:	4620      	mov	r0, r4
   d48be:	2112      	movs	r1, #18
   d48c0:	f7ff ff1c 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d48c4:	2181      	movs	r1, #129	; 0x81
   d48c6:	4620      	mov	r0, r4
   d48c8:	f7ff ff18 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d48cc:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d48ce:	bf0c      	ite	eq
   d48d0:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d48d2:	21cf      	movne	r1, #207	; 0xcf
   d48d4:	4620      	mov	r0, r4
   d48d6:	f7ff ff11 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d48da:	21d9      	movs	r1, #217	; 0xd9
   d48dc:	4620      	mov	r0, r4
   d48de:	f7ff ff0d 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d48e2:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d48e4:	bf0c      	ite	eq
   d48e6:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d48e8:	21f1      	movne	r1, #241	; 0xf1
   d48ea:	4620      	mov	r0, r4
   d48ec:	f7ff ff06 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d48f0:	4620      	mov	r0, r4
   d48f2:	21db      	movs	r1, #219	; 0xdb
   d48f4:	f7ff ff02 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d48f8:	4620      	mov	r0, r4
   d48fa:	2140      	movs	r1, #64	; 0x40
   d48fc:	f7ff fefe 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d4900:	4620      	mov	r0, r4
   d4902:	21a4      	movs	r1, #164	; 0xa4
   d4904:	f7ff fefa 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d4908:	4620      	mov	r0, r4
   d490a:	21a6      	movs	r1, #166	; 0xa6
   d490c:	f7ff fef6 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4910:	4620      	mov	r0, r4
   d4912:	21af      	movs	r1, #175	; 0xaf
}
   d4914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4918:	f7ff bef0 	b.w	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
   d491c:	2003e6ec 	.word	0x2003e6ec

000d4920 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4924:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4926:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4928:	f7ff fee8 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d492c:	2100      	movs	r1, #0
   d492e:	4620      	mov	r0, r4
   d4930:	f7ff fee4 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4934:	217f      	movs	r1, #127	; 0x7f
   d4936:	4620      	mov	r0, r4
   d4938:	f7ff fee0 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d493c:	2122      	movs	r1, #34	; 0x22
   d493e:	4620      	mov	r0, r4
   d4940:	f7ff fedc 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4944:	2100      	movs	r1, #0
   d4946:	4620      	mov	r0, r4
   d4948:	f7ff fed8 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d494c:	2107      	movs	r1, #7
   d494e:	4620      	mov	r0, r4
   d4950:	f7ff fed4 	bl	d46fc <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d4954:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4958:	f8df 80ac 	ldr.w	r8, [pc, #172]	; d4a08 <_ZN16Adafruit_SSD13067displayEv+0xe8>
   d495c:	3301      	adds	r3, #1
   d495e:	d02e      	beq.n	d49be <_ZN16Adafruit_SSD13067displayEv+0x9e>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4960:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4964:	2101      	movs	r1, #1
   d4966:	b280      	uxth	r0, r0
   d4968:	f001 fb91 	bl	d608e <digitalWrite>
    digitalWrite(dc, HIGH);
   d496c:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4970:	2101      	movs	r1, #1
   d4972:	b280      	uxth	r0, r0
   d4974:	f001 fb8b 	bl	d608e <digitalWrite>
    digitalWrite(cs, LOW);
   d4978:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d497c:	2100      	movs	r1, #0
   d497e:	b280      	uxth	r0, r0
   d4980:	f001 fb85 	bl	d608e <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4984:	2001      	movs	r0, #1
   d4986:	f000 fa8d 	bl	d4ea4 <HAL_Delay_Microseconds>
   d498a:	2500      	movs	r5, #0
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d498c:	f818 3005 	ldrb.w	r3, [r8, r5]
   d4990:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   d4994:	f994 101e 	ldrsb.w	r1, [r4, #30]
   d4998:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d499c:	3501      	adds	r5, #1
   d499e:	f7ff fe3b 	bl	d4618 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d49a2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d49a6:	d1f1      	bne.n	d498c <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d49a8:	2001      	movs	r0, #1
   d49aa:	f000 fa7b 	bl	d4ea4 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d49ae:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d49b2:	2101      	movs	r1, #1
   d49b4:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d49b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d49ba:	f001 bb68 	b.w	d608e <digitalWrite>
   d49be:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d49c0:	f001 fbc4 	bl	d614c <_Z19__fetch_global_Wirev>
   d49c4:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d49c8:	f001 f97c 	bl	d5cc4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d49cc:	f001 fbbe 	bl	d614c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d49d0:	6803      	ldr	r3, [r0, #0]
   d49d2:	2140      	movs	r1, #64	; 0x40
   d49d4:	689b      	ldr	r3, [r3, #8]
   d49d6:	4798      	blx	r3
   d49d8:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d49da:	f001 fbb7 	bl	d614c <_Z19__fetch_global_Wirev>
   d49de:	19af      	adds	r7, r5, r6
   d49e0:	6803      	ldr	r3, [r0, #0]
   d49e2:	b2bf      	uxth	r7, r7
   d49e4:	689b      	ldr	r3, [r3, #8]
   d49e6:	f818 1007 	ldrb.w	r1, [r8, r7]
   d49ea:	3601      	adds	r6, #1
   d49ec:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d49ee:	2e10      	cmp	r6, #16
   d49f0:	d1f3      	bne.n	d49da <_ZN16Adafruit_SSD13067displayEv+0xba>
   d49f2:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d49f4:	f001 fbaa 	bl	d614c <_Z19__fetch_global_Wirev>
   d49f8:	b2ad      	uxth	r5, r5
   d49fa:	f001 f96a 	bl	d5cd2 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d49fe:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4a02:	d1dd      	bne.n	d49c0 <_ZN16Adafruit_SSD13067displayEv+0xa0>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4a08:	2003dec0 	.word	0x2003dec0

000d4a0c <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4a10:	2100      	movs	r1, #0
   d4a12:	4801      	ldr	r0, [pc, #4]	; (d4a18 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4a14:	f001 be55 	b.w	d66c2 <memset>
   d4a18:	2003dec0 	.word	0x2003dec0

000d4a1c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4a1c:	f000 b9da 	b.w	d4dd4 <HAL_Pin_Map>

000d4a20 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a24:	b085      	sub	sp, #20
   d4a26:	461e      	mov	r6, r3
   d4a28:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d4a2c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d4a30:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4a32:	1a9a      	subs	r2, r3, r2
   d4a34:	2a00      	cmp	r2, #0
   d4a36:	bfb8      	it	lt
   d4a38:	4252      	neglt	r2, r2
   d4a3a:	9200      	str	r2, [sp, #0]
   d4a3c:	1a72      	subs	r2, r6, r1
   d4a3e:	2a00      	cmp	r2, #0
   d4a40:	bfb8      	it	lt
   d4a42:	4252      	neglt	r2, r2
   d4a44:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4a46:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4a48:	9a00      	ldr	r2, [sp, #0]
   d4a4a:	9901      	ldr	r1, [sp, #4]
   d4a4c:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4a4e:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4a50:	dd05      	ble.n	d4a5e <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d4a52:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d4a54:	461e      	mov	r6, r3
   d4a56:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4a58:	4622      	mov	r2, r4
    swap(x0, y0);
   d4a5a:	462c      	mov	r4, r5
   d4a5c:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4a5e:	42b4      	cmp	r4, r6
   d4a60:	dd05      	ble.n	d4a6e <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d4a62:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d4a64:	461d      	mov	r5, r3
   d4a66:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4a68:	4622      	mov	r2, r4
   d4a6a:	4634      	mov	r4, r6
   d4a6c:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4a6e:	1b5a      	subs	r2, r3, r5
   d4a70:	2a00      	cmp	r2, #0
   d4a72:	bfb8      	it	lt
   d4a74:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4a76:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4a7a:	429d      	cmp	r5, r3
   d4a7c:	bfb4      	ite	lt
   d4a7e:	2301      	movlt	r3, #1
   d4a80:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4a84:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4a88:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4a8a:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d4a8c:	fa0f f788 	sxth.w	r7, r8
   d4a90:	2202      	movs	r2, #2
   d4a92:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4a96:	42b4      	cmp	r4, r6
   d4a98:	dc1f      	bgt.n	d4ada <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d4a9a:	9a01      	ldr	r2, [sp, #4]
   d4a9c:	9b00      	ldr	r3, [sp, #0]
   d4a9e:	4293      	cmp	r3, r2
   d4aa0:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d4aa4:	bfc8      	it	gt
   d4aa6:	4622      	movgt	r2, r4
   d4aa8:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4aac:	bfc8      	it	gt
   d4aae:	4629      	movgt	r1, r5
   d4ab0:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d4ab2:	bfdc      	itt	le
   d4ab4:	462a      	movle	r2, r5
   d4ab6:	4621      	movle	r1, r4
   d4ab8:	4648      	mov	r0, r9
   d4aba:	47d8      	blx	fp
    }
    err -= dy;
   d4abc:	9b03      	ldr	r3, [sp, #12]
   d4abe:	1aff      	subs	r7, r7, r3
   d4ac0:	b2bb      	uxth	r3, r7
   d4ac2:	b21f      	sxth	r7, r3
    if (err < 0) {
   d4ac4:	2f00      	cmp	r7, #0
   d4ac6:	da05      	bge.n	d4ad4 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d4ac8:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d4aca:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d4ace:	4415      	add	r5, r2
   d4ad0:	b22d      	sxth	r5, r5
      err += dx;
   d4ad2:	b23f      	sxth	r7, r7
   d4ad4:	3401      	adds	r4, #1
   d4ad6:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4ad8:	e7dd      	b.n	d4a96 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d4ada:	b005      	add	sp, #20
   d4adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4ae0 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4ae0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4ae4:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4ae8:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4aea:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d4aee:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4af0:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d4af2:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4af4:	4691      	mov	r9, r2
   d4af6:	460d      	mov	r5, r1
   d4af8:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d4afa:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4afc:	6823      	ldr	r3, [r4, #0]
   d4afe:	9600      	str	r6, [sp, #0]
   d4b00:	f10a 32ff 	add.w	r2, sl, #4294967295
   d4b04:	444a      	add	r2, r9
   d4b06:	69df      	ldr	r7, [r3, #28]
   d4b08:	4629      	mov	r1, r5
   d4b0a:	4643      	mov	r3, r8
   d4b0c:	4620      	mov	r0, r4
   d4b0e:	b212      	sxth	r2, r2
   d4b10:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d4b12:	6823      	ldr	r3, [r4, #0]
   d4b14:	9600      	str	r6, [sp, #0]
   d4b16:	699f      	ldr	r7, [r3, #24]
   d4b18:	464a      	mov	r2, r9
   d4b1a:	4653      	mov	r3, sl
   d4b1c:	4629      	mov	r1, r5
   d4b1e:	4620      	mov	r0, r4
   d4b20:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d4b22:	6823      	ldr	r3, [r4, #0]
   d4b24:	960a      	str	r6, [sp, #40]	; 0x28
   d4b26:	f108 31ff 	add.w	r1, r8, #4294967295
   d4b2a:	4429      	add	r1, r5
   d4b2c:	699d      	ldr	r5, [r3, #24]
   d4b2e:	464a      	mov	r2, r9
   d4b30:	4653      	mov	r3, sl
   d4b32:	b209      	sxth	r1, r1
   d4b34:	4620      	mov	r0, r4
   d4b36:	46ac      	mov	ip, r5
}
   d4b38:	b002      	add	sp, #8
   d4b3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d4b3e:	4760      	bx	ip

000d4b40 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d4b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d4b42:	3b01      	subs	r3, #1
   d4b44:	4413      	add	r3, r2
   d4b46:	6804      	ldr	r4, [r0, #0]
   d4b48:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4b4c:	9501      	str	r5, [sp, #4]
   d4b4e:	b21b      	sxth	r3, r3
   d4b50:	9300      	str	r3, [sp, #0]
   d4b52:	6964      	ldr	r4, [r4, #20]
   d4b54:	460b      	mov	r3, r1
   d4b56:	47a0      	blx	r4
}
   d4b58:	b003      	add	sp, #12
   d4b5a:	bd30      	pop	{r4, r5, pc}

000d4b5c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d4b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d4b5e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4b62:	6804      	ldr	r4, [r0, #0]
   d4b64:	e88d 0024 	stmia.w	sp, {r2, r5}
   d4b68:	3b01      	subs	r3, #1
   d4b6a:	440b      	add	r3, r1
   d4b6c:	6964      	ldr	r4, [r4, #20]
   d4b6e:	b21b      	sxth	r3, r3
   d4b70:	47a0      	blx	r4
}
   d4b72:	b003      	add	sp, #12
   d4b74:	bd30      	pop	{r4, r5, pc}

000d4b76 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4b76:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4b7a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d4b7e:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4b82:	4605      	mov	r5, r0
   d4b84:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4b86:	460c      	mov	r4, r1
   d4b88:	eb01 0a03 	add.w	sl, r1, r3
   d4b8c:	4554      	cmp	r4, sl
   d4b8e:	da0b      	bge.n	d4ba8 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d4b90:	682b      	ldr	r3, [r5, #0]
   d4b92:	f8cd 9000 	str.w	r9, [sp]
   d4b96:	699e      	ldr	r6, [r3, #24]
   d4b98:	4621      	mov	r1, r4
   d4b9a:	4643      	mov	r3, r8
   d4b9c:	463a      	mov	r2, r7
   d4b9e:	4628      	mov	r0, r5
   d4ba0:	3401      	adds	r4, #1
   d4ba2:	47b0      	blx	r6
   d4ba4:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4ba6:	e7f1      	b.n	d4b8c <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d4ba8:	b002      	add	sp, #8
   d4baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4bae <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d4bae:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d4bb0:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d4bb4:	6804      	ldr	r4, [r0, #0]
   d4bb6:	9101      	str	r1, [sp, #4]
   d4bb8:	9200      	str	r2, [sp, #0]
   d4bba:	2200      	movs	r2, #0
   d4bbc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4bc0:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d4bc2:	4611      	mov	r1, r2
   d4bc4:	47a0      	blx	r4
}
   d4bc6:	b002      	add	sp, #8
   d4bc8:	bd10      	pop	{r4, pc}

000d4bca <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d4bca:	4770      	bx	lr

000d4bcc <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4bcc:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d4bce:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4bd0:	2400      	movs	r4, #0
   d4bd2:	4d08      	ldr	r5, [pc, #32]	; (d4bf4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4bd4:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d4bd6:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d4bd8:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d4bda:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d4bde:	2201      	movs	r2, #1
   d4be0:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d4be2:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d4be4:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d4be6:	8204      	strh	r4, [r0, #16]
   d4be8:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d4bea:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d4bec:	82c1      	strh	r1, [r0, #22]
   d4bee:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d4bf0:	7682      	strb	r2, [r0, #26]
}
   d4bf2:	bd30      	pop	{r4, r5, pc}
   d4bf4:	000d7000 	.word	0x000d7000

000d4bf8 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4bfc:	b08f      	sub	sp, #60	; 0x3c
   d4bfe:	4605      	mov	r5, r0
   d4c00:	9106      	str	r1, [sp, #24]
   d4c02:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d4c06:	9107      	str	r1, [sp, #28]
   d4c08:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d4c0c:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d4c0e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d4c12:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4c14:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d4c18:	4281      	cmp	r1, r0
   d4c1a:	dd7c      	ble.n	d4d16 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d4c1c:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d4c20:	4291      	cmp	r1, r2
   d4c22:	dd78      	ble.n	d4d16 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d4c24:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d4c26:	fb11 0008 	smlabb	r0, r1, r8, r0
   d4c2a:	2800      	cmp	r0, #0
   d4c2c:	dd73      	ble.n	d4d16 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d4c2e:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d4c32:	2800      	cmp	r0, #0
   d4c34:	dd6f      	ble.n	d4d16 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4c36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4c3a:	b296      	uxth	r6, r2
   d4c3c:	930c      	str	r3, [sp, #48]	; 0x30
   d4c3e:	f106 0308 	add.w	r3, r6, #8
   d4c42:	b29b      	uxth	r3, r3
   d4c44:	9109      	str	r1, [sp, #36]	; 0x24
   d4c46:	2400      	movs	r4, #0
   d4c48:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d4c4a:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4c4c:	bf1c      	itt	ne
   d4c4e:	4b33      	ldrne	r3, [pc, #204]	; (d4d1c <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d4c50:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4c52:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4c54:	bf16      	itet	ne
   d4c56:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d4c58:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4c5c:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4c60:	9604      	str	r6, [sp, #16]
   d4c62:	fa1f f388 	uxth.w	r3, r8
   d4c66:	9303      	str	r3, [sp, #12]
   d4c68:	9a03      	ldr	r2, [sp, #12]
   d4c6a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d4c6e:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4c72:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4c76:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4c78:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4c7a:	920a      	str	r2, [sp, #40]	; 0x28
   d4c7c:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4c7e:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4c82:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d4c84:	f019 0f01 	tst.w	r9, #1
   d4c88:	d011      	beq.n	d4cae <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d4c8a:	f1b8 0f01 	cmp.w	r8, #1
   d4c8e:	682b      	ldr	r3, [r5, #0]
   d4c90:	d103      	bne.n	d4c9a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d4c92:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4c96:	9b07      	ldr	r3, [sp, #28]
   d4c98:	e014      	b.n	d4cc4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4c9a:	9a07      	ldr	r2, [sp, #28]
   d4c9c:	9201      	str	r2, [sp, #4]
   d4c9e:	f8cd a000 	str.w	sl, [sp]
   d4ca2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4ca6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d4caa:	4653      	mov	r3, sl
   d4cac:	e018      	b.n	d4ce0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d4cae:	9b07      	ldr	r3, [sp, #28]
   d4cb0:	9a08      	ldr	r2, [sp, #32]
   d4cb2:	4293      	cmp	r3, r2
   d4cb4:	d017      	beq.n	d4ce6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4cb6:	f1b8 0f01 	cmp.w	r8, #1
   d4cba:	682b      	ldr	r3, [r5, #0]
   d4cbc:	d107      	bne.n	d4cce <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d4cbe:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4cc2:	4613      	mov	r3, r2
   d4cc4:	b23a      	sxth	r2, r7
   d4cc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4cc8:	4628      	mov	r0, r5
   d4cca:	47d8      	blx	fp
   d4ccc:	e00b      	b.n	d4ce6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4cce:	9a08      	ldr	r2, [sp, #32]
   d4cd0:	9201      	str	r2, [sp, #4]
   d4cd2:	f8cd a000 	str.w	sl, [sp]
   d4cd6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d4cda:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4cde:	4653      	mov	r3, sl
   d4ce0:	990a      	ldr	r1, [sp, #40]	; 0x28
   d4ce2:	4628      	mov	r0, r5
   d4ce4:	47d8      	blx	fp
   d4ce6:	9b04      	ldr	r3, [sp, #16]
   d4ce8:	9a03      	ldr	r2, [sp, #12]
   d4cea:	4413      	add	r3, r2
   d4cec:	b29b      	uxth	r3, r3
   d4cee:	9304      	str	r3, [sp, #16]
   d4cf0:	9b05      	ldr	r3, [sp, #20]
   d4cf2:	4413      	add	r3, r2
   d4cf4:	b29b      	uxth	r3, r3
   d4cf6:	3701      	adds	r7, #1
   d4cf8:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4cfc:	b2bf      	uxth	r7, r7
   d4cfe:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d4d00:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4d04:	d1be      	bne.n	d4c84 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d4d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4d08:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d4d0a:	3401      	adds	r4, #1
   d4d0c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4d10:	b264      	sxtb	r4, r4
   d4d12:	9309      	str	r3, [sp, #36]	; 0x24
   d4d14:	d199      	bne.n	d4c4a <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d4d16:	b00f      	add	sp, #60	; 0x3c
   d4d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d1c:	000d7030 	.word	0x000d7030

000d4d20 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4d20:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d4d22:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4d24:	b085      	sub	sp, #20
   d4d26:	4604      	mov	r4, r0
   d4d28:	460b      	mov	r3, r1

  if (c == '\n') {
   d4d2a:	d104      	bne.n	d4d36 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d4d2c:	7e02      	ldrb	r2, [r0, #24]
   d4d2e:	8a43      	ldrh	r3, [r0, #18]
   d4d30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d4d34:	e023      	b.n	d4d7e <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d4d36:	290d      	cmp	r1, #13
   d4d38:	d024      	beq.n	d4d84 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d4d3a:	7e05      	ldrb	r5, [r0, #24]
   d4d3c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d4d40:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d4d44:	9502      	str	r5, [sp, #8]
   d4d46:	8ac5      	ldrh	r5, [r0, #22]
   d4d48:	9501      	str	r5, [sp, #4]
   d4d4a:	8a85      	ldrh	r5, [r0, #20]
   d4d4c:	9500      	str	r5, [sp, #0]
   d4d4e:	f7ff ff53 	bl	d4bf8 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d4d52:	7e22      	ldrb	r2, [r4, #24]
   d4d54:	8a23      	ldrh	r3, [r4, #16]
   d4d56:	b291      	uxth	r1, r2
   d4d58:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d4d5c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4d60:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d4d62:	b21b      	sxth	r3, r3
   d4d64:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4d66:	b168      	cbz	r0, d4d84 <_ZN12Adafruit_GFX5writeEh+0x64>
   d4d68:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d4d6c:	f06f 0505 	mvn.w	r5, #5
   d4d70:	fb05 0202 	mla	r2, r5, r2, r0
   d4d74:	4293      	cmp	r3, r2
   d4d76:	dd05      	ble.n	d4d84 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d4d78:	8a63      	ldrh	r3, [r4, #18]
   d4d7a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d4d7e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d4d80:	2300      	movs	r3, #0
   d4d82:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d4d84:	2001      	movs	r0, #1
   d4d86:	b005      	add	sp, #20
   d4d88:	bd30      	pop	{r4, r5, pc}

000d4d8a <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d4d8a:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d4d8c:	8242      	strh	r2, [r0, #18]
   d4d8e:	4770      	bx	lr

000d4d90 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d4d90:	2900      	cmp	r1, #0
   d4d92:	bf08      	it	eq
   d4d94:	2101      	moveq	r1, #1
   d4d96:	7601      	strb	r1, [r0, #24]
   d4d98:	4770      	bx	lr

000d4d9a <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d4d9a:	82c1      	strh	r1, [r0, #22]
   d4d9c:	8281      	strh	r1, [r0, #20]
   d4d9e:	4770      	bx	lr

000d4da0 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d4da0:	7e40      	ldrb	r0, [r0, #25]
   d4da2:	4770      	bx	lr

000d4da4 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d4da4:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d4da8:	4770      	bx	lr

000d4daa <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d4daa:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d4dae:	4770      	bx	lr

000d4db0 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4db0:	f000 b810 	b.w	d4dd4 <HAL_Pin_Map>

000d4db4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <netdb_freeaddrinfo+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	689b      	ldr	r3, [r3, #8]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030268 	.word	0x00030268

000d4dc4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <netdb_getaddrinfo+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	68db      	ldr	r3, [r3, #12]
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030268 	.word	0x00030268

000d4dd4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <HAL_Pin_Map+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	681b      	ldr	r3, [r3, #0]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	0003022c 	.word	0x0003022c

000d4de4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <HAL_Pin_Mode+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	689b      	ldr	r3, [r3, #8]
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	0003022c 	.word	0x0003022c

000d4df4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <HAL_Get_Pin_Mode+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	68db      	ldr	r3, [r3, #12]
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	0003022c 	.word	0x0003022c

000d4e04 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <HAL_GPIO_Write+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	691b      	ldr	r3, [r3, #16]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	0003022c 	.word	0x0003022c

000d4e14 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <HAL_SPI_Begin+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	681b      	ldr	r3, [r3, #0]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030230 	.word	0x00030230

000d4e24 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <HAL_SPI_Set_Bit_Order+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	689b      	ldr	r3, [r3, #8]
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030230 	.word	0x00030230

000d4e34 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <HAL_SPI_Set_Data_Mode+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	68db      	ldr	r3, [r3, #12]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	00030230 	.word	0x00030230

000d4e44 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <HAL_SPI_Set_Clock_Divider+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	691b      	ldr	r3, [r3, #16]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030230 	.word	0x00030230

000d4e54 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <HAL_SPI_Send_Receive_Data+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	695b      	ldr	r3, [r3, #20]
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030230 	.word	0x00030230

000d4e64 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <HAL_SPI_Init+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	69db      	ldr	r3, [r3, #28]
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030230 	.word	0x00030230

000d4e74 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <HAL_SPI_Is_Enabled+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	6a1b      	ldr	r3, [r3, #32]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030230 	.word	0x00030230

000d4e84 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <HAL_SPI_Info+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030230 	.word	0x00030230

000d4e94 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <HAL_RNG_GetRandomNumber+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	685b      	ldr	r3, [r3, #4]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030218 	.word	0x00030218

000d4ea4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <HAL_Delay_Microseconds+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	68db      	ldr	r3, [r3, #12]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030218 	.word	0x00030218

000d4eb4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	695b      	ldr	r3, [r3, #20]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030218 	.word	0x00030218

000d4ec4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <HAL_RTC_Get_UnixTime+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	69db      	ldr	r3, [r3, #28]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030218 	.word	0x00030218

000d4ed4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <HAL_RTC_Time_Is_Valid+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030218 	.word	0x00030218

000d4ee4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <os_thread_is_current+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	689b      	ldr	r3, [r3, #8]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030248 	.word	0x00030248

000d4ef4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <os_thread_join+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	691b      	ldr	r3, [r3, #16]
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030248 	.word	0x00030248

000d4f04 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <os_thread_cleanup+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	695b      	ldr	r3, [r3, #20]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030248 	.word	0x00030248

000d4f14 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <os_mutex_create+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030248 	.word	0x00030248

000d4f24 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <os_mutex_recursive_create+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030248 	.word	0x00030248

000d4f34 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <inet_inet_ntop+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	695b      	ldr	r3, [r3, #20]
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030264 	.word	0x00030264

000d4f44 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <HAL_USART_Init+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	681b      	ldr	r3, [r3, #0]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	0003023c 	.word	0x0003023c

000d4f54 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <HAL_USART_Write_Data+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	68db      	ldr	r3, [r3, #12]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	0003023c 	.word	0x0003023c

000d4f64 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <HAL_USART_Available_Data+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	691b      	ldr	r3, [r3, #16]
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	0003023c 	.word	0x0003023c

000d4f74 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <HAL_USART_Read_Data+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	695b      	ldr	r3, [r3, #20]
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	0003023c 	.word	0x0003023c

000d4f84 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <HAL_USART_Peek_Data+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	699b      	ldr	r3, [r3, #24]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	0003023c 	.word	0x0003023c

000d4f94 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <HAL_USART_Flush_Data+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	69db      	ldr	r3, [r3, #28]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	0003023c 	.word	0x0003023c

000d4fa4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <HAL_USART_Is_Enabled+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	6a1b      	ldr	r3, [r3, #32]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	0003023c 	.word	0x0003023c

000d4fb4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <HAL_USART_Available_Data_For_Write+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	0003023c 	.word	0x0003023c

000d4fc4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <HAL_I2C_Begin+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	68db      	ldr	r3, [r3, #12]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	00030228 	.word	0x00030228

000d4fd4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <HAL_I2C_Begin_Transmission+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	699b      	ldr	r3, [r3, #24]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030228 	.word	0x00030228

000d4fe4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <HAL_I2C_End_Transmission+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	69db      	ldr	r3, [r3, #28]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030228 	.word	0x00030228

000d4ff4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <HAL_I2C_Write_Data+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	6a1b      	ldr	r3, [r3, #32]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030228 	.word	0x00030228

000d5004 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <HAL_I2C_Available_Data+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030228 	.word	0x00030228

000d5014 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <HAL_I2C_Read_Data+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030228 	.word	0x00030228

000d5024 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <HAL_I2C_Peek_Data+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030228 	.word	0x00030228

000d5034 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <HAL_I2C_Flush_Data+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030228 	.word	0x00030228

000d5044 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <HAL_I2C_Is_Enabled+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030228 	.word	0x00030228

000d5054 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <HAL_I2C_Init+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030228 	.word	0x00030228

000d5064 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <HAL_USB_USART_Init+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	681b      	ldr	r3, [r3, #0]
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	0003024c 	.word	0x0003024c

000d5074 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <HAL_USB_USART_Begin+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	685b      	ldr	r3, [r3, #4]
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	0003024c 	.word	0x0003024c

000d5084 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <HAL_USB_USART_Available_Data+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	691b      	ldr	r3, [r3, #16]
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	0003024c 	.word	0x0003024c

000d5094 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	695b      	ldr	r3, [r3, #20]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	0003024c 	.word	0x0003024c

000d50a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <HAL_USB_USART_Receive_Data+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	699b      	ldr	r3, [r3, #24]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	0003024c 	.word	0x0003024c

000d50b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <HAL_USB_USART_Send_Data+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	69db      	ldr	r3, [r3, #28]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	0003024c 	.word	0x0003024c

000d50c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <HAL_USB_USART_Flush_Data+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	6a1b      	ldr	r3, [r3, #32]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	0003024c 	.word	0x0003024c

000d50d4 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <HAL_USB_USART_Is_Enabled+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	0003024c 	.word	0x0003024c

000d50e4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <panic_+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	00030260 	.word	0x00030260

000d50f4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <system_mode+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	681b      	ldr	r3, [r3, #0]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	00030220 	.word	0x00030220

000d5104 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <set_system_mode+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	685b      	ldr	r3, [r3, #4]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	00030220 	.word	0x00030220

000d5114 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <system_delay_ms+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	695b      	ldr	r3, [r3, #20]
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	00030220 	.word	0x00030220

000d5124 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <system_thread_get_state+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	00030220 	.word	0x00030220

000d5134 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b03      	ldr	r3, [pc, #12]	; (d5144 <system_ctrl_set_app_request_handler+0x10>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d513e:	9301      	str	r3, [sp, #4]
   d5140:	bd08      	pop	{r3, pc}
   d5142:	0000      	.short	0x0000
   d5144:	00030220 	.word	0x00030220

000d5148 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5148:	b508      	push	{r3, lr}
   d514a:	4b03      	ldr	r3, [pc, #12]	; (d5158 <system_ctrl_set_result+0x10>)
   d514c:	681b      	ldr	r3, [r3, #0]
   d514e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5152:	9301      	str	r3, [sp, #4]
   d5154:	bd08      	pop	{r3, pc}
   d5156:	0000      	.short	0x0000
   d5158:	00030220 	.word	0x00030220

000d515c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <network_connect+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	685b      	ldr	r3, [r3, #4]
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	00030240 	.word	0x00030240

000d516c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <network_connecting+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	689b      	ldr	r3, [r3, #8]
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	00030240 	.word	0x00030240

000d517c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <network_disconnect+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	68db      	ldr	r3, [r3, #12]
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	00030240 	.word	0x00030240

000d518c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <network_ready+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	691b      	ldr	r3, [r3, #16]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030240 	.word	0x00030240

000d519c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <network_on+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	695b      	ldr	r3, [r3, #20]
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	00030240 	.word	0x00030240

000d51ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <network_off+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	699b      	ldr	r3, [r3, #24]
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	00030240 	.word	0x00030240

000d51bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <network_listen+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	69db      	ldr	r3, [r3, #28]
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	00030240 	.word	0x00030240

000d51cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <network_listening+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	6a1b      	ldr	r3, [r3, #32]
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	00030240 	.word	0x00030240

000d51dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <network_set_listen_timeout+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030240 	.word	0x00030240

000d51ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <network_get_listen_timeout+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	00030240 	.word	0x00030240

000d51fc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <spark_process+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	689b      	ldr	r3, [r3, #8]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	00030244 	.word	0x00030244

000d520c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <spark_cloud_flag_connected+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	695b      	ldr	r3, [r3, #20]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	00030244 	.word	0x00030244

000d521c <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <spark_sync_time+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	00030244 	.word	0x00030244

000d522c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <spark_sync_time_pending+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	00030244 	.word	0x00030244

000d523c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <spark_sync_time_last+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	00030244 	.word	0x00030244

000d524c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	00030244 	.word	0x00030244

000d525c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <malloc+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	681b      	ldr	r3, [r3, #0]
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	0003021c 	.word	0x0003021c

000d526c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <free+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	685b      	ldr	r3, [r3, #4]
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	0003021c 	.word	0x0003021c

000d527c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <realloc+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	689b      	ldr	r3, [r3, #8]
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	0003021c 	.word	0x0003021c

000d528c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <siprintf+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	691b      	ldr	r3, [r3, #16]
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	0003021c 	.word	0x0003021c

000d529c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <siscanf+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	699b      	ldr	r3, [r3, #24]
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	0003021c 	.word	0x0003021c

000d52ac <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <vsnprintf+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	0003021c 	.word	0x0003021c

000d52bc <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <_malloc_r+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	0003021c 	.word	0x0003021c

000d52cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d52cc:	2200      	movs	r2, #0
   d52ce:	4611      	mov	r1, r2
   d52d0:	6840      	ldr	r0, [r0, #4]
   d52d2:	f7ff bf7b 	b.w	d51cc <network_listening>

000d52d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d52d6:	2200      	movs	r2, #0
   d52d8:	4611      	mov	r1, r2
   d52da:	6840      	ldr	r0, [r0, #4]
   d52dc:	f7ff bf86 	b.w	d51ec <network_get_listen_timeout>

000d52e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d52e0:	2200      	movs	r2, #0
   d52e2:	6840      	ldr	r0, [r0, #4]
   d52e4:	f7ff bf7a 	b.w	d51dc <network_set_listen_timeout>

000d52e8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d52e8:	2200      	movs	r2, #0
   d52ea:	f081 0101 	eor.w	r1, r1, #1
   d52ee:	6840      	ldr	r0, [r0, #4]
   d52f0:	f7ff bf64 	b.w	d51bc <network_listen>

000d52f4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d52f4:	2300      	movs	r3, #0
   d52f6:	461a      	mov	r2, r3
   d52f8:	4619      	mov	r1, r3
   d52fa:	6840      	ldr	r0, [r0, #4]
   d52fc:	f7ff bf56 	b.w	d51ac <network_off>

000d5300 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5300:	2300      	movs	r3, #0
   d5302:	461a      	mov	r2, r3
   d5304:	4619      	mov	r1, r3
   d5306:	6840      	ldr	r0, [r0, #4]
   d5308:	f7ff bf48 	b.w	d519c <network_on>

000d530c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d530c:	2200      	movs	r2, #0
   d530e:	4611      	mov	r1, r2
   d5310:	6840      	ldr	r0, [r0, #4]
   d5312:	f7ff bf3b 	b.w	d518c <network_ready>

000d5316 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5316:	2200      	movs	r2, #0
   d5318:	4611      	mov	r1, r2
   d531a:	6840      	ldr	r0, [r0, #4]
   d531c:	f7ff bf26 	b.w	d516c <network_connecting>

000d5320 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5320:	2200      	movs	r2, #0
   d5322:	2102      	movs	r1, #2
   d5324:	6840      	ldr	r0, [r0, #4]
   d5326:	f7ff bf29 	b.w	d517c <network_disconnect>

000d532a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d532a:	2300      	movs	r3, #0
   d532c:	461a      	mov	r2, r3
   d532e:	6840      	ldr	r0, [r0, #4]
   d5330:	f7ff bf14 	b.w	d515c <network_connect>

000d5334 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5334:	4b02      	ldr	r3, [pc, #8]	; (d5340 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5336:	2203      	movs	r2, #3
   d5338:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d533a:	4a02      	ldr	r2, [pc, #8]	; (d5344 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d533c:	601a      	str	r2, [r3, #0]
   d533e:	4770      	bx	lr
   d5340:	2003e3a0 	.word	0x2003e3a0
   d5344:	000d7534 	.word	0x000d7534

000d5348 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5348:	4770      	bx	lr

000d534a <_ZN8SPIClassD0Ev>:
   d534a:	b510      	push	{r4, lr}
   d534c:	4604      	mov	r4, r0
   d534e:	f7fe fea2 	bl	d4096 <_ZdlPv>
   d5352:	4620      	mov	r0, r4
   d5354:	bd10      	pop	{r4, pc}
	...

000d5358 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5358:	b570      	push	{r4, r5, r6, lr}
   d535a:	4b08      	ldr	r3, [pc, #32]	; (d537c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d535c:	6003      	str	r3, [r0, #0]
   d535e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5360:	2500      	movs	r5, #0
   d5362:	460e      	mov	r6, r1
   d5364:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5368:	f7ff fdd4 	bl	d4f14 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d536c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d536e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5370:	f7ff fd78 	bl	d4e64 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5374:	60a5      	str	r5, [r4, #8]
}
   d5376:	4620      	mov	r0, r4
   d5378:	bd70      	pop	{r4, r5, r6, pc}
   d537a:	bf00      	nop
   d537c:	000d7568 	.word	0x000d7568

000d5380 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5380:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5384:	7900      	ldrb	r0, [r0, #4]
   d5386:	f7ff bd45 	b.w	d4e14 <HAL_SPI_Begin>

000d538a <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d538a:	7900      	ldrb	r0, [r0, #4]
   d538c:	f7ff bd4a 	b.w	d4e24 <HAL_SPI_Set_Bit_Order>

000d5390 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
   d5390:	7900      	ldrb	r0, [r0, #4]
   d5392:	f7ff bd4f 	b.w	d4e34 <HAL_SPI_Set_Data_Mode>
	...

000d5398 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d5398:	4a05      	ldr	r2, [pc, #20]	; (d53b0 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
   d539a:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d539c:	5c99      	ldrb	r1, [r3, r2]
   d539e:	4281      	cmp	r1, r0
   d53a0:	d002      	beq.n	d53a8 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
   d53a2:	3301      	adds	r3, #1
   d53a4:	2b08      	cmp	r3, #8
   d53a6:	d1f9      	bne.n	d539c <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
   d53a8:	1c58      	adds	r0, r3, #1
}
   d53aa:	b2c0      	uxtb	r0, r0
   d53ac:	4770      	bx	lr
   d53ae:	bf00      	nop
   d53b0:	000d7570 	.word	0x000d7570

000d53b4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d53b4:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d53b6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d53b8:	6018      	str	r0, [r3, #0]
   d53ba:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d53bc:	6818      	ldr	r0, [r3, #0]
   d53be:	4288      	cmp	r0, r1
   d53c0:	b2e5      	uxtb	r5, r4
   d53c2:	d906      	bls.n	d53d2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d53c4:	3401      	adds	r4, #1
   d53c6:	2c08      	cmp	r4, #8
   d53c8:	d002      	beq.n	d53d0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d53ca:	0840      	lsrs	r0, r0, #1
   d53cc:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d53ce:	e7f5      	b.n	d53bc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d53d0:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d53d2:	4b02      	ldr	r3, [pc, #8]	; (d53dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d53d4:	5d5b      	ldrb	r3, [r3, r5]
   d53d6:	7013      	strb	r3, [r2, #0]
   d53d8:	bd30      	pop	{r4, r5, pc}
   d53da:	bf00      	nop
   d53dc:	000d7570 	.word	0x000d7570

000d53e0 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d53e0:	b570      	push	{r4, r5, r6, lr}
   d53e2:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
   d53e4:	7906      	ldrb	r6, [r0, #4]
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
   d53e6:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d53ea:	4604      	mov	r4, r0
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d53ec:	2214      	movs	r2, #20
   d53ee:	2100      	movs	r1, #0
   d53f0:	a803      	add	r0, sp, #12
   d53f2:	f001 f966 	bl	d66c2 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d53f6:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d53f8:	a903      	add	r1, sp, #12
   d53fa:	4630      	mov	r0, r6
   d53fc:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d53fe:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
   d5402:	f7ff fd3f 	bl	d4e84 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
   d5406:	ab02      	add	r3, sp, #8
   d5408:	f10d 0207 	add.w	r2, sp, #7
   d540c:	4629      	mov	r1, r5
   d540e:	9804      	ldr	r0, [sp, #16]
   d5410:	f7ff ffd0 	bl	d53b4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5414:	7920      	ldrb	r0, [r4, #4]
   d5416:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d541a:	f7ff fd13 	bl	d4e44 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
   d541e:	9802      	ldr	r0, [sp, #8]
   d5420:	b008      	add	sp, #32
   d5422:	bd70      	pop	{r4, r5, r6, pc}

000d5424 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5424:	b538      	push	{r3, r4, r5, lr}
   d5426:	4604      	mov	r4, r0
   d5428:	4608      	mov	r0, r1
    if (dividerReference)
   d542a:	68a5      	ldr	r5, [r4, #8]
   d542c:	b14d      	cbz	r5, d5442 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
   d542e:	f7ff ffb3 	bl	d5398 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d5432:	2201      	movs	r2, #1
   d5434:	fa25 f100 	lsr.w	r1, r5, r0
   d5438:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
   d543a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d543e:	f7ff bfcf 	b.w	d53e0 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5442:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5448:	f7ff bcfc 	b.w	d4e44 <HAL_SPI_Set_Clock_Divider>

000d544c <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d544c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d544e:	7900      	ldrb	r0, [r0, #4]
   d5450:	f7ff fd00 	bl	d4e54 <HAL_SPI_Send_Receive_Data>
}
   d5454:	b2c0      	uxtb	r0, r0
   d5456:	bd08      	pop	{r3, pc}

000d5458 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5458:	7900      	ldrb	r0, [r0, #4]
   d545a:	f7ff bd0b 	b.w	d4e74 <HAL_SPI_Is_Enabled>
	...

000d5460 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5460:	4b04      	ldr	r3, [pc, #16]	; (d5474 <_GLOBAL__sub_I_System+0x14>)
   d5462:	2000      	movs	r0, #0
   d5464:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5468:	7018      	strb	r0, [r3, #0]
   d546a:	8058      	strh	r0, [r3, #2]
   d546c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d546e:	f7ff be49 	b.w	d5104 <set_system_mode>
   d5472:	bf00      	nop
   d5474:	2003e3a8 	.word	0x2003e3a8

000d5478 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5478:	b510      	push	{r4, lr}
   d547a:	4604      	mov	r4, r0
{
	free(buffer);
   d547c:	6800      	ldr	r0, [r0, #0]
   d547e:	f7ff fef5 	bl	d526c <free>
}
   d5482:	4620      	mov	r0, r4
   d5484:	bd10      	pop	{r4, pc}

000d5486 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5486:	b510      	push	{r4, lr}
   d5488:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d548a:	6800      	ldr	r0, [r0, #0]
   d548c:	b108      	cbz	r0, d5492 <_ZN6String10invalidateEv+0xc>
   d548e:	f7ff feed 	bl	d526c <free>
	buffer = NULL;
   d5492:	2300      	movs	r3, #0
   d5494:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5496:	60a3      	str	r3, [r4, #8]
   d5498:	6063      	str	r3, [r4, #4]
   d549a:	bd10      	pop	{r4, pc}

000d549c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d549c:	b538      	push	{r3, r4, r5, lr}
   d549e:	4604      	mov	r4, r0
   d54a0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d54a2:	6800      	ldr	r0, [r0, #0]
   d54a4:	3101      	adds	r1, #1
   d54a6:	f7ff fee9 	bl	d527c <realloc>
	if (newbuffer) {
   d54aa:	b110      	cbz	r0, d54b2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d54ac:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d54b0:	2001      	movs	r0, #1
	}
	return 0;
}
   d54b2:	bd38      	pop	{r3, r4, r5, pc}

000d54b4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d54b4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d54b6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d54b8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d54ba:	b113      	cbz	r3, d54c2 <_ZN6String7reserveEj+0xe>
   d54bc:	6843      	ldr	r3, [r0, #4]
   d54be:	428b      	cmp	r3, r1
   d54c0:	d207      	bcs.n	d54d2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d54c2:	4620      	mov	r0, r4
   d54c4:	f7ff ffea 	bl	d549c <_ZN6String12changeBufferEj>
   d54c8:	b120      	cbz	r0, d54d4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d54ca:	68a3      	ldr	r3, [r4, #8]
   d54cc:	b90b      	cbnz	r3, d54d2 <_ZN6String7reserveEj+0x1e>
   d54ce:	6822      	ldr	r2, [r4, #0]
   d54d0:	7013      	strb	r3, [r2, #0]
   d54d2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d54d4:	bd10      	pop	{r4, pc}

000d54d6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d54d6:	b570      	push	{r4, r5, r6, lr}
   d54d8:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d54da:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d54dc:	4604      	mov	r4, r0
   d54de:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d54e0:	f7ff ffe8 	bl	d54b4 <_ZN6String7reserveEj>
   d54e4:	b918      	cbnz	r0, d54ee <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d54e6:	4620      	mov	r0, r4
   d54e8:	f7ff ffcd 	bl	d5486 <_ZN6String10invalidateEv>
		return *this;
   d54ec:	e009      	b.n	d5502 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d54ee:	462a      	mov	r2, r5
   d54f0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d54f2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d54f4:	6820      	ldr	r0, [r4, #0]
   d54f6:	f001 f8d9 	bl	d66ac <memcpy>
	buffer[len] = 0;
   d54fa:	6822      	ldr	r2, [r4, #0]
   d54fc:	68a3      	ldr	r3, [r4, #8]
   d54fe:	2100      	movs	r1, #0
   d5500:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5502:	4620      	mov	r0, r4
   d5504:	bd70      	pop	{r4, r5, r6, pc}

000d5506 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5506:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5508:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d550a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d550c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d550e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5510:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5512:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5514:	460d      	mov	r5, r1
   d5516:	b139      	cbz	r1, d5528 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5518:	4608      	mov	r0, r1
   d551a:	f001 f94f 	bl	d67bc <strlen>
   d551e:	4629      	mov	r1, r5
   d5520:	4602      	mov	r2, r0
   d5522:	4620      	mov	r0, r4
   d5524:	f7ff ffd7 	bl	d54d6 <_ZN6String4copyEPKcj>
}
   d5528:	4620      	mov	r0, r4
   d552a:	bd38      	pop	{r3, r4, r5, pc}

000d552c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d552c:	b538      	push	{r3, r4, r5, lr}
   d552e:	4605      	mov	r5, r0
	if (buffer) {
   d5530:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5532:	460c      	mov	r4, r1
	if (buffer) {
   d5534:	b160      	cbz	r0, d5550 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d5536:	686a      	ldr	r2, [r5, #4]
   d5538:	688b      	ldr	r3, [r1, #8]
   d553a:	429a      	cmp	r2, r3
   d553c:	d306      	bcc.n	d554c <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d553e:	6809      	ldr	r1, [r1, #0]
   d5540:	f001 f934 	bl	d67ac <strcpy>
			len = rhs.len;
   d5544:	68a3      	ldr	r3, [r4, #8]
   d5546:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5548:	2300      	movs	r3, #0
   d554a:	e00a      	b.n	d5562 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d554c:	f7ff fe8e 	bl	d526c <free>
		}
	}
	buffer = rhs.buffer;
   d5550:	6823      	ldr	r3, [r4, #0]
   d5552:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5554:	6863      	ldr	r3, [r4, #4]
   d5556:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5558:	68a3      	ldr	r3, [r4, #8]
   d555a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d555c:	2300      	movs	r3, #0
   d555e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d5560:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d5562:	60a3      	str	r3, [r4, #8]
   d5564:	bd38      	pop	{r3, r4, r5, pc}

000d5566 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5566:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d5568:	b510      	push	{r4, lr}
   d556a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d556c:	d001      	beq.n	d5572 <_ZN6StringaSEOS_+0xc>
   d556e:	f7ff ffdd 	bl	d552c <_ZN6String4moveERS_>
	return *this;
}
   d5572:	4620      	mov	r0, r4
   d5574:	bd10      	pop	{r4, pc}

000d5576 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5576:	b538      	push	{r3, r4, r5, lr}
   d5578:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d557a:	460c      	mov	r4, r1
   d557c:	b141      	cbz	r1, d5590 <_ZN6StringaSEPKc+0x1a>
   d557e:	4608      	mov	r0, r1
   d5580:	f001 f91c 	bl	d67bc <strlen>
   d5584:	4621      	mov	r1, r4
   d5586:	4602      	mov	r2, r0
   d5588:	4628      	mov	r0, r5
   d558a:	f7ff ffa4 	bl	d54d6 <_ZN6String4copyEPKcj>
   d558e:	e001      	b.n	d5594 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5590:	f7ff ff79 	bl	d5486 <_ZN6String10invalidateEv>

	return *this;
}
   d5594:	4628      	mov	r0, r5
   d5596:	bd38      	pop	{r3, r4, r5, pc}

000d5598 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d5598:	b570      	push	{r4, r5, r6, lr}
   d559a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d559c:	b19a      	cbz	r2, d55c6 <_ZNK6String8getBytesEPhjj+0x2e>
   d559e:	b191      	cbz	r1, d55c6 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d55a0:	6885      	ldr	r5, [r0, #8]
   d55a2:	429d      	cmp	r5, r3
   d55a4:	d802      	bhi.n	d55ac <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d55a6:	2300      	movs	r3, #0
   d55a8:	700b      	strb	r3, [r1, #0]
		return;
   d55aa:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d55ac:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d55ae:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d55b0:	6801      	ldr	r1, [r0, #0]
   d55b2:	42ac      	cmp	r4, r5
   d55b4:	bf28      	it	cs
   d55b6:	462c      	movcs	r4, r5
   d55b8:	4419      	add	r1, r3
   d55ba:	4622      	mov	r2, r4
   d55bc:	4630      	mov	r0, r6
   d55be:	f001 f91a 	bl	d67f6 <strncpy>
	buf[n] = 0;
   d55c2:	2300      	movs	r3, #0
   d55c4:	5533      	strb	r3, [r6, r4]
   d55c6:	bd70      	pop	{r4, r5, r6, pc}

000d55c8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d55c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   d55cc:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d55ce:	460e      	mov	r6, r1
   d55d0:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d55d2:	4910      	ldr	r1, [pc, #64]	; (d5614 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d55d4:	bf88      	it	hi
   d55d6:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d55d8:	4615      	mov	r5, r2
   d55da:	4607      	mov	r7, r0
	if (left > right) {
   d55dc:	bf84      	itt	hi
   d55de:	4625      	movhi	r5, r4
   d55e0:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d55e2:	f7ff ff90 	bl	d5506 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d55e6:	68b1      	ldr	r1, [r6, #8]
   d55e8:	428d      	cmp	r5, r1
   d55ea:	d80f      	bhi.n	d560c <_ZNK6String9substringEjj+0x44>
   d55ec:	428c      	cmp	r4, r1
   d55ee:	bf28      	it	cs
   d55f0:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d55f2:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   d55f4:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d55f6:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   d55fa:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   d55fc:	6831      	ldr	r1, [r6, #0]
   d55fe:	4638      	mov	r0, r7
   d5600:	4429      	add	r1, r5
   d5602:	f7ff ffb8 	bl	d5576 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   d5606:	6833      	ldr	r3, [r6, #0]
   d5608:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   d560c:	4638      	mov	r0, r7
   d560e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5612:	bf00      	nop
   d5614:	000d758e 	.word	0x000d758e

000d5618 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d561a:	4606      	mov	r6, r0
   d561c:	460d      	mov	r5, r1
   d561e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5620:	2400      	movs	r4, #0
  while (size--) {
   d5622:	42bd      	cmp	r5, r7
   d5624:	d00c      	beq.n	d5640 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5626:	6833      	ldr	r3, [r6, #0]
   d5628:	f815 1b01 	ldrb.w	r1, [r5], #1
   d562c:	689b      	ldr	r3, [r3, #8]
   d562e:	4630      	mov	r0, r6
   d5630:	4798      	blx	r3
     if (chunk>=0)
   d5632:	2800      	cmp	r0, #0
   d5634:	db01      	blt.n	d563a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5636:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5638:	e7f3      	b.n	d5622 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d563a:	2c00      	cmp	r4, #0
   d563c:	bf08      	it	eq
   d563e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5640:	4620      	mov	r0, r4
   d5642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5644 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5644:	b570      	push	{r4, r5, r6, lr}
   d5646:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5648:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d564a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d564c:	b149      	cbz	r1, d5662 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d564e:	f001 f8b5 	bl	d67bc <strlen>
   d5652:	682b      	ldr	r3, [r5, #0]
   d5654:	4602      	mov	r2, r0
   d5656:	4621      	mov	r1, r4
   d5658:	4628      	mov	r0, r5
   d565a:	68db      	ldr	r3, [r3, #12]
    }
   d565c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5660:	4718      	bx	r3
    }
   d5662:	bd70      	pop	{r4, r5, r6, pc}

000d5664 <_ZN5Print5printEPKc>:
   d5664:	b508      	push	{r3, lr}
   d5666:	f7ff ffed 	bl	d5644 <_ZN5Print5writeEPKc>
   d566a:	bd08      	pop	{r3, pc}

000d566c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d566c:	6803      	ldr	r3, [r0, #0]
   d566e:	689b      	ldr	r3, [r3, #8]
   d5670:	4718      	bx	r3

000d5672 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5672:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5674:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5676:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5678:	f7ff fff8 	bl	d566c <_ZN5Print5printEc>
  n += print('\n');
   d567c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d567e:	4604      	mov	r4, r0
  n += print('\n');
   d5680:	4628      	mov	r0, r5
   d5682:	f7ff fff3 	bl	d566c <_ZN5Print5printEc>
  return n;
}
   d5686:	4420      	add	r0, r4
   d5688:	bd38      	pop	{r3, r4, r5, pc}

000d568a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d568a:	b538      	push	{r3, r4, r5, lr}
   d568c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d568e:	f7ff ffd9 	bl	d5644 <_ZN5Print5writeEPKc>
   d5692:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5694:	4628      	mov	r0, r5
   d5696:	f7ff ffec 	bl	d5672 <_ZN5Print7printlnEv>
  return n;
}
   d569a:	4420      	add	r0, r4
   d569c:	bd38      	pop	{r3, r4, r5, pc}

000d569e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d569e:	b530      	push	{r4, r5, lr}
   d56a0:	b08b      	sub	sp, #44	; 0x2c
   d56a2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d56a4:	2100      	movs	r1, #0
   d56a6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d56aa:	2a01      	cmp	r2, #1
   d56ac:	bf98      	it	ls
   d56ae:	220a      	movls	r2, #10
   d56b0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d56b4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d56b8:	fb05 3312 	mls	r3, r5, r2, r3
   d56bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d56c0:	2b09      	cmp	r3, #9
   d56c2:	bf94      	ite	ls
   d56c4:	3330      	addls	r3, #48	; 0x30
   d56c6:	3337      	addhi	r3, #55	; 0x37
   d56c8:	b2db      	uxtb	r3, r3
   d56ca:	4621      	mov	r1, r4
   d56cc:	f804 3901 	strb.w	r3, [r4], #-1
   d56d0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d56d2:	2d00      	cmp	r5, #0
   d56d4:	d1ee      	bne.n	d56b4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d56d6:	f7ff ffb5 	bl	d5644 <_ZN5Print5writeEPKc>
}
   d56da:	b00b      	add	sp, #44	; 0x2c
   d56dc:	bd30      	pop	{r4, r5, pc}

000d56de <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d56de:	b410      	push	{r4}
  if (base == 0) return write(n);
   d56e0:	b92a      	cbnz	r2, d56ee <_ZN5Print5printEmi+0x10>
   d56e2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d56e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d56e8:	689b      	ldr	r3, [r3, #8]
   d56ea:	b2c9      	uxtb	r1, r1
   d56ec:	4718      	bx	r3
  else return printNumber(n, base);
   d56ee:	b2d2      	uxtb	r2, r2
}
   d56f0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d56f4:	f7ff bfd3 	b.w	d569e <_ZN5Print11printNumberEmh>

000d56f8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d56f8:	f7ff bff1 	b.w	d56de <_ZN5Print5printEmi>

000d56fc <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d56fc:	b40c      	push	{r2, r3}
   d56fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5702:	b087      	sub	sp, #28
   d5704:	af00      	add	r7, sp, #0
   d5706:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d570a:	4605      	mov	r5, r0
   d570c:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5710:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5712:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5714:	4623      	mov	r3, r4
   d5716:	464a      	mov	r2, r9
   d5718:	2114      	movs	r1, #20
   d571a:	1d38      	adds	r0, r7, #4
   d571c:	f7ff fdc6 	bl	d52ac <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5720:	2813      	cmp	r0, #19
   d5722:	d805      	bhi.n	d5730 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5724:	1d39      	adds	r1, r7, #4
   d5726:	4628      	mov	r0, r5
   d5728:	f7ff ff8c 	bl	d5644 <_ZN5Print5writeEPKc>
   d572c:	4604      	mov	r4, r0
   d572e:	e013      	b.n	d5758 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5730:	f100 0308 	add.w	r3, r0, #8
   d5734:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5738:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d573a:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d573e:	1c41      	adds	r1, r0, #1
   d5740:	4623      	mov	r3, r4
   d5742:	464a      	mov	r2, r9
   d5744:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5746:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5748:	f7ff fdb0 	bl	d52ac <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d574c:	4669      	mov	r1, sp
   d574e:	4628      	mov	r0, r5
   d5750:	f7ff ff78 	bl	d5644 <_ZN5Print5writeEPKc>
   d5754:	4604      	mov	r4, r0
   d5756:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5758:	b11e      	cbz	r6, d5762 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d575a:	4628      	mov	r0, r5
   d575c:	f7ff ff89 	bl	d5672 <_ZN5Print7printlnEv>
   d5760:	4404      	add	r4, r0
    return n;
}
   d5762:	4620      	mov	r0, r4
   d5764:	371c      	adds	r7, #28
   d5766:	46bd      	mov	sp, r7
   d5768:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d576c:	b002      	add	sp, #8
   d576e:	4770      	bx	lr

000d5770 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5770:	4b01      	ldr	r3, [pc, #4]	; (d5778 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5772:	4a02      	ldr	r2, [pc, #8]	; (d577c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5774:	601a      	str	r2, [r3, #0]
   d5776:	4770      	bx	lr
   d5778:	2003e3b0 	.word	0x2003e3b0
   d577c:	000d7630 	.word	0x000d7630

000d5780 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d5780:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5782:	2000      	movs	r0, #0
   d5784:	f7ff fd52 	bl	d522c <spark_sync_time_pending>
   d5788:	b128      	cbz	r0, d5796 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d578a:	f7ff fd3f 	bl	d520c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d578e:	f080 0001 	eor.w	r0, r0, #1
   d5792:	b2c0      	uxtb	r0, r0
   d5794:	bd08      	pop	{r3, pc}
   d5796:	2001      	movs	r0, #1
    }
   d5798:	bd08      	pop	{r3, pc}
	...

000d579c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d579c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d57a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d57a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d57a8:	d40f      	bmi.n	d57ca <_ZN9TimeClass4zoneEf+0x2e>
   d57aa:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d57ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d57b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d57b6:	dc08      	bgt.n	d57ca <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d57b8:	eddf 7a04 	vldr	s15, [pc, #16]	; d57cc <_ZN9TimeClass4zoneEf+0x30>
   d57bc:	4b04      	ldr	r3, [pc, #16]	; (d57d0 <_ZN9TimeClass4zoneEf+0x34>)
   d57be:	ee20 0a27 	vmul.f32	s0, s0, s15
   d57c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d57c6:	ed83 0a00 	vstr	s0, [r3]
   d57ca:	4770      	bx	lr
   d57cc:	45610000 	.word	0x45610000
   d57d0:	2003e3bc 	.word	0x2003e3bc

000d57d4 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d57d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d57d6:	4b0e      	ldr	r3, [pc, #56]	; (d5810 <_ZN9TimeClass7timeStrEl+0x3c>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	4419      	add	r1, r3
   d57dc:	4b0d      	ldr	r3, [pc, #52]	; (d5814 <_ZN9TimeClass7timeStrEl+0x40>)
   d57de:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d57e0:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d57e2:	a802      	add	r0, sp, #8
   d57e4:	4419      	add	r1, r3
   d57e6:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d57ea:	f000 fe67 	bl	d64bc <localtime>
        char* ascstr = asctime(calendar_time);
   d57ee:	f000 fe1b 	bl	d6428 <asctime>
   d57f2:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d57f4:	f000 ffe2 	bl	d67bc <strlen>
        ascstr[len-1] = 0; // remove final newline
   d57f8:	4428      	add	r0, r5
   d57fa:	2300      	movs	r3, #0
   d57fc:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d5800:	4629      	mov	r1, r5
   d5802:	4620      	mov	r0, r4
   d5804:	f7ff fe7f 	bl	d5506 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d5808:	4620      	mov	r0, r4
   d580a:	b003      	add	sp, #12
   d580c:	bd30      	pop	{r4, r5, pc}
   d580e:	bf00      	nop
   d5810:	2003e3bc 	.word	0x2003e3bc
   d5814:	2003e3b8 	.word	0x2003e3b8

000d5818 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5818:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d581a:	2000      	movs	r0, #0
   d581c:	f7ff fb5a 	bl	d4ed4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5820:	4604      	mov	r4, r0
   d5822:	b968      	cbnz	r0, d5840 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5824:	f7ff fc66 	bl	d50f4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5828:	2801      	cmp	r0, #1
   d582a:	d10b      	bne.n	d5844 <_ZN9TimeClass7isValidEv+0x2c>
   d582c:	4620      	mov	r0, r4
   d582e:	f7ff fc79 	bl	d5124 <system_thread_get_state>
   d5832:	b938      	cbnz	r0, d5844 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d5834:	f7ff ffa4 	bl	d5780 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5838:	b930      	cbnz	r0, d5848 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d583a:	f7ff fcdf 	bl	d51fc <spark_process>
   d583e:	e7f9      	b.n	d5834 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5840:	2001      	movs	r0, #1
   d5842:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5844:	2000      	movs	r0, #0
   d5846:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5848:	f7ff ff9a 	bl	d5780 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d584c:	2000      	movs	r0, #0
   d584e:	f7ff fb41 	bl	d4ed4 <HAL_RTC_Time_Is_Valid>
   d5852:	3000      	adds	r0, #0
   d5854:	bf18      	it	ne
   d5856:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5858:	bd10      	pop	{r4, pc}

000d585a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d585a:	b508      	push	{r3, lr}
    (void)isValid();
   d585c:	f7ff ffdc 	bl	d5818 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5864:	f7ff bb2e 	b.w	d4ec4 <HAL_RTC_Get_UnixTime>

000d5868 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5868:	4b02      	ldr	r3, [pc, #8]	; (d5874 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d586a:	681a      	ldr	r2, [r3, #0]
   d586c:	4b02      	ldr	r3, [pc, #8]	; (d5878 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d586e:	601a      	str	r2, [r3, #0]
   d5870:	4770      	bx	lr
   d5872:	bf00      	nop
   d5874:	2003e2c0 	.word	0x2003e2c0
   d5878:	2003e3b4 	.word	0x2003e3b4

000d587c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d587c:	2100      	movs	r1, #0
   d587e:	f7ff bc49 	b.w	d5114 <system_delay_ms>

000d5882 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5882:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5884:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5886:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5888:	b113      	cbz	r3, d5890 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d588a:	2203      	movs	r2, #3
   d588c:	4601      	mov	r1, r0
   d588e:	4798      	blx	r3
    }
   d5890:	4620      	mov	r0, r4
   d5892:	bd10      	pop	{r4, pc}

000d5894 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5894:	b510      	push	{r4, lr}
   d5896:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5898:	f7ff fff3 	bl	d5882 <_ZNSt14_Function_baseD1Ev>
   d589c:	4620      	mov	r0, r4
   d589e:	bd10      	pop	{r4, pc}

000d58a0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d58a0:	4803      	ldr	r0, [pc, #12]	; (d58b0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d58a2:	4a04      	ldr	r2, [pc, #16]	; (d58b4 <_GLOBAL__sub_I_RGB+0x14>)
   d58a4:	4904      	ldr	r1, [pc, #16]	; (d58b8 <_GLOBAL__sub_I_RGB+0x18>)
   d58a6:	2300      	movs	r3, #0
   d58a8:	6083      	str	r3, [r0, #8]
   d58aa:	f000 bc6f 	b.w	d618c <__aeabi_atexit>
   d58ae:	bf00      	nop
   d58b0:	2003e3c0 	.word	0x2003e3c0
   d58b4:	2003e378 	.word	0x2003e378
   d58b8:	000d5895 	.word	0x000d5895

000d58bc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d58bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d58be:	4b0c      	ldr	r3, [pc, #48]	; (d58f0 <serialEventRun+0x34>)
   d58c0:	b133      	cbz	r3, d58d0 <serialEventRun+0x14>
   d58c2:	f000 f927 	bl	d5b14 <_Z16_fetch_usbserialv>
   d58c6:	6803      	ldr	r3, [r0, #0]
   d58c8:	691b      	ldr	r3, [r3, #16]
   d58ca:	4798      	blx	r3
   d58cc:	2800      	cmp	r0, #0
   d58ce:	dc09      	bgt.n	d58e4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d58d0:	4b08      	ldr	r3, [pc, #32]	; (d58f4 <serialEventRun+0x38>)
   d58d2:	b163      	cbz	r3, d58ee <serialEventRun+0x32>
   d58d4:	f000 f988 	bl	d5be8 <_Z22__fetch_global_Serial1v>
   d58d8:	6803      	ldr	r3, [r0, #0]
   d58da:	691b      	ldr	r3, [r3, #16]
   d58dc:	4798      	blx	r3
   d58de:	2800      	cmp	r0, #0
   d58e0:	dc03      	bgt.n	d58ea <serialEventRun+0x2e>
   d58e2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d58e4:	f3af 8000 	nop.w
   d58e8:	e7f2      	b.n	d58d0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d58ea:	f3af 8000 	nop.w
   d58ee:	bd08      	pop	{r3, pc}
	...

000d58f8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d58f8:	b508      	push	{r3, lr}
	serialEventRun();
   d58fa:	f7ff ffdf 	bl	d58bc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d58fe:	f7ff fad9 	bl	d4eb4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5902:	4b01      	ldr	r3, [pc, #4]	; (d5908 <_post_loop+0x10>)
   d5904:	6018      	str	r0, [r3, #0]
   d5906:	bd08      	pop	{r3, pc}
   d5908:	2003e70c 	.word	0x2003e70c

000d590c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d590c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d590e:	2300      	movs	r3, #0
   d5910:	9300      	str	r3, [sp, #0]
   d5912:	461a      	mov	r2, r3
   d5914:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5918:	f7ff fc16 	bl	d5148 <system_ctrl_set_result>
}
   d591c:	b003      	add	sp, #12
   d591e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5924 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5924:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5926:	8843      	ldrh	r3, [r0, #2]
   d5928:	2b0a      	cmp	r3, #10
   d592a:	d008      	beq.n	d593e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d592c:	2b50      	cmp	r3, #80	; 0x50
   d592e:	d109      	bne.n	d5944 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5930:	4b09      	ldr	r3, [pc, #36]	; (d5958 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5932:	681b      	ldr	r3, [r3, #0]
   d5934:	b13b      	cbz	r3, d5946 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5936:	b003      	add	sp, #12
   d5938:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d593c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d593e:	f7ff ffe5 	bl	d590c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5942:	e006      	b.n	d5952 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5944:	2300      	movs	r3, #0
   d5946:	9300      	str	r3, [sp, #0]
   d5948:	461a      	mov	r2, r3
   d594a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d594e:	f7ff fbfb 	bl	d5148 <system_ctrl_set_result>
        break;
    }
}
   d5952:	b003      	add	sp, #12
   d5954:	f85d fb04 	ldr.w	pc, [sp], #4
   d5958:	2003e3d0 	.word	0x2003e3d0

000d595c <module_user_init_hook>:

void module_user_init_hook()
{
   d595c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d595e:	f7ff fa99 	bl	d4e94 <HAL_RNG_GetRandomNumber>
   d5962:	4604      	mov	r4, r0
    srand(seed);
   d5964:	f000 feb6 	bl	d66d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5968:	4b07      	ldr	r3, [pc, #28]	; (d5988 <module_user_init_hook+0x2c>)
   d596a:	b113      	cbz	r3, d5972 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d596c:	4620      	mov	r0, r4
   d596e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5972:	2100      	movs	r1, #0
   d5974:	4804      	ldr	r0, [pc, #16]	; (d5988 <module_user_init_hook+0x2c>)
   d5976:	f7ff fc69 	bl	d524c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d597a:	2100      	movs	r1, #0
   d597c:	4803      	ldr	r0, [pc, #12]	; (d598c <module_user_init_hook+0x30>)
}
   d597e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5982:	f7ff bbd7 	b.w	d5134 <system_ctrl_set_app_request_handler>
   d5986:	bf00      	nop
   d5988:	00000000 	.word	0x00000000
   d598c:	000d5925 	.word	0x000d5925

000d5990 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5990:	4770      	bx	lr

000d5992 <_ZN9IPAddressD0Ev>:
   d5992:	b510      	push	{r4, lr}
   d5994:	4604      	mov	r4, r0
   d5996:	f7fe fb7e 	bl	d4096 <_ZdlPv>
   d599a:	4620      	mov	r0, r4
   d599c:	bd10      	pop	{r4, pc}

000d599e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d599e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d59a0:	7d03      	ldrb	r3, [r0, #20]
   d59a2:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d59a4:	b08d      	sub	sp, #52	; 0x34
   d59a6:	460e      	mov	r6, r1
   d59a8:	f100 0704 	add.w	r7, r0, #4
   d59ac:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d59b0:	d002      	beq.n	d59b8 <_ZNK9IPAddress7printToER5Print+0x1a>
   d59b2:	f100 0508 	add.w	r5, r0, #8
   d59b6:	e018      	b.n	d59ea <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d59b8:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d59ba:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d59bc:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d59c0:	232f      	movs	r3, #47	; 0x2f
   d59c2:	462a      	mov	r2, r5
   d59c4:	200a      	movs	r0, #10
   d59c6:	f7ff fab5 	bl	d4f34 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d59ca:	4628      	mov	r0, r5
   d59cc:	f000 fef6 	bl	d67bc <strlen>
   d59d0:	6833      	ldr	r3, [r6, #0]
   d59d2:	4602      	mov	r2, r0
   d59d4:	68db      	ldr	r3, [r3, #12]
   d59d6:	4629      	mov	r1, r5
   d59d8:	4630      	mov	r0, r6
   d59da:	4798      	blx	r3
   d59dc:	e00f      	b.n	d59fe <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d59de:	b124      	cbz	r4, d59ea <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d59e0:	212e      	movs	r1, #46	; 0x2e
   d59e2:	4630      	mov	r0, r6
   d59e4:	f7ff fe42 	bl	d566c <_ZN5Print5printEc>
   d59e8:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d59ea:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d59ee:	220a      	movs	r2, #10
   d59f0:	4630      	mov	r0, r6
   d59f2:	f7ff fe81 	bl	d56f8 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d59f6:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d59f8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d59fa:	d1f0      	bne.n	d59de <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d59fc:	4620      	mov	r0, r4
    }
    return n;
}
   d59fe:	b00d      	add	sp, #52	; 0x34
   d5a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5a04 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5a04:	b510      	push	{r4, lr}
   d5a06:	4b05      	ldr	r3, [pc, #20]	; (d5a1c <_ZN9IPAddressC1Ev+0x18>)
   d5a08:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5a0a:	2211      	movs	r2, #17
   d5a0c:	f840 3b04 	str.w	r3, [r0], #4
   d5a10:	2100      	movs	r1, #0
   d5a12:	f000 fe56 	bl	d66c2 <memset>
{
    clear();
}
   d5a16:	4620      	mov	r0, r4
   d5a18:	bd10      	pop	{r4, pc}
   d5a1a:	bf00      	nop
   d5a1c:	000d7688 	.word	0x000d7688

000d5a20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5a20:	4603      	mov	r3, r0
   d5a22:	4a07      	ldr	r2, [pc, #28]	; (d5a40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5a24:	b510      	push	{r4, lr}
   d5a26:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5a2a:	f101 0210 	add.w	r2, r1, #16
   d5a2e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5a32:	f843 4b04 	str.w	r4, [r3], #4
   d5a36:	4291      	cmp	r1, r2
   d5a38:	d1f9      	bne.n	d5a2e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5a3a:	780a      	ldrb	r2, [r1, #0]
   d5a3c:	701a      	strb	r2, [r3, #0]
}
   d5a3e:	bd10      	pop	{r4, pc}
   d5a40:	000d7688 	.word	0x000d7688

000d5a44 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5a44:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5a46:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5a4a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5a4e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5a52:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5a56:	2304      	movs	r3, #4
   d5a58:	6041      	str	r1, [r0, #4]
   d5a5a:	7503      	strb	r3, [r0, #20]
   d5a5c:	bd10      	pop	{r4, pc}

000d5a5e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5a5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5a60:	780d      	ldrb	r5, [r1, #0]
   d5a62:	788b      	ldrb	r3, [r1, #2]
   d5a64:	784a      	ldrb	r2, [r1, #1]
   d5a66:	78c9      	ldrb	r1, [r1, #3]
   d5a68:	9100      	str	r1, [sp, #0]
   d5a6a:	4629      	mov	r1, r5
   d5a6c:	f7ff ffea 	bl	d5a44 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5a70:	b003      	add	sp, #12
   d5a72:	bd30      	pop	{r4, r5, pc}

000d5a74 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a74:	7441      	strb	r1, [r0, #17]
   d5a76:	4770      	bx	lr

000d5a78 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5a78:	4770      	bx	lr

000d5a7a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5a7a:	2100      	movs	r1, #0
   d5a7c:	7c00      	ldrb	r0, [r0, #16]
   d5a7e:	f7ff bb11 	b.w	d50a4 <HAL_USB_USART_Receive_Data>

000d5a82 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5a82:	2101      	movs	r1, #1
   d5a84:	7c00      	ldrb	r0, [r0, #16]
   d5a86:	f7ff bb0d 	b.w	d50a4 <HAL_USB_USART_Receive_Data>

000d5a8a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5a8a:	7c00      	ldrb	r0, [r0, #16]
   d5a8c:	f7ff bb02 	b.w	d5094 <HAL_USB_USART_Available_Data_For_Write>

000d5a90 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5a90:	7c00      	ldrb	r0, [r0, #16]
   d5a92:	f7ff baf7 	b.w	d5084 <HAL_USB_USART_Available_Data>

000d5a96 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5a96:	b538      	push	{r3, r4, r5, lr}
   d5a98:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a9a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5a9c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a9e:	f7ff faf9 	bl	d5094 <HAL_USB_USART_Available_Data_For_Write>
   d5aa2:	2800      	cmp	r0, #0
   d5aa4:	dc01      	bgt.n	d5aaa <_ZN9USBSerial5writeEh+0x14>
   d5aa6:	7c60      	ldrb	r0, [r4, #17]
   d5aa8:	b120      	cbz	r0, d5ab4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5aaa:	4629      	mov	r1, r5
   d5aac:	7c20      	ldrb	r0, [r4, #16]
   d5aae:	f7ff fb01 	bl	d50b4 <HAL_USB_USART_Send_Data>
    return 1;
   d5ab2:	2001      	movs	r0, #1
  }
  return 0;
}
   d5ab4:	bd38      	pop	{r3, r4, r5, pc}

000d5ab6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5ab6:	7c00      	ldrb	r0, [r0, #16]
   d5ab8:	f7ff bb04 	b.w	d50c4 <HAL_USB_USART_Flush_Data>

000d5abc <_ZN9USBSerialD0Ev>:
   d5abc:	b510      	push	{r4, lr}
   d5abe:	4604      	mov	r4, r0
   d5ac0:	f7fe fae9 	bl	d4096 <_ZdlPv>
   d5ac4:	4620      	mov	r0, r4
   d5ac6:	bd10      	pop	{r4, pc}

000d5ac8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5ac8:	b510      	push	{r4, lr}
   d5aca:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5acc:	2300      	movs	r3, #0
   d5ace:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ad4:	60a3      	str	r3, [r4, #8]
   d5ad6:	4b05      	ldr	r3, [pc, #20]	; (d5aec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5ad8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5ada:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5adc:	4608      	mov	r0, r1
{
  _serial = serial;
   d5ade:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5ae0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5ae2:	4611      	mov	r1, r2
   d5ae4:	f7ff fabe 	bl	d5064 <HAL_USB_USART_Init>
}
   d5ae8:	4620      	mov	r0, r4
   d5aea:	bd10      	pop	{r4, pc}
   d5aec:	000d769c 	.word	0x000d769c

000d5af0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5af0:	2200      	movs	r2, #0
   d5af2:	7c00      	ldrb	r0, [r0, #16]
   d5af4:	f7ff babe 	b.w	d5074 <HAL_USB_USART_Begin>

000d5af8 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d5af8:	7c00      	ldrb	r0, [r0, #16]
   d5afa:	f7ff baeb 	b.w	d50d4 <HAL_USB_USART_Is_Enabled>

000d5afe <_ZN9USBSerialcvbEv>:
{
	return HAL_USB_USART_Receive_Data(_serial, true);
}

USBSerial::operator bool() {
  return isEnabled();
   d5afe:	f7ff bffb 	b.w	d5af8 <_ZN9USBSerial9isEnabledEv>

000d5b02 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5b02:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5b04:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5b06:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5b08:	2100      	movs	r1, #0
   d5b0a:	f000 fdda 	bl	d66c2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5b0e:	4620      	mov	r0, r4
   d5b10:	bd10      	pop	{r4, pc}
	...

000d5b14 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5b14:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5b16:	4d0e      	ldr	r5, [pc, #56]	; (d5b50 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5b18:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5b1a:	a801      	add	r0, sp, #4
   d5b1c:	f7ff fff1 	bl	d5b02 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5b20:	6829      	ldr	r1, [r5, #0]
   d5b22:	f011 0401 	ands.w	r4, r1, #1
   d5b26:	d110      	bne.n	d5b4a <_Z16_fetch_usbserialv+0x36>
   d5b28:	4628      	mov	r0, r5
   d5b2a:	f7fe fac3 	bl	d40b4 <__cxa_guard_acquire>
   d5b2e:	b160      	cbz	r0, d5b4a <_Z16_fetch_usbserialv+0x36>
   d5b30:	aa01      	add	r2, sp, #4
   d5b32:	4621      	mov	r1, r4
   d5b34:	4807      	ldr	r0, [pc, #28]	; (d5b54 <_Z16_fetch_usbserialv+0x40>)
   d5b36:	f7ff ffc7 	bl	d5ac8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5b3a:	4628      	mov	r0, r5
   d5b3c:	f7fe fabf 	bl	d40be <__cxa_guard_release>
   d5b40:	4a05      	ldr	r2, [pc, #20]	; (d5b58 <_Z16_fetch_usbserialv+0x44>)
   d5b42:	4906      	ldr	r1, [pc, #24]	; (d5b5c <_Z16_fetch_usbserialv+0x48>)
   d5b44:	4803      	ldr	r0, [pc, #12]	; (d5b54 <_Z16_fetch_usbserialv+0x40>)
   d5b46:	f000 fb21 	bl	d618c <__aeabi_atexit>
	return _usbserial;
}
   d5b4a:	4802      	ldr	r0, [pc, #8]	; (d5b54 <_Z16_fetch_usbserialv+0x40>)
   d5b4c:	b007      	add	sp, #28
   d5b4e:	bd30      	pop	{r4, r5, pc}
   d5b50:	2003e3d4 	.word	0x2003e3d4
   d5b54:	2003e3d8 	.word	0x2003e3d8
   d5b58:	2003e378 	.word	0x2003e378
   d5b5c:	000d5a79 	.word	0x000d5a79

000d5b60 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5b60:	4770      	bx	lr

000d5b62 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b62:	7441      	strb	r1, [r0, #17]
   d5b64:	4770      	bx	lr

000d5b66 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5b66:	7c00      	ldrb	r0, [r0, #16]
   d5b68:	f7ff ba24 	b.w	d4fb4 <HAL_USART_Available_Data_For_Write>

000d5b6c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5b6c:	7c00      	ldrb	r0, [r0, #16]
   d5b6e:	f7ff b9f9 	b.w	d4f64 <HAL_USART_Available_Data>

000d5b72 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5b72:	7c00      	ldrb	r0, [r0, #16]
   d5b74:	f7ff ba06 	b.w	d4f84 <HAL_USART_Peek_Data>

000d5b78 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5b78:	7c00      	ldrb	r0, [r0, #16]
   d5b7a:	f7ff b9fb 	b.w	d4f74 <HAL_USART_Read_Data>

000d5b7e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5b7e:	7c00      	ldrb	r0, [r0, #16]
   d5b80:	f7ff ba08 	b.w	d4f94 <HAL_USART_Flush_Data>

000d5b84 <_ZN11USARTSerialD0Ev>:
   d5b84:	b510      	push	{r4, lr}
   d5b86:	4604      	mov	r4, r0
   d5b88:	f7fe fa85 	bl	d4096 <_ZdlPv>
   d5b8c:	4620      	mov	r0, r4
   d5b8e:	bd10      	pop	{r4, pc}

000d5b90 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5b90:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5b92:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5b94:	4604      	mov	r4, r0
   d5b96:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5b98:	b925      	cbnz	r5, d5ba4 <_ZN11USARTSerial5writeEh+0x14>
   d5b9a:	7c00      	ldrb	r0, [r0, #16]
   d5b9c:	f7ff fa0a 	bl	d4fb4 <HAL_USART_Available_Data_For_Write>
   d5ba0:	2800      	cmp	r0, #0
   d5ba2:	dd05      	ble.n	d5bb0 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5ba4:	4631      	mov	r1, r6
   d5ba6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5bac:	f7ff b9d2 	b.w	d4f54 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5bb0:	4628      	mov	r0, r5
   d5bb2:	bd70      	pop	{r4, r5, r6, pc}

000d5bb4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5bb4:	b510      	push	{r4, lr}
   d5bb6:	4604      	mov	r4, r0
   d5bb8:	4608      	mov	r0, r1
   d5bba:	4611      	mov	r1, r2
   d5bbc:	2200      	movs	r2, #0
   d5bbe:	6062      	str	r2, [r4, #4]
   d5bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5bc4:	60a2      	str	r2, [r4, #8]
   d5bc6:	4a05      	ldr	r2, [pc, #20]	; (d5bdc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5bc8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5bca:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5bcc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5bce:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5bd0:	461a      	mov	r2, r3
   d5bd2:	f7ff f9b7 	bl	d4f44 <HAL_USART_Init>
}
   d5bd6:	4620      	mov	r0, r4
   d5bd8:	bd10      	pop	{r4, pc}
   d5bda:	bf00      	nop
   d5bdc:	000d76cc 	.word	0x000d76cc

000d5be0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5be0:	7c00      	ldrb	r0, [r0, #16]
   d5be2:	f7ff b9df 	b.w	d4fa4 <HAL_USART_Is_Enabled>
	...

000d5be8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5be8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5bea:	4d0c      	ldr	r5, [pc, #48]	; (d5c1c <_Z22__fetch_global_Serial1v+0x34>)
   d5bec:	6829      	ldr	r1, [r5, #0]
   d5bee:	f011 0401 	ands.w	r4, r1, #1
   d5bf2:	d111      	bne.n	d5c18 <_Z22__fetch_global_Serial1v+0x30>
   d5bf4:	4628      	mov	r0, r5
   d5bf6:	f7fe fa5d 	bl	d40b4 <__cxa_guard_acquire>
   d5bfa:	b168      	cbz	r0, d5c18 <_Z22__fetch_global_Serial1v+0x30>
   d5bfc:	4a08      	ldr	r2, [pc, #32]	; (d5c20 <_Z22__fetch_global_Serial1v+0x38>)
   d5bfe:	4b09      	ldr	r3, [pc, #36]	; (d5c24 <_Z22__fetch_global_Serial1v+0x3c>)
   d5c00:	4809      	ldr	r0, [pc, #36]	; (d5c28 <_Z22__fetch_global_Serial1v+0x40>)
   d5c02:	4621      	mov	r1, r4
   d5c04:	f7ff ffd6 	bl	d5bb4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5c08:	4628      	mov	r0, r5
   d5c0a:	f7fe fa58 	bl	d40be <__cxa_guard_release>
   d5c0e:	4a07      	ldr	r2, [pc, #28]	; (d5c2c <_Z22__fetch_global_Serial1v+0x44>)
   d5c10:	4907      	ldr	r1, [pc, #28]	; (d5c30 <_Z22__fetch_global_Serial1v+0x48>)
   d5c12:	4805      	ldr	r0, [pc, #20]	; (d5c28 <_Z22__fetch_global_Serial1v+0x40>)
   d5c14:	f000 faba 	bl	d618c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5c18:	4803      	ldr	r0, [pc, #12]	; (d5c28 <_Z22__fetch_global_Serial1v+0x40>)
   d5c1a:	bd38      	pop	{r3, r4, r5, pc}
   d5c1c:	2003e484 	.word	0x2003e484
   d5c20:	2003e488 	.word	0x2003e488
   d5c24:	2003e400 	.word	0x2003e400
   d5c28:	2003e3ec 	.word	0x2003e3ec
   d5c2c:	2003e378 	.word	0x2003e378
   d5c30:	000d5b61 	.word	0x000d5b61

000d5c34 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5c34:	4770      	bx	lr

000d5c36 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c38:	4606      	mov	r6, r0
   d5c3a:	4615      	mov	r5, r2
   d5c3c:	460c      	mov	r4, r1
   d5c3e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5c40:	42bc      	cmp	r4, r7
   d5c42:	d006      	beq.n	d5c52 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5c44:	6833      	ldr	r3, [r6, #0]
   d5c46:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5c4a:	689b      	ldr	r3, [r3, #8]
   d5c4c:	4630      	mov	r0, r6
   d5c4e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5c50:	e7f6      	b.n	d5c40 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5c52:	4628      	mov	r0, r5
   d5c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c56 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5c56:	2200      	movs	r2, #0
   d5c58:	7c00      	ldrb	r0, [r0, #16]
   d5c5a:	f7ff b9cb 	b.w	d4ff4 <HAL_I2C_Write_Data>

000d5c5e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5c5e:	2100      	movs	r1, #0
   d5c60:	7c00      	ldrb	r0, [r0, #16]
   d5c62:	f7ff b9cf 	b.w	d5004 <HAL_I2C_Available_Data>

000d5c66 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5c66:	2100      	movs	r1, #0
   d5c68:	7c00      	ldrb	r0, [r0, #16]
   d5c6a:	f7ff b9d3 	b.w	d5014 <HAL_I2C_Read_Data>

000d5c6e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5c6e:	2100      	movs	r1, #0
   d5c70:	7c00      	ldrb	r0, [r0, #16]
   d5c72:	f7ff b9d7 	b.w	d5024 <HAL_I2C_Peek_Data>

000d5c76 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5c76:	2100      	movs	r1, #0
   d5c78:	7c00      	ldrb	r0, [r0, #16]
   d5c7a:	f7ff b9db 	b.w	d5034 <HAL_I2C_Flush_Data>

000d5c7e <_ZN7TwoWireD0Ev>:
   d5c7e:	b510      	push	{r4, lr}
   d5c80:	4604      	mov	r4, r0
   d5c82:	f7fe fa08 	bl	d4096 <_ZdlPv>
   d5c86:	4620      	mov	r0, r4
   d5c88:	bd10      	pop	{r4, pc}
	...

000d5c8c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5c8c:	b510      	push	{r4, lr}
   d5c8e:	4604      	mov	r4, r0
   d5c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c94:	4608      	mov	r0, r1
   d5c96:	60a3      	str	r3, [r4, #8]
   d5c98:	2100      	movs	r1, #0
   d5c9a:	4b04      	ldr	r3, [pc, #16]	; (d5cac <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5c9c:	7420      	strb	r0, [r4, #16]
   d5c9e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5ca0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5ca2:	f7ff f9d7 	bl	d5054 <HAL_I2C_Init>

}
   d5ca6:	4620      	mov	r0, r4
   d5ca8:	bd10      	pop	{r4, pc}
   d5caa:	bf00      	nop
   d5cac:	000d76fc 	.word	0x000d76fc

000d5cb0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5cb0:	2300      	movs	r3, #0
   d5cb2:	461a      	mov	r2, r3
   d5cb4:	4619      	mov	r1, r3
   d5cb6:	7c00      	ldrb	r0, [r0, #16]
   d5cb8:	f7ff b984 	b.w	d4fc4 <HAL_I2C_Begin>

000d5cbc <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5cbc:	2200      	movs	r2, #0
   d5cbe:	7c00      	ldrb	r0, [r0, #16]
   d5cc0:	f7ff b988 	b.w	d4fd4 <HAL_I2C_Begin_Transmission>

000d5cc4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5cc4:	b2c9      	uxtb	r1, r1
   d5cc6:	f7ff bff9 	b.w	d5cbc <_ZN7TwoWire17beginTransmissionEh>

000d5cca <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5cca:	2200      	movs	r2, #0
   d5ccc:	7c00      	ldrb	r0, [r0, #16]
   d5cce:	f7ff b989 	b.w	d4fe4 <HAL_I2C_End_Transmission>

000d5cd2 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5cd2:	2101      	movs	r1, #1
   d5cd4:	f7ff bff9 	b.w	d5cca <_ZN7TwoWire15endTransmissionEh>

000d5cd8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5cd8:	2100      	movs	r1, #0
   d5cda:	7c00      	ldrb	r0, [r0, #16]
   d5cdc:	f7ff b9b2 	b.w	d5044 <HAL_I2C_Is_Enabled>

000d5ce0 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d5ce0:	b510      	push	{r4, lr}
  if (0 == max) {
   d5ce2:	4604      	mov	r4, r0
   d5ce4:	b130      	cbz	r0, d5cf4 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d5ce6:	f000 fd1d 	bl	d6724 <rand>
   d5cea:	fb90 f3f4 	sdiv	r3, r0, r4
   d5cee:	fb03 0014 	mls	r0, r3, r4, r0
   d5cf2:	bd10      	pop	{r4, pc}
}
   d5cf4:	bd10      	pop	{r4, pc}

000d5cf6 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d5cf6:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d5cf8:	b510      	push	{r4, lr}
   d5cfa:	4604      	mov	r4, r0
  if (min >= max) {
   d5cfc:	da04      	bge.n	d5d08 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d5cfe:	1a08      	subs	r0, r1, r0
   d5d00:	f7ff ffee 	bl	d5ce0 <_Z6randomi>
   d5d04:	4420      	add	r0, r4
   d5d06:	bd10      	pop	{r4, pc}
}
   d5d08:	bd10      	pop	{r4, pc}

000d5d0a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d0a:	2200      	movs	r2, #0
   d5d0c:	4611      	mov	r1, r2
   d5d0e:	6840      	ldr	r0, [r0, #4]
   d5d10:	f7ff ba5c 	b.w	d51cc <network_listening>

000d5d14 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5d14:	2200      	movs	r2, #0
   d5d16:	4611      	mov	r1, r2
   d5d18:	6840      	ldr	r0, [r0, #4]
   d5d1a:	f7ff ba67 	b.w	d51ec <network_get_listen_timeout>

000d5d1e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5d1e:	2200      	movs	r2, #0
   d5d20:	6840      	ldr	r0, [r0, #4]
   d5d22:	f7ff ba5b 	b.w	d51dc <network_set_listen_timeout>

000d5d26 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d26:	2200      	movs	r2, #0
   d5d28:	f081 0101 	eor.w	r1, r1, #1
   d5d2c:	6840      	ldr	r0, [r0, #4]
   d5d2e:	f7ff ba45 	b.w	d51bc <network_listen>

000d5d32 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5d32:	2300      	movs	r3, #0
   d5d34:	461a      	mov	r2, r3
   d5d36:	4619      	mov	r1, r3
   d5d38:	6840      	ldr	r0, [r0, #4]
   d5d3a:	f7ff ba37 	b.w	d51ac <network_off>

000d5d3e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5d3e:	2300      	movs	r3, #0
   d5d40:	461a      	mov	r2, r3
   d5d42:	4619      	mov	r1, r3
   d5d44:	6840      	ldr	r0, [r0, #4]
   d5d46:	f7ff ba29 	b.w	d519c <network_on>

000d5d4a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5d4a:	2200      	movs	r2, #0
   d5d4c:	4611      	mov	r1, r2
   d5d4e:	6840      	ldr	r0, [r0, #4]
   d5d50:	f7ff ba1c 	b.w	d518c <network_ready>

000d5d54 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5d54:	2200      	movs	r2, #0
   d5d56:	4611      	mov	r1, r2
   d5d58:	6840      	ldr	r0, [r0, #4]
   d5d5a:	f7ff ba07 	b.w	d516c <network_connecting>

000d5d5e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d5e:	2200      	movs	r2, #0
   d5d60:	2102      	movs	r1, #2
   d5d62:	6840      	ldr	r0, [r0, #4]
   d5d64:	f7ff ba0a 	b.w	d517c <network_disconnect>

000d5d68 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5d68:	2300      	movs	r3, #0
   d5d6a:	461a      	mov	r2, r3
   d5d6c:	6840      	ldr	r0, [r0, #4]
   d5d6e:	f7ff b9f5 	b.w	d515c <network_connect>

000d5d72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5d72:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d74:	4605      	mov	r5, r0
   d5d76:	b178      	cbz	r0, d5d98 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d78:	6804      	ldr	r4, [r0, #0]
   d5d7a:	b144      	cbz	r4, d5d8e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    ~_Function_base()
    {
      if (_M_manager)
   d5d7c:	68a3      	ldr	r3, [r4, #8]
   d5d7e:	b11b      	cbz	r3, d5d88 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d80:	2203      	movs	r2, #3
   d5d82:	4621      	mov	r1, r4
   d5d84:	4620      	mov	r0, r4
   d5d86:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d88:	4620      	mov	r0, r4
   d5d8a:	f7fe f984 	bl	d4096 <_ZdlPv>
   d5d8e:	4628      	mov	r0, r5
      }
   d5d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d94:	f7fe b97f 	b.w	d4096 <_ZdlPv>
   d5d98:	bd38      	pop	{r3, r4, r5, pc}

000d5d9a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5d9a:	b110      	cbz	r0, d5da2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5d9c:	6803      	ldr	r3, [r0, #0]
   d5d9e:	685b      	ldr	r3, [r3, #4]
   d5da0:	4718      	bx	r3
   d5da2:	4770      	bx	lr

000d5da4 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5da4:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5da6:	6803      	ldr	r3, [r0, #0]
   d5da8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5daa:	b1bb      	cbz	r3, d5ddc <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5dac:	6858      	ldr	r0, [r3, #4]
   d5dae:	f7ff f899 	bl	d4ee4 <os_thread_is_current>
   d5db2:	b978      	cbnz	r0, d5dd4 <_ZN6ThreadD1Ev+0x30>
   d5db4:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5db6:	7c5a      	ldrb	r2, [r3, #17]
   d5db8:	b912      	cbnz	r2, d5dc0 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5dba:	6858      	ldr	r0, [r3, #4]
   d5dbc:	f7ff f89a 	bl	d4ef4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5dc0:	6823      	ldr	r3, [r4, #0]
   d5dc2:	6858      	ldr	r0, [r3, #4]
   d5dc4:	f7ff f89e 	bl	d4f04 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dc8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5dca:	2300      	movs	r3, #0
   d5dcc:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5dce:	b128      	cbz	r0, d5ddc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5dd0:	f7ff ffcf 	bl	d5d72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5dd4:	6820      	ldr	r0, [r4, #0]
   d5dd6:	b108      	cbz	r0, d5ddc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5dd8:	f7ff ffcb 	bl	d5d72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5ddc:	4620      	mov	r0, r4
   d5dde:	bd10      	pop	{r4, pc}

000d5de0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5de0:	b538      	push	{r3, r4, r5, lr}
   d5de2:	4b0b      	ldr	r3, [pc, #44]	; (d5e10 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5de4:	6003      	str	r3, [r0, #0]
   d5de6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5de8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5dec:	b108      	cbz	r0, d5df2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5dee:	f7fe f954 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5df2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5df6:	b12d      	cbz	r5, d5e04 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5df8:	4628      	mov	r0, r5
   d5dfa:	f7ff ffd3 	bl	d5da4 <_ZN6ThreadD1Ev>
   d5dfe:	4628      	mov	r0, r5
   d5e00:	f7fe f949 	bl	d4096 <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e04:	68a0      	ldr	r0, [r4, #8]
   d5e06:	b108      	cbz	r0, d5e0c <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d5e08:	f7ff ffc7 	bl	d5d9a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5e0c:	4620      	mov	r0, r4
   d5e0e:	bd38      	pop	{r3, r4, r5, pc}
   d5e10:	000d7724 	.word	0x000d7724

000d5e14 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5e14:	b538      	push	{r3, r4, r5, lr}
   d5e16:	4c0d      	ldr	r4, [pc, #52]	; (d5e4c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5e18:	4b0d      	ldr	r3, [pc, #52]	; (d5e50 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5e1a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5e1c:	2500      	movs	r5, #0
   d5e1e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5e20:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5e24:	6063      	str	r3, [r4, #4]
   d5e26:	60a5      	str	r5, [r4, #8]
   d5e28:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5e2c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5e30:	f7ff f878 	bl	d4f24 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5e34:	4b07      	ldr	r3, [pc, #28]	; (d5e54 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5e36:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5e3a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	4a06      	ldr	r2, [pc, #24]	; (d5e58 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5e40:	4906      	ldr	r1, [pc, #24]	; (d5e5c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5e46:	f000 b9a1 	b.w	d618c <__aeabi_atexit>
   d5e4a:	bf00      	nop
   d5e4c:	2003e50c 	.word	0x2003e50c
   d5e50:	000d778c 	.word	0x000d778c
   d5e54:	000d7724 	.word	0x000d7724
   d5e58:	2003e378 	.word	0x2003e378
   d5e5c:	000d5de1 	.word	0x000d5de1

000d5e60 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5e60:	2200      	movs	r2, #0
   d5e62:	4611      	mov	r1, r2
   d5e64:	6840      	ldr	r0, [r0, #4]
   d5e66:	f7ff b991 	b.w	d518c <network_ready>

000d5e6a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e6a:	2200      	movs	r2, #0
   d5e6c:	4611      	mov	r1, r2
   d5e6e:	6840      	ldr	r0, [r0, #4]
   d5e70:	f7ff b9ac 	b.w	d51cc <network_listening>

000d5e74 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e74:	2200      	movs	r2, #0
   d5e76:	4611      	mov	r1, r2
   d5e78:	6840      	ldr	r0, [r0, #4]
   d5e7a:	f7ff b9b7 	b.w	d51ec <network_get_listen_timeout>

000d5e7e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e7e:	2200      	movs	r2, #0
   d5e80:	6840      	ldr	r0, [r0, #4]
   d5e82:	f7ff b9ab 	b.w	d51dc <network_set_listen_timeout>

000d5e86 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e86:	2200      	movs	r2, #0
   d5e88:	f081 0101 	eor.w	r1, r1, #1
   d5e8c:	6840      	ldr	r0, [r0, #4]
   d5e8e:	f7ff b995 	b.w	d51bc <network_listen>

000d5e92 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5e92:	2300      	movs	r3, #0
   d5e94:	461a      	mov	r2, r3
   d5e96:	4619      	mov	r1, r3
   d5e98:	6840      	ldr	r0, [r0, #4]
   d5e9a:	f7ff b987 	b.w	d51ac <network_off>

000d5e9e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5e9e:	2300      	movs	r3, #0
   d5ea0:	461a      	mov	r2, r3
   d5ea2:	4619      	mov	r1, r3
   d5ea4:	6840      	ldr	r0, [r0, #4]
   d5ea6:	f7ff b979 	b.w	d519c <network_on>

000d5eaa <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5eaa:	2200      	movs	r2, #0
   d5eac:	4611      	mov	r1, r2
   d5eae:	6840      	ldr	r0, [r0, #4]
   d5eb0:	f7ff b95c 	b.w	d516c <network_connecting>

000d5eb4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5eb4:	2200      	movs	r2, #0
   d5eb6:	2102      	movs	r1, #2
   d5eb8:	6840      	ldr	r0, [r0, #4]
   d5eba:	f7ff b95f 	b.w	d517c <network_disconnect>

000d5ebe <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5ebe:	2300      	movs	r3, #0
   d5ec0:	461a      	mov	r2, r3
   d5ec2:	6840      	ldr	r0, [r0, #4]
   d5ec4:	f7ff b94a 	b.w	d515c <network_connect>

000d5ec8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5ec8:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5eca:	2204      	movs	r2, #4
   d5ecc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5ece:	4a02      	ldr	r2, [pc, #8]	; (d5ed8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5ed0:	601a      	str	r2, [r3, #0]
   d5ed2:	4770      	bx	lr
   d5ed4:	2003e6dc 	.word	0x2003e6dc
   d5ed8:	000d7758 	.word	0x000d7758

000d5edc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5edc:	2300      	movs	r3, #0
   d5ede:	461a      	mov	r2, r3
   d5ee0:	6840      	ldr	r0, [r0, #4]
   d5ee2:	f7ff b93b 	b.w	d515c <network_connect>

000d5ee6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5ee6:	2200      	movs	r2, #0
   d5ee8:	2102      	movs	r1, #2
   d5eea:	6840      	ldr	r0, [r0, #4]
   d5eec:	f7ff b946 	b.w	d517c <network_disconnect>

000d5ef0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5ef0:	2200      	movs	r2, #0
   d5ef2:	4611      	mov	r1, r2
   d5ef4:	6840      	ldr	r0, [r0, #4]
   d5ef6:	f7ff b939 	b.w	d516c <network_connecting>

000d5efa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5efa:	2200      	movs	r2, #0
   d5efc:	4611      	mov	r1, r2
   d5efe:	6840      	ldr	r0, [r0, #4]
   d5f00:	f7ff b944 	b.w	d518c <network_ready>

000d5f04 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5f04:	2300      	movs	r3, #0
   d5f06:	461a      	mov	r2, r3
   d5f08:	4619      	mov	r1, r3
   d5f0a:	6840      	ldr	r0, [r0, #4]
   d5f0c:	f7ff b946 	b.w	d519c <network_on>

000d5f10 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5f10:	2300      	movs	r3, #0
   d5f12:	461a      	mov	r2, r3
   d5f14:	4619      	mov	r1, r3
   d5f16:	6840      	ldr	r0, [r0, #4]
   d5f18:	f7ff b948 	b.w	d51ac <network_off>

000d5f1c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5f1c:	2200      	movs	r2, #0
   d5f1e:	f081 0101 	eor.w	r1, r1, #1
   d5f22:	6840      	ldr	r0, [r0, #4]
   d5f24:	f7ff b94a 	b.w	d51bc <network_listen>

000d5f28 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5f28:	2200      	movs	r2, #0
   d5f2a:	6840      	ldr	r0, [r0, #4]
   d5f2c:	f7ff b956 	b.w	d51dc <network_set_listen_timeout>

000d5f30 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5f30:	2200      	movs	r2, #0
   d5f32:	4611      	mov	r1, r2
   d5f34:	6840      	ldr	r0, [r0, #4]
   d5f36:	f7ff b959 	b.w	d51ec <network_get_listen_timeout>

000d5f3a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5f3a:	2200      	movs	r2, #0
   d5f3c:	4611      	mov	r1, r2
   d5f3e:	6840      	ldr	r0, [r0, #4]
   d5f40:	f7ff b944 	b.w	d51cc <network_listening>

000d5f44 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5f48:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5f4a:	b095      	sub	sp, #84	; 0x54
   d5f4c:	4616      	mov	r6, r2
   d5f4e:	460d      	mov	r5, r1
   d5f50:	4607      	mov	r7, r0
    IPAddress addr;
   d5f52:	f7ff fd57 	bl	d5a04 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5f56:	4621      	mov	r1, r4
   d5f58:	2220      	movs	r2, #32
   d5f5a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5f5c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5f5e:	f000 fbb0 	bl	d66c2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5f62:	2340      	movs	r3, #64	; 0x40
   d5f64:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5f66:	4621      	mov	r1, r4
   d5f68:	466b      	mov	r3, sp
   d5f6a:	aa0c      	add	r2, sp, #48	; 0x30
   d5f6c:	4630      	mov	r0, r6
   d5f6e:	f7fe ff29 	bl	d4dc4 <netdb_getaddrinfo>
    if (!r) {
   d5f72:	4604      	mov	r4, r0
   d5f74:	2800      	cmp	r0, #0
   d5f76:	d144      	bne.n	d6002 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f78:	4602      	mov	r2, r0
   d5f7a:	2101      	movs	r1, #1
   d5f7c:	6868      	ldr	r0, [r5, #4]
   d5f7e:	f7ff f905 	bl	d518c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f82:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f84:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f86:	4622      	mov	r2, r4
   d5f88:	6868      	ldr	r0, [r5, #4]
   d5f8a:	f7ff f8ff 	bl	d518c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f8e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f90:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5f92:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f94:	2e00      	cmp	r6, #0
   d5f96:	d034      	beq.n	d6002 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5f98:	2900      	cmp	r1, #0
   d5f9a:	d132      	bne.n	d6002 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5f9c:	6873      	ldr	r3, [r6, #4]
   d5f9e:	2b02      	cmp	r3, #2
   d5fa0:	d002      	beq.n	d5fa8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5fa2:	2b0a      	cmp	r3, #10
   d5fa4:	d009      	beq.n	d5fba <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5fa6:	e02a      	b.n	d5ffe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5fa8:	f1b8 0f00 	cmp.w	r8, #0
   d5fac:	d027      	beq.n	d5ffe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5fae:	6971      	ldr	r1, [r6, #20]
   d5fb0:	4638      	mov	r0, r7
   d5fb2:	3104      	adds	r1, #4
   d5fb4:	f7ff fd53 	bl	d5a5e <_ZN9IPAddressaSEPKh>
   d5fb8:	e020      	b.n	d5ffc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5fba:	f1b9 0f00 	cmp.w	r9, #0
   d5fbe:	d01e      	beq.n	d5ffe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5fc0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5fc2:	2211      	movs	r2, #17
   d5fc4:	a801      	add	r0, sp, #4
   d5fc6:	f000 fb7c 	bl	d66c2 <memset>
                    a.v = 6;
   d5fca:	2306      	movs	r3, #6
   d5fcc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5fd0:	ad01      	add	r5, sp, #4
   d5fd2:	f104 0308 	add.w	r3, r4, #8
   d5fd6:	3418      	adds	r4, #24
   d5fd8:	6818      	ldr	r0, [r3, #0]
   d5fda:	6859      	ldr	r1, [r3, #4]
   d5fdc:	462a      	mov	r2, r5
   d5fde:	c203      	stmia	r2!, {r0, r1}
   d5fe0:	3308      	adds	r3, #8
   d5fe2:	42a3      	cmp	r3, r4
   d5fe4:	4615      	mov	r5, r2
   d5fe6:	d1f7      	bne.n	d5fd8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5fe8:	a901      	add	r1, sp, #4
   d5fea:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5fec:	ad07      	add	r5, sp, #28
   d5fee:	f7ff fd17 	bl	d5a20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ff4:	1d3c      	adds	r4, r7, #4
   d5ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ff8:	682b      	ldr	r3, [r5, #0]
   d5ffa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5ffc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ffe:	69f6      	ldr	r6, [r6, #28]
   d6000:	e7c8      	b.n	d5f94 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6002:	9800      	ldr	r0, [sp, #0]
   d6004:	f7fe fed6 	bl	d4db4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6008:	4638      	mov	r0, r7
   d600a:	b015      	add	sp, #84	; 0x54
   d600c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6010 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6010:	4b02      	ldr	r3, [pc, #8]	; (d601c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6012:	4a03      	ldr	r2, [pc, #12]	; (d6020 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6014:	601a      	str	r2, [r3, #0]
   d6016:	2200      	movs	r2, #0
   d6018:	605a      	str	r2, [r3, #4]
   d601a:	4770      	bx	lr
   d601c:	2003e6e4 	.word	0x2003e6e4
   d6020:	000d778c 	.word	0x000d778c

000d6024 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6024:	b510      	push	{r4, lr}
   d6026:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6028:	480f      	ldr	r0, [pc, #60]	; (d6068 <pinAvailable+0x44>)
   d602a:	f7ff fa15 	bl	d5458 <_ZN8SPIClass9isEnabledEv>
   d602e:	b128      	cbz	r0, d603c <pinAvailable+0x18>
   d6030:	f1a4 030b 	sub.w	r3, r4, #11
   d6034:	2b02      	cmp	r3, #2
   d6036:	d801      	bhi.n	d603c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6038:	2000      	movs	r0, #0
   d603a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d603c:	f000 f886 	bl	d614c <_Z19__fetch_global_Wirev>
   d6040:	f7ff fe4a 	bl	d5cd8 <_ZN7TwoWire9isEnabledEv>
   d6044:	b108      	cbz	r0, d604a <pinAvailable+0x26>
   d6046:	2c01      	cmp	r4, #1
   d6048:	d9f6      	bls.n	d6038 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d604a:	f7ff fdcd 	bl	d5be8 <_Z22__fetch_global_Serial1v>
   d604e:	f7ff fdc7 	bl	d5be0 <_ZN11USARTSerial9isEnabledEv>
   d6052:	b118      	cbz	r0, d605c <pinAvailable+0x38>
   d6054:	f1a4 0309 	sub.w	r3, r4, #9
   d6058:	2b01      	cmp	r3, #1
   d605a:	d9ed      	bls.n	d6038 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d605c:	2c23      	cmp	r4, #35	; 0x23
   d605e:	bf8c      	ite	hi
   d6060:	2000      	movhi	r0, #0
   d6062:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6064:	bd10      	pop	{r4, pc}
   d6066:	bf00      	nop
   d6068:	2003e6ec 	.word	0x2003e6ec

000d606c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d606c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d606e:	b538      	push	{r3, r4, r5, lr}
   d6070:	4604      	mov	r4, r0
   d6072:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6074:	d80a      	bhi.n	d608c <pinMode+0x20>
   d6076:	29ff      	cmp	r1, #255	; 0xff
   d6078:	d008      	beq.n	d608c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d607a:	f7ff ffd3 	bl	d6024 <pinAvailable>
   d607e:	b128      	cbz	r0, d608c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6080:	4629      	mov	r1, r5
   d6082:	4620      	mov	r0, r4
}
   d6084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6088:	f7fe beac 	b.w	d4de4 <HAL_Pin_Mode>
   d608c:	bd38      	pop	{r3, r4, r5, pc}

000d608e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d608e:	b538      	push	{r3, r4, r5, lr}
   d6090:	4604      	mov	r4, r0
   d6092:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6094:	f7fe feae 	bl	d4df4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6098:	28ff      	cmp	r0, #255	; 0xff
   d609a:	d010      	beq.n	d60be <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d609c:	2806      	cmp	r0, #6
   d609e:	d804      	bhi.n	d60aa <digitalWrite+0x1c>
   d60a0:	234d      	movs	r3, #77	; 0x4d
   d60a2:	fa23 f000 	lsr.w	r0, r3, r0
   d60a6:	07c3      	lsls	r3, r0, #31
   d60a8:	d409      	bmi.n	d60be <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d60aa:	4620      	mov	r0, r4
   d60ac:	f7ff ffba 	bl	d6024 <pinAvailable>
   d60b0:	b128      	cbz	r0, d60be <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d60b2:	4629      	mov	r1, r5
   d60b4:	4620      	mov	r0, r4
}
   d60b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d60ba:	f7fe bea3 	b.w	d4e04 <HAL_GPIO_Write>
   d60be:	bd38      	pop	{r3, r4, r5, pc}

000d60c0 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d60c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d60c4:	4690      	mov	r8, r2
   d60c6:	461e      	mov	r6, r3
   d60c8:	2407      	movs	r4, #7
   d60ca:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d60cc:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d60ce:	f1b8 0f00 	cmp.w	r8, #0
   d60d2:	d104      	bne.n	d60de <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d60d4:	f1c4 0107 	rsb	r1, r4, #7
   d60d8:	fa46 f101 	asr.w	r1, r6, r1
   d60dc:	e001      	b.n	d60e2 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d60de:	fa46 f104 	asr.w	r1, r6, r4
   d60e2:	f001 0101 	and.w	r1, r1, #1
   d60e6:	4638      	mov	r0, r7
   d60e8:	f7ff ffd1 	bl	d608e <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d60ec:	2101      	movs	r1, #1
   d60ee:	4628      	mov	r0, r5
   d60f0:	f7ff ffcd 	bl	d608e <digitalWrite>
    digitalWrite(clockPin, LOW);
   d60f4:	2100      	movs	r1, #0
   d60f6:	4628      	mov	r0, r5
   d60f8:	f7ff ffc9 	bl	d608e <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d60fc:	f114 34ff 	adds.w	r4, r4, #4294967295
   d6100:	d2e5      	bcs.n	d60ce <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d6102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6108 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6108:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d610a:	4c0c      	ldr	r4, [pc, #48]	; (d613c <_GLOBAL__sub_I_SPI+0x34>)
   d610c:	4e0c      	ldr	r6, [pc, #48]	; (d6140 <_GLOBAL__sub_I_SPI+0x38>)
   d610e:	4d0d      	ldr	r5, [pc, #52]	; (d6144 <_GLOBAL__sub_I_SPI+0x3c>)
   d6110:	2100      	movs	r1, #0
   d6112:	4620      	mov	r0, r4
   d6114:	f7ff f920 	bl	d5358 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6118:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d611a:	4c0b      	ldr	r4, [pc, #44]	; (d6148 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d611c:	4632      	mov	r2, r6
   d611e:	4629      	mov	r1, r5
   d6120:	f000 f834 	bl	d618c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6124:	2101      	movs	r1, #1
   d6126:	4620      	mov	r0, r4
   d6128:	f7ff f916 	bl	d5358 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d612c:	4632      	mov	r2, r6
   d612e:	4629      	mov	r1, r5
   d6130:	4620      	mov	r0, r4
   d6132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6136:	f000 b829 	b.w	d618c <__aeabi_atexit>
   d613a:	bf00      	nop
   d613c:	2003e6ec 	.word	0x2003e6ec
   d6140:	2003e378 	.word	0x2003e378
   d6144:	000d5349 	.word	0x000d5349
   d6148:	2003e6fc 	.word	0x2003e6fc

000d614c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d614c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d614e:	4d0b      	ldr	r5, [pc, #44]	; (d617c <_Z19__fetch_global_Wirev+0x30>)
   d6150:	6829      	ldr	r1, [r5, #0]
   d6152:	f011 0401 	ands.w	r4, r1, #1
   d6156:	d10f      	bne.n	d6178 <_Z19__fetch_global_Wirev+0x2c>
   d6158:	4628      	mov	r0, r5
   d615a:	f7fd ffab 	bl	d40b4 <__cxa_guard_acquire>
   d615e:	b158      	cbz	r0, d6178 <_Z19__fetch_global_Wirev+0x2c>
   d6160:	4621      	mov	r1, r4
   d6162:	4807      	ldr	r0, [pc, #28]	; (d6180 <_Z19__fetch_global_Wirev+0x34>)
   d6164:	f7ff fd92 	bl	d5c8c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6168:	4628      	mov	r0, r5
   d616a:	f7fd ffa8 	bl	d40be <__cxa_guard_release>
   d616e:	4a05      	ldr	r2, [pc, #20]	; (d6184 <_Z19__fetch_global_Wirev+0x38>)
   d6170:	4905      	ldr	r1, [pc, #20]	; (d6188 <_Z19__fetch_global_Wirev+0x3c>)
   d6172:	4803      	ldr	r0, [pc, #12]	; (d6180 <_Z19__fetch_global_Wirev+0x34>)
   d6174:	f000 f80a 	bl	d618c <__aeabi_atexit>
	return wire;
}
   d6178:	4801      	ldr	r0, [pc, #4]	; (d6180 <_Z19__fetch_global_Wirev+0x34>)
   d617a:	bd38      	pop	{r3, r4, r5, pc}
   d617c:	2003e710 	.word	0x2003e710
   d6180:	2003e714 	.word	0x2003e714
   d6184:	2003e378 	.word	0x2003e378
   d6188:	000d5c35 	.word	0x000d5c35

000d618c <__aeabi_atexit>:
   d618c:	460b      	mov	r3, r1
   d618e:	4601      	mov	r1, r0
   d6190:	4618      	mov	r0, r3
   d6192:	f000 b985 	b.w	d64a0 <__cxa_atexit>
	...

000d6198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6198:	4b18      	ldr	r3, [pc, #96]	; (d61fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d619a:	681a      	ldr	r2, [r3, #0]
   d619c:	07d1      	lsls	r1, r2, #31
   d619e:	bf5c      	itt	pl
   d61a0:	2201      	movpl	r2, #1
   d61a2:	601a      	strpl	r2, [r3, #0]
   d61a4:	4b16      	ldr	r3, [pc, #88]	; (d6200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d61a6:	681a      	ldr	r2, [r3, #0]
   d61a8:	07d2      	lsls	r2, r2, #31
   d61aa:	bf5c      	itt	pl
   d61ac:	2201      	movpl	r2, #1
   d61ae:	601a      	strpl	r2, [r3, #0]
   d61b0:	4b14      	ldr	r3, [pc, #80]	; (d6204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d61b2:	681a      	ldr	r2, [r3, #0]
   d61b4:	07d0      	lsls	r0, r2, #31
   d61b6:	bf5c      	itt	pl
   d61b8:	2201      	movpl	r2, #1
   d61ba:	601a      	strpl	r2, [r3, #0]
   d61bc:	4b12      	ldr	r3, [pc, #72]	; (d6208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d61be:	681a      	ldr	r2, [r3, #0]
   d61c0:	07d1      	lsls	r1, r2, #31
   d61c2:	bf5c      	itt	pl
   d61c4:	2201      	movpl	r2, #1
   d61c6:	601a      	strpl	r2, [r3, #0]
   d61c8:	4b10      	ldr	r3, [pc, #64]	; (d620c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d61ca:	681a      	ldr	r2, [r3, #0]
   d61cc:	07d2      	lsls	r2, r2, #31
   d61ce:	bf5c      	itt	pl
   d61d0:	2201      	movpl	r2, #1
   d61d2:	601a      	strpl	r2, [r3, #0]
   d61d4:	4b0e      	ldr	r3, [pc, #56]	; (d6210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d61d6:	681a      	ldr	r2, [r3, #0]
   d61d8:	07d0      	lsls	r0, r2, #31
   d61da:	bf5c      	itt	pl
   d61dc:	2201      	movpl	r2, #1
   d61de:	601a      	strpl	r2, [r3, #0]
   d61e0:	4b0c      	ldr	r3, [pc, #48]	; (d6214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d61e2:	681a      	ldr	r2, [r3, #0]
   d61e4:	07d1      	lsls	r1, r2, #31
   d61e6:	bf5c      	itt	pl
   d61e8:	2201      	movpl	r2, #1
   d61ea:	601a      	strpl	r2, [r3, #0]
   d61ec:	4b0a      	ldr	r3, [pc, #40]	; (d6218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d61ee:	681a      	ldr	r2, [r3, #0]
   d61f0:	07d2      	lsls	r2, r2, #31
   d61f2:	bf5c      	itt	pl
   d61f4:	2201      	movpl	r2, #1
   d61f6:	601a      	strpl	r2, [r3, #0]
   d61f8:	4770      	bx	lr
   d61fa:	bf00      	nop
   d61fc:	2003e744 	.word	0x2003e744
   d6200:	2003e740 	.word	0x2003e740
   d6204:	2003e73c 	.word	0x2003e73c
   d6208:	2003e738 	.word	0x2003e738
   d620c:	2003e734 	.word	0x2003e734
   d6210:	2003e730 	.word	0x2003e730
   d6214:	2003e72c 	.word	0x2003e72c
   d6218:	2003e728 	.word	0x2003e728

000d621c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d621c:	4b24      	ldr	r3, [pc, #144]	; (d62b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d621e:	681a      	ldr	r2, [r3, #0]
   d6220:	07d0      	lsls	r0, r2, #31
   d6222:	bf5c      	itt	pl
   d6224:	2201      	movpl	r2, #1
   d6226:	601a      	strpl	r2, [r3, #0]
   d6228:	4b22      	ldr	r3, [pc, #136]	; (d62b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d622a:	681a      	ldr	r2, [r3, #0]
   d622c:	07d1      	lsls	r1, r2, #31
   d622e:	bf5c      	itt	pl
   d6230:	2201      	movpl	r2, #1
   d6232:	601a      	strpl	r2, [r3, #0]
   d6234:	4b20      	ldr	r3, [pc, #128]	; (d62b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6236:	681a      	ldr	r2, [r3, #0]
   d6238:	07d2      	lsls	r2, r2, #31
   d623a:	bf5c      	itt	pl
   d623c:	2201      	movpl	r2, #1
   d623e:	601a      	strpl	r2, [r3, #0]
   d6240:	4b1e      	ldr	r3, [pc, #120]	; (d62bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6242:	681a      	ldr	r2, [r3, #0]
   d6244:	07d0      	lsls	r0, r2, #31
   d6246:	bf5c      	itt	pl
   d6248:	2201      	movpl	r2, #1
   d624a:	601a      	strpl	r2, [r3, #0]
   d624c:	4b1c      	ldr	r3, [pc, #112]	; (d62c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d624e:	681a      	ldr	r2, [r3, #0]
   d6250:	07d1      	lsls	r1, r2, #31
   d6252:	bf5c      	itt	pl
   d6254:	2201      	movpl	r2, #1
   d6256:	601a      	strpl	r2, [r3, #0]
   d6258:	4b1a      	ldr	r3, [pc, #104]	; (d62c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d625a:	681a      	ldr	r2, [r3, #0]
   d625c:	07d2      	lsls	r2, r2, #31
   d625e:	bf5c      	itt	pl
   d6260:	2201      	movpl	r2, #1
   d6262:	601a      	strpl	r2, [r3, #0]
   d6264:	4b18      	ldr	r3, [pc, #96]	; (d62c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6266:	681a      	ldr	r2, [r3, #0]
   d6268:	07d0      	lsls	r0, r2, #31
   d626a:	bf5c      	itt	pl
   d626c:	2201      	movpl	r2, #1
   d626e:	601a      	strpl	r2, [r3, #0]
   d6270:	4b16      	ldr	r3, [pc, #88]	; (d62cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6272:	681a      	ldr	r2, [r3, #0]
   d6274:	07d1      	lsls	r1, r2, #31
   d6276:	bf5c      	itt	pl
   d6278:	2201      	movpl	r2, #1
   d627a:	601a      	strpl	r2, [r3, #0]
   d627c:	4b14      	ldr	r3, [pc, #80]	; (d62d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d627e:	681a      	ldr	r2, [r3, #0]
   d6280:	07d2      	lsls	r2, r2, #31
   d6282:	bf5c      	itt	pl
   d6284:	2201      	movpl	r2, #1
   d6286:	601a      	strpl	r2, [r3, #0]
   d6288:	4b12      	ldr	r3, [pc, #72]	; (d62d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d628a:	681a      	ldr	r2, [r3, #0]
   d628c:	07d0      	lsls	r0, r2, #31
   d628e:	bf5c      	itt	pl
   d6290:	2201      	movpl	r2, #1
   d6292:	601a      	strpl	r2, [r3, #0]
   d6294:	4b10      	ldr	r3, [pc, #64]	; (d62d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6296:	681a      	ldr	r2, [r3, #0]
   d6298:	07d1      	lsls	r1, r2, #31
   d629a:	bf5c      	itt	pl
   d629c:	2201      	movpl	r2, #1
   d629e:	601a      	strpl	r2, [r3, #0]
   d62a0:	4b0e      	ldr	r3, [pc, #56]	; (d62dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d62a2:	681a      	ldr	r2, [r3, #0]
   d62a4:	07d2      	lsls	r2, r2, #31
   d62a6:	bf5c      	itt	pl
   d62a8:	2201      	movpl	r2, #1
   d62aa:	601a      	strpl	r2, [r3, #0]
   d62ac:	4770      	bx	lr
   d62ae:	bf00      	nop
   d62b0:	2003e774 	.word	0x2003e774
   d62b4:	2003e770 	.word	0x2003e770
   d62b8:	2003e76c 	.word	0x2003e76c
   d62bc:	2003e768 	.word	0x2003e768
   d62c0:	2003e764 	.word	0x2003e764
   d62c4:	2003e760 	.word	0x2003e760
   d62c8:	2003e75c 	.word	0x2003e75c
   d62cc:	2003e758 	.word	0x2003e758
   d62d0:	2003e754 	.word	0x2003e754
   d62d4:	2003e750 	.word	0x2003e750
   d62d8:	2003e74c 	.word	0x2003e74c
   d62dc:	2003e748 	.word	0x2003e748

000d62e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d62e0:	4b24      	ldr	r3, [pc, #144]	; (d6374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d62e2:	681a      	ldr	r2, [r3, #0]
   d62e4:	07d0      	lsls	r0, r2, #31
   d62e6:	bf5c      	itt	pl
   d62e8:	2201      	movpl	r2, #1
   d62ea:	601a      	strpl	r2, [r3, #0]
   d62ec:	4b22      	ldr	r3, [pc, #136]	; (d6378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d62ee:	681a      	ldr	r2, [r3, #0]
   d62f0:	07d1      	lsls	r1, r2, #31
   d62f2:	bf5c      	itt	pl
   d62f4:	2201      	movpl	r2, #1
   d62f6:	601a      	strpl	r2, [r3, #0]
   d62f8:	4b20      	ldr	r3, [pc, #128]	; (d637c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d62fa:	681a      	ldr	r2, [r3, #0]
   d62fc:	07d2      	lsls	r2, r2, #31
   d62fe:	bf5c      	itt	pl
   d6300:	2201      	movpl	r2, #1
   d6302:	601a      	strpl	r2, [r3, #0]
   d6304:	4b1e      	ldr	r3, [pc, #120]	; (d6380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6306:	681a      	ldr	r2, [r3, #0]
   d6308:	07d0      	lsls	r0, r2, #31
   d630a:	bf5c      	itt	pl
   d630c:	2201      	movpl	r2, #1
   d630e:	601a      	strpl	r2, [r3, #0]
   d6310:	4b1c      	ldr	r3, [pc, #112]	; (d6384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6312:	681a      	ldr	r2, [r3, #0]
   d6314:	07d1      	lsls	r1, r2, #31
   d6316:	bf5c      	itt	pl
   d6318:	2201      	movpl	r2, #1
   d631a:	601a      	strpl	r2, [r3, #0]
   d631c:	4b1a      	ldr	r3, [pc, #104]	; (d6388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d631e:	681a      	ldr	r2, [r3, #0]
   d6320:	07d2      	lsls	r2, r2, #31
   d6322:	bf5c      	itt	pl
   d6324:	2201      	movpl	r2, #1
   d6326:	601a      	strpl	r2, [r3, #0]
   d6328:	4b18      	ldr	r3, [pc, #96]	; (d638c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d632a:	681a      	ldr	r2, [r3, #0]
   d632c:	07d0      	lsls	r0, r2, #31
   d632e:	bf5c      	itt	pl
   d6330:	2201      	movpl	r2, #1
   d6332:	601a      	strpl	r2, [r3, #0]
   d6334:	4b16      	ldr	r3, [pc, #88]	; (d6390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6336:	681a      	ldr	r2, [r3, #0]
   d6338:	07d1      	lsls	r1, r2, #31
   d633a:	bf5c      	itt	pl
   d633c:	2201      	movpl	r2, #1
   d633e:	601a      	strpl	r2, [r3, #0]
   d6340:	4b14      	ldr	r3, [pc, #80]	; (d6394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6342:	681a      	ldr	r2, [r3, #0]
   d6344:	07d2      	lsls	r2, r2, #31
   d6346:	bf5c      	itt	pl
   d6348:	2201      	movpl	r2, #1
   d634a:	601a      	strpl	r2, [r3, #0]
   d634c:	4b12      	ldr	r3, [pc, #72]	; (d6398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d634e:	681a      	ldr	r2, [r3, #0]
   d6350:	07d0      	lsls	r0, r2, #31
   d6352:	bf5c      	itt	pl
   d6354:	2201      	movpl	r2, #1
   d6356:	601a      	strpl	r2, [r3, #0]
   d6358:	4b10      	ldr	r3, [pc, #64]	; (d639c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d635a:	681a      	ldr	r2, [r3, #0]
   d635c:	07d1      	lsls	r1, r2, #31
   d635e:	bf5c      	itt	pl
   d6360:	2201      	movpl	r2, #1
   d6362:	601a      	strpl	r2, [r3, #0]
   d6364:	4b0e      	ldr	r3, [pc, #56]	; (d63a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6366:	681a      	ldr	r2, [r3, #0]
   d6368:	07d2      	lsls	r2, r2, #31
   d636a:	bf5c      	itt	pl
   d636c:	2201      	movpl	r2, #1
   d636e:	601a      	strpl	r2, [r3, #0]
   d6370:	4770      	bx	lr
   d6372:	bf00      	nop
   d6374:	2003e7a4 	.word	0x2003e7a4
   d6378:	2003e7a0 	.word	0x2003e7a0
   d637c:	2003e79c 	.word	0x2003e79c
   d6380:	2003e798 	.word	0x2003e798
   d6384:	2003e794 	.word	0x2003e794
   d6388:	2003e790 	.word	0x2003e790
   d638c:	2003e78c 	.word	0x2003e78c
   d6390:	2003e788 	.word	0x2003e788
   d6394:	2003e784 	.word	0x2003e784
   d6398:	2003e780 	.word	0x2003e780
   d639c:	2003e77c 	.word	0x2003e77c
   d63a0:	2003e778 	.word	0x2003e778

000d63a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d63a4:	4b18      	ldr	r3, [pc, #96]	; (d6408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d63a6:	681a      	ldr	r2, [r3, #0]
   d63a8:	07d1      	lsls	r1, r2, #31
   d63aa:	bf5c      	itt	pl
   d63ac:	2201      	movpl	r2, #1
   d63ae:	601a      	strpl	r2, [r3, #0]
   d63b0:	4b16      	ldr	r3, [pc, #88]	; (d640c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d63b2:	681a      	ldr	r2, [r3, #0]
   d63b4:	07d2      	lsls	r2, r2, #31
   d63b6:	bf5c      	itt	pl
   d63b8:	2201      	movpl	r2, #1
   d63ba:	601a      	strpl	r2, [r3, #0]
   d63bc:	4b14      	ldr	r3, [pc, #80]	; (d6410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d63be:	681a      	ldr	r2, [r3, #0]
   d63c0:	07d0      	lsls	r0, r2, #31
   d63c2:	bf5c      	itt	pl
   d63c4:	2201      	movpl	r2, #1
   d63c6:	601a      	strpl	r2, [r3, #0]
   d63c8:	4b12      	ldr	r3, [pc, #72]	; (d6414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d63ca:	681a      	ldr	r2, [r3, #0]
   d63cc:	07d1      	lsls	r1, r2, #31
   d63ce:	bf5c      	itt	pl
   d63d0:	2201      	movpl	r2, #1
   d63d2:	601a      	strpl	r2, [r3, #0]
   d63d4:	4b10      	ldr	r3, [pc, #64]	; (d6418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d63d6:	681a      	ldr	r2, [r3, #0]
   d63d8:	07d2      	lsls	r2, r2, #31
   d63da:	bf5c      	itt	pl
   d63dc:	2201      	movpl	r2, #1
   d63de:	601a      	strpl	r2, [r3, #0]
   d63e0:	4b0e      	ldr	r3, [pc, #56]	; (d641c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63e2:	681a      	ldr	r2, [r3, #0]
   d63e4:	07d0      	lsls	r0, r2, #31
   d63e6:	bf5c      	itt	pl
   d63e8:	2201      	movpl	r2, #1
   d63ea:	601a      	strpl	r2, [r3, #0]
   d63ec:	4b0c      	ldr	r3, [pc, #48]	; (d6420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63ee:	681a      	ldr	r2, [r3, #0]
   d63f0:	07d1      	lsls	r1, r2, #31
   d63f2:	bf5c      	itt	pl
   d63f4:	2201      	movpl	r2, #1
   d63f6:	601a      	strpl	r2, [r3, #0]
   d63f8:	4b0a      	ldr	r3, [pc, #40]	; (d6424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63fa:	681a      	ldr	r2, [r3, #0]
   d63fc:	07d2      	lsls	r2, r2, #31
   d63fe:	bf5c      	itt	pl
   d6400:	2201      	movpl	r2, #1
   d6402:	601a      	strpl	r2, [r3, #0]
   d6404:	4770      	bx	lr
   d6406:	bf00      	nop
   d6408:	2003e7c4 	.word	0x2003e7c4
   d640c:	2003e7c0 	.word	0x2003e7c0
   d6410:	2003e7bc 	.word	0x2003e7bc
   d6414:	2003e7b8 	.word	0x2003e7b8
   d6418:	2003e7b4 	.word	0x2003e7b4
   d641c:	2003e7b0 	.word	0x2003e7b0
   d6420:	2003e7ac 	.word	0x2003e7ac
   d6424:	2003e7a8 	.word	0x2003e7a8

000d6428 <asctime>:
   d6428:	4b09      	ldr	r3, [pc, #36]	; (d6450 <asctime+0x28>)
   d642a:	b570      	push	{r4, r5, r6, lr}
   d642c:	681c      	ldr	r4, [r3, #0]
   d642e:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d6430:	4606      	mov	r6, r0
   d6432:	b93d      	cbnz	r5, d6444 <asctime+0x1c>
   d6434:	201a      	movs	r0, #26
   d6436:	f7fe ff11 	bl	d525c <malloc>
   d643a:	221a      	movs	r2, #26
   d643c:	6420      	str	r0, [r4, #64]	; 0x40
   d643e:	4629      	mov	r1, r5
   d6440:	f000 f93f 	bl	d66c2 <memset>
   d6444:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d6446:	4630      	mov	r0, r6
   d6448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d644c:	f000 b802 	b.w	d6454 <asctime_r>
   d6450:	2003e328 	.word	0x2003e328

000d6454 <asctime_r>:
   d6454:	b510      	push	{r4, lr}
   d6456:	460c      	mov	r4, r1
   d6458:	6941      	ldr	r1, [r0, #20]
   d645a:	6903      	ldr	r3, [r0, #16]
   d645c:	6982      	ldr	r2, [r0, #24]
   d645e:	b086      	sub	sp, #24
   d6460:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d6464:	9104      	str	r1, [sp, #16]
   d6466:	6801      	ldr	r1, [r0, #0]
   d6468:	9103      	str	r1, [sp, #12]
   d646a:	6841      	ldr	r1, [r0, #4]
   d646c:	9102      	str	r1, [sp, #8]
   d646e:	6881      	ldr	r1, [r0, #8]
   d6470:	9101      	str	r1, [sp, #4]
   d6472:	68c1      	ldr	r1, [r0, #12]
   d6474:	9100      	str	r1, [sp, #0]
   d6476:	4907      	ldr	r1, [pc, #28]	; (d6494 <asctime_r+0x40>)
   d6478:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d647c:	440b      	add	r3, r1
   d647e:	4906      	ldr	r1, [pc, #24]	; (d6498 <asctime_r+0x44>)
   d6480:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d6484:	440a      	add	r2, r1
   d6486:	4620      	mov	r0, r4
   d6488:	4904      	ldr	r1, [pc, #16]	; (d649c <asctime_r+0x48>)
   d648a:	f7fe feff 	bl	d528c <siprintf>
   d648e:	4620      	mov	r0, r4
   d6490:	b006      	add	sp, #24
   d6492:	bd10      	pop	{r4, pc}
   d6494:	000d77cd 	.word	0x000d77cd
   d6498:	000d77b8 	.word	0x000d77b8
   d649c:	000d77f1 	.word	0x000d77f1

000d64a0 <__cxa_atexit>:
   d64a0:	b510      	push	{r4, lr}
   d64a2:	4c05      	ldr	r4, [pc, #20]	; (d64b8 <__cxa_atexit+0x18>)
   d64a4:	4613      	mov	r3, r2
   d64a6:	b12c      	cbz	r4, d64b4 <__cxa_atexit+0x14>
   d64a8:	460a      	mov	r2, r1
   d64aa:	4601      	mov	r1, r0
   d64ac:	2002      	movs	r0, #2
   d64ae:	f3af 8000 	nop.w
   d64b2:	bd10      	pop	{r4, pc}
   d64b4:	4620      	mov	r0, r4
   d64b6:	bd10      	pop	{r4, pc}
   d64b8:	00000000 	.word	0x00000000

000d64bc <localtime>:
   d64bc:	b538      	push	{r3, r4, r5, lr}
   d64be:	4b07      	ldr	r3, [pc, #28]	; (d64dc <localtime+0x20>)
   d64c0:	681c      	ldr	r4, [r3, #0]
   d64c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d64c4:	4605      	mov	r5, r0
   d64c6:	b91b      	cbnz	r3, d64d0 <localtime+0x14>
   d64c8:	2024      	movs	r0, #36	; 0x24
   d64ca:	f7fe fec7 	bl	d525c <malloc>
   d64ce:	63e0      	str	r0, [r4, #60]	; 0x3c
   d64d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d64d2:	4628      	mov	r0, r5
   d64d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d64d8:	f000 b802 	b.w	d64e0 <localtime_r>
   d64dc:	2003e328 	.word	0x2003e328

000d64e0 <localtime_r>:
   d64e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d64e4:	460c      	mov	r4, r1
   d64e6:	4680      	mov	r8, r0
   d64e8:	f000 fc94 	bl	d6e14 <__gettzinfo>
   d64ec:	4621      	mov	r1, r4
   d64ee:	4607      	mov	r7, r0
   d64f0:	4640      	mov	r0, r8
   d64f2:	f000 fc93 	bl	d6e1c <gmtime_r>
   d64f6:	6946      	ldr	r6, [r0, #20]
   d64f8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d64fc:	07b3      	lsls	r3, r6, #30
   d64fe:	4604      	mov	r4, r0
   d6500:	d105      	bne.n	d650e <localtime_r+0x2e>
   d6502:	2264      	movs	r2, #100	; 0x64
   d6504:	fb96 f3f2 	sdiv	r3, r6, r2
   d6508:	fb02 6313 	mls	r3, r2, r3, r6
   d650c:	b94b      	cbnz	r3, d6522 <localtime_r+0x42>
   d650e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d6512:	fb96 f3f5 	sdiv	r3, r6, r5
   d6516:	fb05 6513 	mls	r5, r5, r3, r6
   d651a:	fab5 f385 	clz	r3, r5
   d651e:	095b      	lsrs	r3, r3, #5
   d6520:	e000      	b.n	d6524 <localtime_r+0x44>
   d6522:	2301      	movs	r3, #1
   d6524:	4a5f      	ldr	r2, [pc, #380]	; (d66a4 <localtime_r+0x1c4>)
   d6526:	2530      	movs	r5, #48	; 0x30
   d6528:	fb05 2503 	mla	r5, r5, r3, r2
   d652c:	f000 faa6 	bl	d6a7c <__tz_lock>
   d6530:	f000 faa6 	bl	d6a80 <_tzset_unlocked>
   d6534:	4b5c      	ldr	r3, [pc, #368]	; (d66a8 <localtime_r+0x1c8>)
   d6536:	681b      	ldr	r3, [r3, #0]
   d6538:	b1f3      	cbz	r3, d6578 <localtime_r+0x98>
   d653a:	687b      	ldr	r3, [r7, #4]
   d653c:	429e      	cmp	r6, r3
   d653e:	d105      	bne.n	d654c <localtime_r+0x6c>
   d6540:	6839      	ldr	r1, [r7, #0]
   d6542:	f8d8 3000 	ldr.w	r3, [r8]
   d6546:	69fa      	ldr	r2, [r7, #28]
   d6548:	b941      	cbnz	r1, d655c <localtime_r+0x7c>
   d654a:	e00a      	b.n	d6562 <localtime_r+0x82>
   d654c:	4630      	mov	r0, r6
   d654e:	f000 f9ed 	bl	d692c <__tzcalc_limits>
   d6552:	2800      	cmp	r0, #0
   d6554:	d1f4      	bne.n	d6540 <localtime_r+0x60>
   d6556:	f04f 33ff 	mov.w	r3, #4294967295
   d655a:	e00d      	b.n	d6578 <localtime_r+0x98>
   d655c:	4293      	cmp	r3, r2
   d655e:	db08      	blt.n	d6572 <localtime_r+0x92>
   d6560:	e001      	b.n	d6566 <localtime_r+0x86>
   d6562:	4293      	cmp	r3, r2
   d6564:	da07      	bge.n	d6576 <localtime_r+0x96>
   d6566:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6568:	4293      	cmp	r3, r2
   d656a:	bfac      	ite	ge
   d656c:	2300      	movge	r3, #0
   d656e:	2301      	movlt	r3, #1
   d6570:	e002      	b.n	d6578 <localtime_r+0x98>
   d6572:	2300      	movs	r3, #0
   d6574:	e000      	b.n	d6578 <localtime_r+0x98>
   d6576:	2301      	movs	r3, #1
   d6578:	6223      	str	r3, [r4, #32]
   d657a:	6a23      	ldr	r3, [r4, #32]
   d657c:	2b01      	cmp	r3, #1
   d657e:	bf0c      	ite	eq
   d6580:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d6582:	6a39      	ldrne	r1, [r7, #32]
   d6584:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d6588:	203c      	movs	r0, #60	; 0x3c
   d658a:	fb91 f6f3 	sdiv	r6, r1, r3
   d658e:	fb03 1316 	mls	r3, r3, r6, r1
   d6592:	6861      	ldr	r1, [r4, #4]
   d6594:	fb93 f2f0 	sdiv	r2, r3, r0
   d6598:	fb00 3012 	mls	r0, r0, r2, r3
   d659c:	6823      	ldr	r3, [r4, #0]
   d659e:	1a89      	subs	r1, r1, r2
   d65a0:	68a2      	ldr	r2, [r4, #8]
   d65a2:	6061      	str	r1, [r4, #4]
   d65a4:	1a1b      	subs	r3, r3, r0
   d65a6:	1b92      	subs	r2, r2, r6
   d65a8:	2b3b      	cmp	r3, #59	; 0x3b
   d65aa:	6023      	str	r3, [r4, #0]
   d65ac:	60a2      	str	r2, [r4, #8]
   d65ae:	dd03      	ble.n	d65b8 <localtime_r+0xd8>
   d65b0:	3101      	adds	r1, #1
   d65b2:	6061      	str	r1, [r4, #4]
   d65b4:	3b3c      	subs	r3, #60	; 0x3c
   d65b6:	e004      	b.n	d65c2 <localtime_r+0xe2>
   d65b8:	2b00      	cmp	r3, #0
   d65ba:	da03      	bge.n	d65c4 <localtime_r+0xe4>
   d65bc:	3901      	subs	r1, #1
   d65be:	6061      	str	r1, [r4, #4]
   d65c0:	333c      	adds	r3, #60	; 0x3c
   d65c2:	6023      	str	r3, [r4, #0]
   d65c4:	6863      	ldr	r3, [r4, #4]
   d65c6:	2b3b      	cmp	r3, #59	; 0x3b
   d65c8:	dd03      	ble.n	d65d2 <localtime_r+0xf2>
   d65ca:	3201      	adds	r2, #1
   d65cc:	60a2      	str	r2, [r4, #8]
   d65ce:	3b3c      	subs	r3, #60	; 0x3c
   d65d0:	e004      	b.n	d65dc <localtime_r+0xfc>
   d65d2:	2b00      	cmp	r3, #0
   d65d4:	da03      	bge.n	d65de <localtime_r+0xfe>
   d65d6:	3a01      	subs	r2, #1
   d65d8:	60a2      	str	r2, [r4, #8]
   d65da:	333c      	adds	r3, #60	; 0x3c
   d65dc:	6063      	str	r3, [r4, #4]
   d65de:	68a3      	ldr	r3, [r4, #8]
   d65e0:	2b17      	cmp	r3, #23
   d65e2:	dd22      	ble.n	d662a <localtime_r+0x14a>
   d65e4:	69e2      	ldr	r2, [r4, #28]
   d65e6:	3201      	adds	r2, #1
   d65e8:	61e2      	str	r2, [r4, #28]
   d65ea:	69a2      	ldr	r2, [r4, #24]
   d65ec:	3201      	adds	r2, #1
   d65ee:	2a06      	cmp	r2, #6
   d65f0:	bfc8      	it	gt
   d65f2:	2200      	movgt	r2, #0
   d65f4:	61a2      	str	r2, [r4, #24]
   d65f6:	68e2      	ldr	r2, [r4, #12]
   d65f8:	3b18      	subs	r3, #24
   d65fa:	3201      	adds	r2, #1
   d65fc:	60a3      	str	r3, [r4, #8]
   d65fe:	6923      	ldr	r3, [r4, #16]
   d6600:	60e2      	str	r2, [r4, #12]
   d6602:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d6606:	428a      	cmp	r2, r1
   d6608:	dd46      	ble.n	d6698 <localtime_r+0x1b8>
   d660a:	3301      	adds	r3, #1
   d660c:	2b0c      	cmp	r3, #12
   d660e:	bf0c      	ite	eq
   d6610:	6963      	ldreq	r3, [r4, #20]
   d6612:	6123      	strne	r3, [r4, #16]
   d6614:	eba2 0201 	sub.w	r2, r2, r1
   d6618:	60e2      	str	r2, [r4, #12]
   d661a:	bf01      	itttt	eq
   d661c:	3301      	addeq	r3, #1
   d661e:	2200      	moveq	r2, #0
   d6620:	6122      	streq	r2, [r4, #16]
   d6622:	6163      	streq	r3, [r4, #20]
   d6624:	bf08      	it	eq
   d6626:	61e2      	streq	r2, [r4, #28]
   d6628:	e036      	b.n	d6698 <localtime_r+0x1b8>
   d662a:	2b00      	cmp	r3, #0
   d662c:	da34      	bge.n	d6698 <localtime_r+0x1b8>
   d662e:	69e2      	ldr	r2, [r4, #28]
   d6630:	3a01      	subs	r2, #1
   d6632:	61e2      	str	r2, [r4, #28]
   d6634:	69a2      	ldr	r2, [r4, #24]
   d6636:	3a01      	subs	r2, #1
   d6638:	bf48      	it	mi
   d663a:	2206      	movmi	r2, #6
   d663c:	61a2      	str	r2, [r4, #24]
   d663e:	68e2      	ldr	r2, [r4, #12]
   d6640:	3318      	adds	r3, #24
   d6642:	3a01      	subs	r2, #1
   d6644:	60e2      	str	r2, [r4, #12]
   d6646:	60a3      	str	r3, [r4, #8]
   d6648:	bb32      	cbnz	r2, d6698 <localtime_r+0x1b8>
   d664a:	6923      	ldr	r3, [r4, #16]
   d664c:	3b01      	subs	r3, #1
   d664e:	d401      	bmi.n	d6654 <localtime_r+0x174>
   d6650:	6123      	str	r3, [r4, #16]
   d6652:	e01d      	b.n	d6690 <localtime_r+0x1b0>
   d6654:	230b      	movs	r3, #11
   d6656:	6123      	str	r3, [r4, #16]
   d6658:	6963      	ldr	r3, [r4, #20]
   d665a:	1e5a      	subs	r2, r3, #1
   d665c:	f012 0f03 	tst.w	r2, #3
   d6660:	6162      	str	r2, [r4, #20]
   d6662:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d6666:	d105      	bne.n	d6674 <localtime_r+0x194>
   d6668:	2164      	movs	r1, #100	; 0x64
   d666a:	fb93 f2f1 	sdiv	r2, r3, r1
   d666e:	fb01 3212 	mls	r2, r1, r2, r3
   d6672:	b94a      	cbnz	r2, d6688 <localtime_r+0x1a8>
   d6674:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6678:	fb93 f2f1 	sdiv	r2, r3, r1
   d667c:	fb01 3312 	mls	r3, r1, r2, r3
   d6680:	fab3 f383 	clz	r3, r3
   d6684:	095b      	lsrs	r3, r3, #5
   d6686:	e000      	b.n	d668a <localtime_r+0x1aa>
   d6688:	2301      	movs	r3, #1
   d668a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d668e:	61e3      	str	r3, [r4, #28]
   d6690:	6923      	ldr	r3, [r4, #16]
   d6692:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d6696:	60e3      	str	r3, [r4, #12]
   d6698:	f000 f9f1 	bl	d6a7e <__tz_unlock>
   d669c:	4620      	mov	r0, r4
   d669e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d66a2:	bf00      	nop
   d66a4:	000d7978 	.word	0x000d7978
   d66a8:	2003e7e4 	.word	0x2003e7e4

000d66ac <memcpy>:
   d66ac:	b510      	push	{r4, lr}
   d66ae:	1e43      	subs	r3, r0, #1
   d66b0:	440a      	add	r2, r1
   d66b2:	4291      	cmp	r1, r2
   d66b4:	d004      	beq.n	d66c0 <memcpy+0x14>
   d66b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d66ba:	f803 4f01 	strb.w	r4, [r3, #1]!
   d66be:	e7f8      	b.n	d66b2 <memcpy+0x6>
   d66c0:	bd10      	pop	{r4, pc}

000d66c2 <memset>:
   d66c2:	4402      	add	r2, r0
   d66c4:	4603      	mov	r3, r0
   d66c6:	4293      	cmp	r3, r2
   d66c8:	d002      	beq.n	d66d0 <memset+0xe>
   d66ca:	f803 1b01 	strb.w	r1, [r3], #1
   d66ce:	e7fa      	b.n	d66c6 <memset+0x4>
   d66d0:	4770      	bx	lr
	...

000d66d4 <srand>:
   d66d4:	b538      	push	{r3, r4, r5, lr}
   d66d6:	4b12      	ldr	r3, [pc, #72]	; (d6720 <srand+0x4c>)
   d66d8:	681c      	ldr	r4, [r3, #0]
   d66da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d66dc:	4605      	mov	r5, r0
   d66de:	b9d3      	cbnz	r3, d6716 <srand+0x42>
   d66e0:	2018      	movs	r0, #24
   d66e2:	f7fe fdbb 	bl	d525c <malloc>
   d66e6:	f243 330e 	movw	r3, #13070	; 0x330e
   d66ea:	63a0      	str	r0, [r4, #56]	; 0x38
   d66ec:	8003      	strh	r3, [r0, #0]
   d66ee:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d66f2:	8043      	strh	r3, [r0, #2]
   d66f4:	f241 2334 	movw	r3, #4660	; 0x1234
   d66f8:	8083      	strh	r3, [r0, #4]
   d66fa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d66fe:	80c3      	strh	r3, [r0, #6]
   d6700:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6704:	8103      	strh	r3, [r0, #8]
   d6706:	2305      	movs	r3, #5
   d6708:	8143      	strh	r3, [r0, #10]
   d670a:	230b      	movs	r3, #11
   d670c:	8183      	strh	r3, [r0, #12]
   d670e:	2201      	movs	r2, #1
   d6710:	2300      	movs	r3, #0
   d6712:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6716:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6718:	2200      	movs	r2, #0
   d671a:	611d      	str	r5, [r3, #16]
   d671c:	615a      	str	r2, [r3, #20]
   d671e:	bd38      	pop	{r3, r4, r5, pc}
   d6720:	2003e328 	.word	0x2003e328

000d6724 <rand>:
   d6724:	4b19      	ldr	r3, [pc, #100]	; (d678c <rand+0x68>)
   d6726:	b510      	push	{r4, lr}
   d6728:	681c      	ldr	r4, [r3, #0]
   d672a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d672c:	b9d3      	cbnz	r3, d6764 <rand+0x40>
   d672e:	2018      	movs	r0, #24
   d6730:	f7fe fd94 	bl	d525c <malloc>
   d6734:	f243 330e 	movw	r3, #13070	; 0x330e
   d6738:	63a0      	str	r0, [r4, #56]	; 0x38
   d673a:	8003      	strh	r3, [r0, #0]
   d673c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6740:	8043      	strh	r3, [r0, #2]
   d6742:	f241 2334 	movw	r3, #4660	; 0x1234
   d6746:	8083      	strh	r3, [r0, #4]
   d6748:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d674c:	80c3      	strh	r3, [r0, #6]
   d674e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6752:	8103      	strh	r3, [r0, #8]
   d6754:	2305      	movs	r3, #5
   d6756:	8143      	strh	r3, [r0, #10]
   d6758:	230b      	movs	r3, #11
   d675a:	8183      	strh	r3, [r0, #12]
   d675c:	2201      	movs	r2, #1
   d675e:	2300      	movs	r3, #0
   d6760:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6764:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d6766:	4c0a      	ldr	r4, [pc, #40]	; (d6790 <rand+0x6c>)
   d6768:	690b      	ldr	r3, [r1, #16]
   d676a:	6948      	ldr	r0, [r1, #20]
   d676c:	4a09      	ldr	r2, [pc, #36]	; (d6794 <rand+0x70>)
   d676e:	435c      	muls	r4, r3
   d6770:	fb02 4000 	mla	r0, r2, r0, r4
   d6774:	fba3 2302 	umull	r2, r3, r3, r2
   d6778:	3201      	adds	r2, #1
   d677a:	4403      	add	r3, r0
   d677c:	f143 0300 	adc.w	r3, r3, #0
   d6780:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d6784:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d6788:	bd10      	pop	{r4, pc}
   d678a:	bf00      	nop
   d678c:	2003e328 	.word	0x2003e328
   d6790:	5851f42d 	.word	0x5851f42d
   d6794:	4c957f2d 	.word	0x4c957f2d

000d6798 <strcmp>:
   d6798:	f810 2b01 	ldrb.w	r2, [r0], #1
   d679c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d67a0:	2a01      	cmp	r2, #1
   d67a2:	bf28      	it	cs
   d67a4:	429a      	cmpcs	r2, r3
   d67a6:	d0f7      	beq.n	d6798 <strcmp>
   d67a8:	1ad0      	subs	r0, r2, r3
   d67aa:	4770      	bx	lr

000d67ac <strcpy>:
   d67ac:	4603      	mov	r3, r0
   d67ae:	f811 2b01 	ldrb.w	r2, [r1], #1
   d67b2:	f803 2b01 	strb.w	r2, [r3], #1
   d67b6:	2a00      	cmp	r2, #0
   d67b8:	d1f9      	bne.n	d67ae <strcpy+0x2>
   d67ba:	4770      	bx	lr

000d67bc <strlen>:
   d67bc:	4603      	mov	r3, r0
   d67be:	f813 2b01 	ldrb.w	r2, [r3], #1
   d67c2:	2a00      	cmp	r2, #0
   d67c4:	d1fb      	bne.n	d67be <strlen+0x2>
   d67c6:	1a18      	subs	r0, r3, r0
   d67c8:	3801      	subs	r0, #1
   d67ca:	4770      	bx	lr

000d67cc <strncmp>:
   d67cc:	b530      	push	{r4, r5, lr}
   d67ce:	b182      	cbz	r2, d67f2 <strncmp+0x26>
   d67d0:	1e45      	subs	r5, r0, #1
   d67d2:	3901      	subs	r1, #1
   d67d4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d67d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d67dc:	42a3      	cmp	r3, r4
   d67de:	d106      	bne.n	d67ee <strncmp+0x22>
   d67e0:	43ec      	mvns	r4, r5
   d67e2:	4414      	add	r4, r2
   d67e4:	42e0      	cmn	r0, r4
   d67e6:	d001      	beq.n	d67ec <strncmp+0x20>
   d67e8:	2b00      	cmp	r3, #0
   d67ea:	d1f3      	bne.n	d67d4 <strncmp+0x8>
   d67ec:	461c      	mov	r4, r3
   d67ee:	1b18      	subs	r0, r3, r4
   d67f0:	bd30      	pop	{r4, r5, pc}
   d67f2:	4610      	mov	r0, r2
   d67f4:	bd30      	pop	{r4, r5, pc}

000d67f6 <strncpy>:
   d67f6:	b510      	push	{r4, lr}
   d67f8:	4603      	mov	r3, r0
   d67fa:	b142      	cbz	r2, d680e <strncpy+0x18>
   d67fc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6800:	f803 4b01 	strb.w	r4, [r3], #1
   d6804:	3a01      	subs	r2, #1
   d6806:	2c00      	cmp	r4, #0
   d6808:	d1f7      	bne.n	d67fa <strncpy+0x4>
   d680a:	441a      	add	r2, r3
   d680c:	e000      	b.n	d6810 <strncpy+0x1a>
   d680e:	bd10      	pop	{r4, pc}
   d6810:	4293      	cmp	r3, r2
   d6812:	d002      	beq.n	d681a <strncpy+0x24>
   d6814:	f803 4b01 	strb.w	r4, [r3], #1
   d6818:	e7fa      	b.n	d6810 <strncpy+0x1a>
   d681a:	bd10      	pop	{r4, pc}

000d681c <_strtoul_r>:
   d681c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6820:	4680      	mov	r8, r0
   d6822:	483c      	ldr	r0, [pc, #240]	; (d6914 <_strtoul_r+0xf8>)
   d6824:	f8d0 9000 	ldr.w	r9, [r0]
   d6828:	460e      	mov	r6, r1
   d682a:	4635      	mov	r5, r6
   d682c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6830:	eb09 0004 	add.w	r0, r9, r4
   d6834:	7840      	ldrb	r0, [r0, #1]
   d6836:	f000 0008 	and.w	r0, r0, #8
   d683a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d683e:	b108      	cbz	r0, d6844 <_strtoul_r+0x28>
   d6840:	462e      	mov	r6, r5
   d6842:	e7f2      	b.n	d682a <_strtoul_r+0xe>
   d6844:	2c2d      	cmp	r4, #45	; 0x2d
   d6846:	d103      	bne.n	d6850 <_strtoul_r+0x34>
   d6848:	1cb5      	adds	r5, r6, #2
   d684a:	7874      	ldrb	r4, [r6, #1]
   d684c:	2701      	movs	r7, #1
   d684e:	e003      	b.n	d6858 <_strtoul_r+0x3c>
   d6850:	2c2b      	cmp	r4, #43	; 0x2b
   d6852:	bf04      	itt	eq
   d6854:	7874      	ldrbeq	r4, [r6, #1]
   d6856:	1cb5      	addeq	r5, r6, #2
   d6858:	b113      	cbz	r3, d6860 <_strtoul_r+0x44>
   d685a:	2b10      	cmp	r3, #16
   d685c:	d10a      	bne.n	d6874 <_strtoul_r+0x58>
   d685e:	e053      	b.n	d6908 <_strtoul_r+0xec>
   d6860:	2c30      	cmp	r4, #48	; 0x30
   d6862:	d14f      	bne.n	d6904 <_strtoul_r+0xe8>
   d6864:	7828      	ldrb	r0, [r5, #0]
   d6866:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d686a:	2858      	cmp	r0, #88	; 0x58
   d686c:	d145      	bne.n	d68fa <_strtoul_r+0xde>
   d686e:	786c      	ldrb	r4, [r5, #1]
   d6870:	2310      	movs	r3, #16
   d6872:	3502      	adds	r5, #2
   d6874:	f04f 3cff 	mov.w	ip, #4294967295
   d6878:	2600      	movs	r6, #0
   d687a:	fbbc fcf3 	udiv	ip, ip, r3
   d687e:	fb03 fa0c 	mul.w	sl, r3, ip
   d6882:	ea6f 0a0a 	mvn.w	sl, sl
   d6886:	4630      	mov	r0, r6
   d6888:	eb09 0e04 	add.w	lr, r9, r4
   d688c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6890:	f01e 0f04 	tst.w	lr, #4
   d6894:	d001      	beq.n	d689a <_strtoul_r+0x7e>
   d6896:	3c30      	subs	r4, #48	; 0x30
   d6898:	e00b      	b.n	d68b2 <_strtoul_r+0x96>
   d689a:	f01e 0e03 	ands.w	lr, lr, #3
   d689e:	d01a      	beq.n	d68d6 <_strtoul_r+0xba>
   d68a0:	f1be 0f01 	cmp.w	lr, #1
   d68a4:	bf0c      	ite	eq
   d68a6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d68aa:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d68ae:	ebce 0404 	rsb	r4, lr, r4
   d68b2:	42a3      	cmp	r3, r4
   d68b4:	dd0f      	ble.n	d68d6 <_strtoul_r+0xba>
   d68b6:	2e00      	cmp	r6, #0
   d68b8:	db08      	blt.n	d68cc <_strtoul_r+0xb0>
   d68ba:	4560      	cmp	r0, ip
   d68bc:	d806      	bhi.n	d68cc <_strtoul_r+0xb0>
   d68be:	d101      	bne.n	d68c4 <_strtoul_r+0xa8>
   d68c0:	4554      	cmp	r4, sl
   d68c2:	dc03      	bgt.n	d68cc <_strtoul_r+0xb0>
   d68c4:	fb03 4000 	mla	r0, r3, r0, r4
   d68c8:	2601      	movs	r6, #1
   d68ca:	e001      	b.n	d68d0 <_strtoul_r+0xb4>
   d68cc:	f04f 36ff 	mov.w	r6, #4294967295
   d68d0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d68d4:	e7d8      	b.n	d6888 <_strtoul_r+0x6c>
   d68d6:	2e00      	cmp	r6, #0
   d68d8:	da07      	bge.n	d68ea <_strtoul_r+0xce>
   d68da:	2322      	movs	r3, #34	; 0x22
   d68dc:	f8c8 3000 	str.w	r3, [r8]
   d68e0:	f04f 30ff 	mov.w	r0, #4294967295
   d68e4:	b92a      	cbnz	r2, d68f2 <_strtoul_r+0xd6>
   d68e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68ea:	b107      	cbz	r7, d68ee <_strtoul_r+0xd2>
   d68ec:	4240      	negs	r0, r0
   d68ee:	b172      	cbz	r2, d690e <_strtoul_r+0xf2>
   d68f0:	b106      	cbz	r6, d68f4 <_strtoul_r+0xd8>
   d68f2:	1e69      	subs	r1, r5, #1
   d68f4:	6011      	str	r1, [r2, #0]
   d68f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68fa:	2430      	movs	r4, #48	; 0x30
   d68fc:	2b00      	cmp	r3, #0
   d68fe:	d1b9      	bne.n	d6874 <_strtoul_r+0x58>
   d6900:	2308      	movs	r3, #8
   d6902:	e7b7      	b.n	d6874 <_strtoul_r+0x58>
   d6904:	230a      	movs	r3, #10
   d6906:	e7b5      	b.n	d6874 <_strtoul_r+0x58>
   d6908:	2c30      	cmp	r4, #48	; 0x30
   d690a:	d0ab      	beq.n	d6864 <_strtoul_r+0x48>
   d690c:	e7b2      	b.n	d6874 <_strtoul_r+0x58>
   d690e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6912:	bf00      	nop
   d6914:	2003e2c4 	.word	0x2003e2c4

000d6918 <strtoul>:
   d6918:	4613      	mov	r3, r2
   d691a:	460a      	mov	r2, r1
   d691c:	4601      	mov	r1, r0
   d691e:	4802      	ldr	r0, [pc, #8]	; (d6928 <strtoul+0x10>)
   d6920:	6800      	ldr	r0, [r0, #0]
   d6922:	f7ff bf7b 	b.w	d681c <_strtoul_r>
   d6926:	bf00      	nop
   d6928:	2003e328 	.word	0x2003e328

000d692c <__tzcalc_limits>:
   d692c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6930:	4604      	mov	r4, r0
   d6932:	f000 fa6f 	bl	d6e14 <__gettzinfo>
   d6936:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d693a:	429c      	cmp	r4, r3
   d693c:	f340 8096 	ble.w	d6a6c <__tzcalc_limits+0x140>
   d6940:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d6944:	18e3      	adds	r3, r4, r3
   d6946:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d694a:	109b      	asrs	r3, r3, #2
   d694c:	f240 156d 	movw	r5, #365	; 0x16d
   d6950:	fb05 3502 	mla	r5, r5, r2, r3
   d6954:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d6958:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d695c:	fb92 f3f3 	sdiv	r3, r2, r3
   d6960:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d6964:	442b      	add	r3, r5
   d6966:	18a5      	adds	r5, r4, r2
   d6968:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d696c:	fb95 f5f2 	sdiv	r5, r5, r2
   d6970:	441d      	add	r5, r3
   d6972:	2364      	movs	r3, #100	; 0x64
   d6974:	fb94 f7f2 	sdiv	r7, r4, r2
   d6978:	fb94 f6f3 	sdiv	r6, r4, r3
   d697c:	fb02 4717 	mls	r7, r2, r7, r4
   d6980:	fb03 4616 	mls	r6, r3, r6, r4
   d6984:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d6988:	fab7 fe87 	clz	lr, r7
   d698c:	9301      	str	r3, [sp, #4]
   d698e:	f004 0303 	and.w	r3, r4, #3
   d6992:	6044      	str	r4, [r0, #4]
   d6994:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d6998:	4601      	mov	r1, r0
   d699a:	9300      	str	r3, [sp, #0]
   d699c:	f04f 0c07 	mov.w	ip, #7
   d69a0:	7a0b      	ldrb	r3, [r1, #8]
   d69a2:	2b4a      	cmp	r3, #74	; 0x4a
   d69a4:	d10e      	bne.n	d69c4 <__tzcalc_limits+0x98>
   d69a6:	694b      	ldr	r3, [r1, #20]
   d69a8:	9a00      	ldr	r2, [sp, #0]
   d69aa:	18ec      	adds	r4, r5, r3
   d69ac:	b902      	cbnz	r2, d69b0 <__tzcalc_limits+0x84>
   d69ae:	b906      	cbnz	r6, d69b2 <__tzcalc_limits+0x86>
   d69b0:	b927      	cbnz	r7, d69bc <__tzcalc_limits+0x90>
   d69b2:	2b3b      	cmp	r3, #59	; 0x3b
   d69b4:	bfd4      	ite	le
   d69b6:	2300      	movle	r3, #0
   d69b8:	2301      	movgt	r3, #1
   d69ba:	e000      	b.n	d69be <__tzcalc_limits+0x92>
   d69bc:	2300      	movs	r3, #0
   d69be:	4423      	add	r3, r4
   d69c0:	3b01      	subs	r3, #1
   d69c2:	e03f      	b.n	d6a44 <__tzcalc_limits+0x118>
   d69c4:	2b44      	cmp	r3, #68	; 0x44
   d69c6:	d102      	bne.n	d69ce <__tzcalc_limits+0xa2>
   d69c8:	694b      	ldr	r3, [r1, #20]
   d69ca:	442b      	add	r3, r5
   d69cc:	e03a      	b.n	d6a44 <__tzcalc_limits+0x118>
   d69ce:	9b00      	ldr	r3, [sp, #0]
   d69d0:	b92b      	cbnz	r3, d69de <__tzcalc_limits+0xb2>
   d69d2:	2e00      	cmp	r6, #0
   d69d4:	bf0c      	ite	eq
   d69d6:	46f0      	moveq	r8, lr
   d69d8:	f04f 0801 	movne.w	r8, #1
   d69dc:	e000      	b.n	d69e0 <__tzcalc_limits+0xb4>
   d69de:	46f0      	mov	r8, lr
   d69e0:	4b24      	ldr	r3, [pc, #144]	; (d6a74 <__tzcalc_limits+0x148>)
   d69e2:	68cc      	ldr	r4, [r1, #12]
   d69e4:	2230      	movs	r2, #48	; 0x30
   d69e6:	fb02 3808 	mla	r8, r2, r8, r3
   d69ea:	f1a8 0a04 	sub.w	sl, r8, #4
   d69ee:	46a9      	mov	r9, r5
   d69f0:	2301      	movs	r3, #1
   d69f2:	42a3      	cmp	r3, r4
   d69f4:	da04      	bge.n	d6a00 <__tzcalc_limits+0xd4>
   d69f6:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d69fa:	3301      	adds	r3, #1
   d69fc:	44d9      	add	r9, fp
   d69fe:	e7f8      	b.n	d69f2 <__tzcalc_limits+0xc6>
   d6a00:	f109 0304 	add.w	r3, r9, #4
   d6a04:	fb93 fbfc 	sdiv	fp, r3, ip
   d6a08:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d6a0c:	2c01      	cmp	r4, #1
   d6a0e:	ebca 0a03 	rsb	sl, sl, r3
   d6a12:	694b      	ldr	r3, [r1, #20]
   d6a14:	bfb8      	it	lt
   d6a16:	2401      	movlt	r4, #1
   d6a18:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d6a1c:	ebb3 0a0a 	subs.w	sl, r3, sl
   d6a20:	690b      	ldr	r3, [r1, #16]
   d6a22:	f104 34ff 	add.w	r4, r4, #4294967295
   d6a26:	f103 33ff 	add.w	r3, r3, #4294967295
   d6a2a:	bf48      	it	mi
   d6a2c:	f10a 0a07 	addmi.w	sl, sl, #7
   d6a30:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d6a34:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d6a38:	4453      	add	r3, sl
   d6a3a:	42a3      	cmp	r3, r4
   d6a3c:	db01      	blt.n	d6a42 <__tzcalc_limits+0x116>
   d6a3e:	3b07      	subs	r3, #7
   d6a40:	e7fb      	b.n	d6a3a <__tzcalc_limits+0x10e>
   d6a42:	444b      	add	r3, r9
   d6a44:	698c      	ldr	r4, [r1, #24]
   d6a46:	4a0c      	ldr	r2, [pc, #48]	; (d6a78 <__tzcalc_limits+0x14c>)
   d6a48:	fb02 4303 	mla	r3, r2, r3, r4
   d6a4c:	6a0c      	ldr	r4, [r1, #32]
   d6a4e:	4423      	add	r3, r4
   d6a50:	f841 3f1c 	str.w	r3, [r1, #28]!
   d6a54:	9b01      	ldr	r3, [sp, #4]
   d6a56:	4299      	cmp	r1, r3
   d6a58:	d1a2      	bne.n	d69a0 <__tzcalc_limits+0x74>
   d6a5a:	69c3      	ldr	r3, [r0, #28]
   d6a5c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d6a5e:	4293      	cmp	r3, r2
   d6a60:	bfac      	ite	ge
   d6a62:	2300      	movge	r3, #0
   d6a64:	2301      	movlt	r3, #1
   d6a66:	6003      	str	r3, [r0, #0]
   d6a68:	2001      	movs	r0, #1
   d6a6a:	e000      	b.n	d6a6e <__tzcalc_limits+0x142>
   d6a6c:	2000      	movs	r0, #0
   d6a6e:	b003      	add	sp, #12
   d6a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a74:	000d7978 	.word	0x000d7978
   d6a78:	00015180 	.word	0x00015180

000d6a7c <__tz_lock>:
   d6a7c:	4770      	bx	lr

000d6a7e <__tz_unlock>:
   d6a7e:	4770      	bx	lr

000d6a80 <_tzset_unlocked>:
   d6a80:	4b01      	ldr	r3, [pc, #4]	; (d6a88 <_tzset_unlocked+0x8>)
   d6a82:	6818      	ldr	r0, [r3, #0]
   d6a84:	f000 b802 	b.w	d6a8c <_tzset_unlocked_r>
   d6a88:	2003e328 	.word	0x2003e328

000d6a8c <_tzset_unlocked_r>:
   d6a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a90:	b08d      	sub	sp, #52	; 0x34
   d6a92:	4607      	mov	r7, r0
   d6a94:	f000 f9be 	bl	d6e14 <__gettzinfo>
   d6a98:	49b0      	ldr	r1, [pc, #704]	; (d6d5c <_tzset_unlocked_r+0x2d0>)
   d6a9a:	4eb1      	ldr	r6, [pc, #708]	; (d6d60 <_tzset_unlocked_r+0x2d4>)
   d6a9c:	4604      	mov	r4, r0
   d6a9e:	4638      	mov	r0, r7
   d6aa0:	f000 f9b0 	bl	d6e04 <_getenv_r>
   d6aa4:	4605      	mov	r5, r0
   d6aa6:	b960      	cbnz	r0, d6ac2 <_tzset_unlocked_r+0x36>
   d6aa8:	4bae      	ldr	r3, [pc, #696]	; (d6d64 <_tzset_unlocked_r+0x2d8>)
   d6aaa:	4aaf      	ldr	r2, [pc, #700]	; (d6d68 <_tzset_unlocked_r+0x2dc>)
   d6aac:	6018      	str	r0, [r3, #0]
   d6aae:	4baf      	ldr	r3, [pc, #700]	; (d6d6c <_tzset_unlocked_r+0x2e0>)
   d6ab0:	6018      	str	r0, [r3, #0]
   d6ab2:	4baf      	ldr	r3, [pc, #700]	; (d6d70 <_tzset_unlocked_r+0x2e4>)
   d6ab4:	6830      	ldr	r0, [r6, #0]
   d6ab6:	601a      	str	r2, [r3, #0]
   d6ab8:	605a      	str	r2, [r3, #4]
   d6aba:	f7fe fbd7 	bl	d526c <free>
   d6abe:	6035      	str	r5, [r6, #0]
   d6ac0:	e148      	b.n	d6d54 <_tzset_unlocked_r+0x2c8>
   d6ac2:	6831      	ldr	r1, [r6, #0]
   d6ac4:	b979      	cbnz	r1, d6ae6 <_tzset_unlocked_r+0x5a>
   d6ac6:	6830      	ldr	r0, [r6, #0]
   d6ac8:	f7fe fbd0 	bl	d526c <free>
   d6acc:	4628      	mov	r0, r5
   d6ace:	f7ff fe75 	bl	d67bc <strlen>
   d6ad2:	1c41      	adds	r1, r0, #1
   d6ad4:	4638      	mov	r0, r7
   d6ad6:	f7fe fbf1 	bl	d52bc <_malloc_r>
   d6ada:	6030      	str	r0, [r6, #0]
   d6adc:	b148      	cbz	r0, d6af2 <_tzset_unlocked_r+0x66>
   d6ade:	4629      	mov	r1, r5
   d6ae0:	f7ff fe64 	bl	d67ac <strcpy>
   d6ae4:	e005      	b.n	d6af2 <_tzset_unlocked_r+0x66>
   d6ae6:	f7ff fe57 	bl	d6798 <strcmp>
   d6aea:	2800      	cmp	r0, #0
   d6aec:	f000 8132 	beq.w	d6d54 <_tzset_unlocked_r+0x2c8>
   d6af0:	e7e9      	b.n	d6ac6 <_tzset_unlocked_r+0x3a>
   d6af2:	782b      	ldrb	r3, [r5, #0]
   d6af4:	4a9f      	ldr	r2, [pc, #636]	; (d6d74 <_tzset_unlocked_r+0x2e8>)
   d6af6:	49a0      	ldr	r1, [pc, #640]	; (d6d78 <_tzset_unlocked_r+0x2ec>)
   d6af8:	2b3a      	cmp	r3, #58	; 0x3a
   d6afa:	bf08      	it	eq
   d6afc:	3501      	addeq	r5, #1
   d6afe:	ae0a      	add	r6, sp, #40	; 0x28
   d6b00:	4633      	mov	r3, r6
   d6b02:	4628      	mov	r0, r5
   d6b04:	f7fe fbca 	bl	d529c <siscanf>
   d6b08:	2800      	cmp	r0, #0
   d6b0a:	f340 8123 	ble.w	d6d54 <_tzset_unlocked_r+0x2c8>
   d6b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6b10:	18ef      	adds	r7, r5, r3
   d6b12:	5ceb      	ldrb	r3, [r5, r3]
   d6b14:	2b2d      	cmp	r3, #45	; 0x2d
   d6b16:	d103      	bne.n	d6b20 <_tzset_unlocked_r+0x94>
   d6b18:	3701      	adds	r7, #1
   d6b1a:	f04f 35ff 	mov.w	r5, #4294967295
   d6b1e:	e003      	b.n	d6b28 <_tzset_unlocked_r+0x9c>
   d6b20:	2b2b      	cmp	r3, #43	; 0x2b
   d6b22:	bf08      	it	eq
   d6b24:	3701      	addeq	r7, #1
   d6b26:	2501      	movs	r5, #1
   d6b28:	f10d 0a20 	add.w	sl, sp, #32
   d6b2c:	f10d 0b1e 	add.w	fp, sp, #30
   d6b30:	f04f 0800 	mov.w	r8, #0
   d6b34:	9603      	str	r6, [sp, #12]
   d6b36:	f8cd a008 	str.w	sl, [sp, #8]
   d6b3a:	9601      	str	r6, [sp, #4]
   d6b3c:	f8cd b000 	str.w	fp, [sp]
   d6b40:	4633      	mov	r3, r6
   d6b42:	aa07      	add	r2, sp, #28
   d6b44:	498d      	ldr	r1, [pc, #564]	; (d6d7c <_tzset_unlocked_r+0x2f0>)
   d6b46:	f8ad 801e 	strh.w	r8, [sp, #30]
   d6b4a:	4638      	mov	r0, r7
   d6b4c:	f8ad 8020 	strh.w	r8, [sp, #32]
   d6b50:	f7fe fba4 	bl	d529c <siscanf>
   d6b54:	4540      	cmp	r0, r8
   d6b56:	f340 80fd 	ble.w	d6d54 <_tzset_unlocked_r+0x2c8>
   d6b5a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6b5e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6b62:	f8df 9224 	ldr.w	r9, [pc, #548]	; d6d88 <_tzset_unlocked_r+0x2fc>
   d6b66:	213c      	movs	r1, #60	; 0x3c
   d6b68:	fb01 3302 	mla	r3, r1, r2, r3
   d6b6c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6b70:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6b74:	fb01 3302 	mla	r3, r1, r2, r3
   d6b78:	435d      	muls	r5, r3
   d6b7a:	6225      	str	r5, [r4, #32]
   d6b7c:	4d7c      	ldr	r5, [pc, #496]	; (d6d70 <_tzset_unlocked_r+0x2e4>)
   d6b7e:	4b7d      	ldr	r3, [pc, #500]	; (d6d74 <_tzset_unlocked_r+0x2e8>)
   d6b80:	602b      	str	r3, [r5, #0]
   d6b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6b84:	497c      	ldr	r1, [pc, #496]	; (d6d78 <_tzset_unlocked_r+0x2ec>)
   d6b86:	441f      	add	r7, r3
   d6b88:	464a      	mov	r2, r9
   d6b8a:	4633      	mov	r3, r6
   d6b8c:	4638      	mov	r0, r7
   d6b8e:	f7fe fb85 	bl	d529c <siscanf>
   d6b92:	4540      	cmp	r0, r8
   d6b94:	dc08      	bgt.n	d6ba8 <_tzset_unlocked_r+0x11c>
   d6b96:	682b      	ldr	r3, [r5, #0]
   d6b98:	606b      	str	r3, [r5, #4]
   d6b9a:	4b72      	ldr	r3, [pc, #456]	; (d6d64 <_tzset_unlocked_r+0x2d8>)
   d6b9c:	6a22      	ldr	r2, [r4, #32]
   d6b9e:	601a      	str	r2, [r3, #0]
   d6ba0:	4b72      	ldr	r3, [pc, #456]	; (d6d6c <_tzset_unlocked_r+0x2e0>)
   d6ba2:	f8c3 8000 	str.w	r8, [r3]
   d6ba6:	e0d5      	b.n	d6d54 <_tzset_unlocked_r+0x2c8>
   d6ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6baa:	f8c5 9004 	str.w	r9, [r5, #4]
   d6bae:	18fd      	adds	r5, r7, r3
   d6bb0:	5cfb      	ldrb	r3, [r7, r3]
   d6bb2:	2b2d      	cmp	r3, #45	; 0x2d
   d6bb4:	d103      	bne.n	d6bbe <_tzset_unlocked_r+0x132>
   d6bb6:	3501      	adds	r5, #1
   d6bb8:	f04f 37ff 	mov.w	r7, #4294967295
   d6bbc:	e003      	b.n	d6bc6 <_tzset_unlocked_r+0x13a>
   d6bbe:	2b2b      	cmp	r3, #43	; 0x2b
   d6bc0:	bf08      	it	eq
   d6bc2:	3501      	addeq	r5, #1
   d6bc4:	2701      	movs	r7, #1
   d6bc6:	2300      	movs	r3, #0
   d6bc8:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6bcc:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6bd0:	f8ad 3020 	strh.w	r3, [sp, #32]
   d6bd4:	930a      	str	r3, [sp, #40]	; 0x28
   d6bd6:	9603      	str	r6, [sp, #12]
   d6bd8:	f8cd a008 	str.w	sl, [sp, #8]
   d6bdc:	9601      	str	r6, [sp, #4]
   d6bde:	f8cd b000 	str.w	fp, [sp]
   d6be2:	4633      	mov	r3, r6
   d6be4:	aa07      	add	r2, sp, #28
   d6be6:	4965      	ldr	r1, [pc, #404]	; (d6d7c <_tzset_unlocked_r+0x2f0>)
   d6be8:	4628      	mov	r0, r5
   d6bea:	f7fe fb57 	bl	d529c <siscanf>
   d6bee:	2800      	cmp	r0, #0
   d6bf0:	dc04      	bgt.n	d6bfc <_tzset_unlocked_r+0x170>
   d6bf2:	6a23      	ldr	r3, [r4, #32]
   d6bf4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d6bf8:	63e3      	str	r3, [r4, #60]	; 0x3c
   d6bfa:	e00e      	b.n	d6c1a <_tzset_unlocked_r+0x18e>
   d6bfc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6c00:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6c04:	213c      	movs	r1, #60	; 0x3c
   d6c06:	fb01 3302 	mla	r3, r1, r2, r3
   d6c0a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6c0e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6c12:	fb01 3302 	mla	r3, r1, r2, r3
   d6c16:	435f      	muls	r7, r3
   d6c18:	63e7      	str	r7, [r4, #60]	; 0x3c
   d6c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6c1c:	4627      	mov	r7, r4
   d6c1e:	441d      	add	r5, r3
   d6c20:	f04f 0900 	mov.w	r9, #0
   d6c24:	782b      	ldrb	r3, [r5, #0]
   d6c26:	2b2c      	cmp	r3, #44	; 0x2c
   d6c28:	bf08      	it	eq
   d6c2a:	3501      	addeq	r5, #1
   d6c2c:	f895 8000 	ldrb.w	r8, [r5]
   d6c30:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d6c34:	d126      	bne.n	d6c84 <_tzset_unlocked_r+0x1f8>
   d6c36:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d6c3a:	9302      	str	r3, [sp, #8]
   d6c3c:	ab09      	add	r3, sp, #36	; 0x24
   d6c3e:	9300      	str	r3, [sp, #0]
   d6c40:	9603      	str	r6, [sp, #12]
   d6c42:	9601      	str	r6, [sp, #4]
   d6c44:	4633      	mov	r3, r6
   d6c46:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d6c4a:	494d      	ldr	r1, [pc, #308]	; (d6d80 <_tzset_unlocked_r+0x2f4>)
   d6c4c:	4628      	mov	r0, r5
   d6c4e:	f7fe fb25 	bl	d529c <siscanf>
   d6c52:	2803      	cmp	r0, #3
   d6c54:	d17e      	bne.n	d6d54 <_tzset_unlocked_r+0x2c8>
   d6c56:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d6c5a:	1e4b      	subs	r3, r1, #1
   d6c5c:	2b0b      	cmp	r3, #11
   d6c5e:	d879      	bhi.n	d6d54 <_tzset_unlocked_r+0x2c8>
   d6c60:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d6c64:	1e53      	subs	r3, r2, #1
   d6c66:	2b04      	cmp	r3, #4
   d6c68:	d874      	bhi.n	d6d54 <_tzset_unlocked_r+0x2c8>
   d6c6a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d6c6e:	2b06      	cmp	r3, #6
   d6c70:	d870      	bhi.n	d6d54 <_tzset_unlocked_r+0x2c8>
   d6c72:	f887 8008 	strb.w	r8, [r7, #8]
   d6c76:	60f9      	str	r1, [r7, #12]
   d6c78:	613a      	str	r2, [r7, #16]
   d6c7a:	617b      	str	r3, [r7, #20]
   d6c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6c7e:	eb05 0803 	add.w	r8, r5, r3
   d6c82:	e02a      	b.n	d6cda <_tzset_unlocked_r+0x24e>
   d6c84:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d6c88:	bf06      	itte	eq
   d6c8a:	3501      	addeq	r5, #1
   d6c8c:	4643      	moveq	r3, r8
   d6c8e:	2344      	movne	r3, #68	; 0x44
   d6c90:	220a      	movs	r2, #10
   d6c92:	a90b      	add	r1, sp, #44	; 0x2c
   d6c94:	4628      	mov	r0, r5
   d6c96:	9305      	str	r3, [sp, #20]
   d6c98:	f7ff fe3e 	bl	d6918 <strtoul>
   d6c9c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d6ca0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d6ca4:	4545      	cmp	r5, r8
   d6ca6:	9b05      	ldr	r3, [sp, #20]
   d6ca8:	d114      	bne.n	d6cd4 <_tzset_unlocked_r+0x248>
   d6caa:	234d      	movs	r3, #77	; 0x4d
   d6cac:	f1b9 0f00 	cmp.w	r9, #0
   d6cb0:	d107      	bne.n	d6cc2 <_tzset_unlocked_r+0x236>
   d6cb2:	7223      	strb	r3, [r4, #8]
   d6cb4:	2303      	movs	r3, #3
   d6cb6:	60e3      	str	r3, [r4, #12]
   d6cb8:	2302      	movs	r3, #2
   d6cba:	6123      	str	r3, [r4, #16]
   d6cbc:	f8c4 9014 	str.w	r9, [r4, #20]
   d6cc0:	e00b      	b.n	d6cda <_tzset_unlocked_r+0x24e>
   d6cc2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d6cc6:	230b      	movs	r3, #11
   d6cc8:	62a3      	str	r3, [r4, #40]	; 0x28
   d6cca:	2301      	movs	r3, #1
   d6ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
   d6cce:	2300      	movs	r3, #0
   d6cd0:	6323      	str	r3, [r4, #48]	; 0x30
   d6cd2:	e002      	b.n	d6cda <_tzset_unlocked_r+0x24e>
   d6cd4:	b280      	uxth	r0, r0
   d6cd6:	723b      	strb	r3, [r7, #8]
   d6cd8:	6178      	str	r0, [r7, #20]
   d6cda:	2302      	movs	r3, #2
   d6cdc:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6ce0:	2300      	movs	r3, #0
   d6ce2:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6ce6:	f8ad 3020 	strh.w	r3, [sp, #32]
   d6cea:	930a      	str	r3, [sp, #40]	; 0x28
   d6cec:	f898 3000 	ldrb.w	r3, [r8]
   d6cf0:	2b2f      	cmp	r3, #47	; 0x2f
   d6cf2:	d10b      	bne.n	d6d0c <_tzset_unlocked_r+0x280>
   d6cf4:	9603      	str	r6, [sp, #12]
   d6cf6:	f8cd a008 	str.w	sl, [sp, #8]
   d6cfa:	9601      	str	r6, [sp, #4]
   d6cfc:	f8cd b000 	str.w	fp, [sp]
   d6d00:	4633      	mov	r3, r6
   d6d02:	aa07      	add	r2, sp, #28
   d6d04:	491f      	ldr	r1, [pc, #124]	; (d6d84 <_tzset_unlocked_r+0x2f8>)
   d6d06:	4640      	mov	r0, r8
   d6d08:	f7fe fac8 	bl	d529c <siscanf>
   d6d0c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6d10:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6d14:	213c      	movs	r1, #60	; 0x3c
   d6d16:	fb01 3302 	mla	r3, r1, r2, r3
   d6d1a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6d1e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6d22:	fb01 3302 	mla	r3, r1, r2, r3
   d6d26:	61bb      	str	r3, [r7, #24]
   d6d28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d6d2a:	f109 0901 	add.w	r9, r9, #1
   d6d2e:	f1b9 0f02 	cmp.w	r9, #2
   d6d32:	4445      	add	r5, r8
   d6d34:	f107 071c 	add.w	r7, r7, #28
   d6d38:	f47f af74 	bne.w	d6c24 <_tzset_unlocked_r+0x198>
   d6d3c:	6860      	ldr	r0, [r4, #4]
   d6d3e:	f7ff fdf5 	bl	d692c <__tzcalc_limits>
   d6d42:	4b08      	ldr	r3, [pc, #32]	; (d6d64 <_tzset_unlocked_r+0x2d8>)
   d6d44:	6a22      	ldr	r2, [r4, #32]
   d6d46:	601a      	str	r2, [r3, #0]
   d6d48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6d4a:	1a9b      	subs	r3, r3, r2
   d6d4c:	4a07      	ldr	r2, [pc, #28]	; (d6d6c <_tzset_unlocked_r+0x2e0>)
   d6d4e:	bf18      	it	ne
   d6d50:	2301      	movne	r3, #1
   d6d52:	6013      	str	r3, [r2, #0]
   d6d54:	b00d      	add	sp, #52	; 0x34
   d6d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d5a:	bf00      	nop
   d6d5c:	000d79d8 	.word	0x000d79d8
   d6d60:	2003e7e0 	.word	0x2003e7e0
   d6d64:	2003e7e8 	.word	0x2003e7e8
   d6d68:	000d79db 	.word	0x000d79db
   d6d6c:	2003e7e4 	.word	0x2003e7e4
   d6d70:	2003e32c 	.word	0x2003e32c
   d6d74:	2003e7d3 	.word	0x2003e7d3
   d6d78:	000d79df 	.word	0x000d79df
   d6d7c:	000d7a02 	.word	0x000d7a02
   d6d80:	000d79ee 	.word	0x000d79ee
   d6d84:	000d7a01 	.word	0x000d7a01
   d6d88:	2003e7c8 	.word	0x2003e7c8

000d6d8c <_findenv_r>:
   d6d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d90:	4607      	mov	r7, r0
   d6d92:	468b      	mov	fp, r1
   d6d94:	4690      	mov	r8, r2
   d6d96:	f000 f8d9 	bl	d6f4c <__env_lock>
   d6d9a:	4b19      	ldr	r3, [pc, #100]	; (d6e00 <_findenv_r+0x74>)
   d6d9c:	681d      	ldr	r5, [r3, #0]
   d6d9e:	469a      	mov	sl, r3
   d6da0:	b13d      	cbz	r5, d6db2 <_findenv_r+0x26>
   d6da2:	465c      	mov	r4, fp
   d6da4:	4623      	mov	r3, r4
   d6da6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6daa:	b142      	cbz	r2, d6dbe <_findenv_r+0x32>
   d6dac:	2a3d      	cmp	r2, #61	; 0x3d
   d6dae:	461c      	mov	r4, r3
   d6db0:	d1f8      	bne.n	d6da4 <_findenv_r+0x18>
   d6db2:	4638      	mov	r0, r7
   d6db4:	f000 f8cb 	bl	d6f4e <__env_unlock>
   d6db8:	2000      	movs	r0, #0
   d6dba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6dbe:	ebcb 0404 	rsb	r4, fp, r4
   d6dc2:	46a9      	mov	r9, r5
   d6dc4:	f859 0b04 	ldr.w	r0, [r9], #4
   d6dc8:	2800      	cmp	r0, #0
   d6dca:	d0f2      	beq.n	d6db2 <_findenv_r+0x26>
   d6dcc:	4622      	mov	r2, r4
   d6dce:	4659      	mov	r1, fp
   d6dd0:	f7ff fcfc 	bl	d67cc <strncmp>
   d6dd4:	b988      	cbnz	r0, d6dfa <_findenv_r+0x6e>
   d6dd6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d6dda:	191e      	adds	r6, r3, r4
   d6ddc:	5d1b      	ldrb	r3, [r3, r4]
   d6dde:	2b3d      	cmp	r3, #61	; 0x3d
   d6de0:	d10b      	bne.n	d6dfa <_findenv_r+0x6e>
   d6de2:	f8da 3000 	ldr.w	r3, [sl]
   d6de6:	1aed      	subs	r5, r5, r3
   d6de8:	10ad      	asrs	r5, r5, #2
   d6dea:	4638      	mov	r0, r7
   d6dec:	f8c8 5000 	str.w	r5, [r8]
   d6df0:	f000 f8ad 	bl	d6f4e <__env_unlock>
   d6df4:	1c70      	adds	r0, r6, #1
   d6df6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6dfa:	464d      	mov	r5, r9
   d6dfc:	e7e1      	b.n	d6dc2 <_findenv_r+0x36>
   d6dfe:	bf00      	nop
   d6e00:	2003e374 	.word	0x2003e374

000d6e04 <_getenv_r>:
   d6e04:	b507      	push	{r0, r1, r2, lr}
   d6e06:	aa01      	add	r2, sp, #4
   d6e08:	f7ff ffc0 	bl	d6d8c <_findenv_r>
   d6e0c:	b003      	add	sp, #12
   d6e0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6e14 <__gettzinfo>:
   d6e14:	4800      	ldr	r0, [pc, #0]	; (d6e18 <__gettzinfo+0x4>)
   d6e16:	4770      	bx	lr
   d6e18:	2003e334 	.word	0x2003e334

000d6e1c <gmtime_r>:
   d6e1c:	6802      	ldr	r2, [r0, #0]
   d6e1e:	4b47      	ldr	r3, [pc, #284]	; (d6f3c <gmtime_r+0x120>)
   d6e20:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6e22:	fb92 f4f3 	sdiv	r4, r2, r3
   d6e26:	fb03 2214 	mls	r2, r3, r4, r2
   d6e2a:	2a00      	cmp	r2, #0
   d6e2c:	bfbc      	itt	lt
   d6e2e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d6e32:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d6e36:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d6e3a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d6e3e:	fb92 f3f0 	sdiv	r3, r2, r0
   d6e42:	fb00 2213 	mls	r2, r0, r3, r2
   d6e46:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d6e4a:	bfac      	ite	ge
   d6e4c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d6e50:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d6e54:	608b      	str	r3, [r1, #8]
   d6e56:	fb92 f3f0 	sdiv	r3, r2, r0
   d6e5a:	fb00 2213 	mls	r2, r0, r3, r2
   d6e5e:	604b      	str	r3, [r1, #4]
   d6e60:	600a      	str	r2, [r1, #0]
   d6e62:	2307      	movs	r3, #7
   d6e64:	1ce2      	adds	r2, r4, #3
   d6e66:	fb92 f3f3 	sdiv	r3, r2, r3
   d6e6a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d6e6e:	1ad3      	subs	r3, r2, r3
   d6e70:	618b      	str	r3, [r1, #24]
   d6e72:	4b33      	ldr	r3, [pc, #204]	; (d6f40 <gmtime_r+0x124>)
   d6e74:	4d33      	ldr	r5, [pc, #204]	; (d6f44 <gmtime_r+0x128>)
   d6e76:	fb94 f5f5 	sdiv	r5, r4, r5
   d6e7a:	fb03 4405 	mla	r4, r3, r5, r4
   d6e7e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d6e82:	fbb4 f2f2 	udiv	r2, r4, r2
   d6e86:	4422      	add	r2, r4
   d6e88:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d6e8c:	fbb4 f3f7 	udiv	r3, r4, r7
   d6e90:	1ad2      	subs	r2, r2, r3
   d6e92:	482d      	ldr	r0, [pc, #180]	; (d6f48 <gmtime_r+0x12c>)
   d6e94:	fbb4 f0f0 	udiv	r0, r4, r0
   d6e98:	f648 6694 	movw	r6, #36500	; 0x8e94
   d6e9c:	1a13      	subs	r3, r2, r0
   d6e9e:	fbb3 f6f6 	udiv	r6, r3, r6
   d6ea2:	4434      	add	r4, r6
   d6ea4:	f240 126d 	movw	r2, #365	; 0x16d
   d6ea8:	fbb3 f0f2 	udiv	r0, r3, r2
   d6eac:	fbb3 f3f7 	udiv	r3, r3, r7
   d6eb0:	1ae3      	subs	r3, r4, r3
   d6eb2:	fb02 3310 	mls	r3, r2, r0, r3
   d6eb6:	2499      	movs	r4, #153	; 0x99
   d6eb8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d6ebc:	3202      	adds	r2, #2
   d6ebe:	fbb2 f2f4 	udiv	r2, r2, r4
   d6ec2:	2a0a      	cmp	r2, #10
   d6ec4:	fb04 f402 	mul.w	r4, r4, r2
   d6ec8:	f104 0602 	add.w	r6, r4, #2
   d6ecc:	f04f 0405 	mov.w	r4, #5
   d6ed0:	fbb6 f4f4 	udiv	r4, r6, r4
   d6ed4:	bf34      	ite	cc
   d6ed6:	2602      	movcc	r6, #2
   d6ed8:	f06f 0609 	mvncs.w	r6, #9
   d6edc:	4416      	add	r6, r2
   d6ede:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6ee2:	fb02 0505 	mla	r5, r2, r5, r0
   d6ee6:	1c5f      	adds	r7, r3, #1
   d6ee8:	2e01      	cmp	r6, #1
   d6eea:	bf98      	it	ls
   d6eec:	3501      	addls	r5, #1
   d6eee:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d6ef2:	eba7 0704 	sub.w	r7, r7, r4
   d6ef6:	d302      	bcc.n	d6efe <gmtime_r+0xe2>
   d6ef8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d6efc:	e014      	b.n	d6f28 <gmtime_r+0x10c>
   d6efe:	0782      	lsls	r2, r0, #30
   d6f00:	d105      	bne.n	d6f0e <gmtime_r+0xf2>
   d6f02:	2464      	movs	r4, #100	; 0x64
   d6f04:	fbb0 f2f4 	udiv	r2, r0, r4
   d6f08:	fb04 0212 	mls	r2, r4, r2, r0
   d6f0c:	b94a      	cbnz	r2, d6f22 <gmtime_r+0x106>
   d6f0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6f12:	fbb0 f4f2 	udiv	r4, r0, r2
   d6f16:	fb02 0014 	mls	r0, r2, r4, r0
   d6f1a:	fab0 f280 	clz	r2, r0
   d6f1e:	0952      	lsrs	r2, r2, #5
   d6f20:	e000      	b.n	d6f24 <gmtime_r+0x108>
   d6f22:	2201      	movs	r2, #1
   d6f24:	333b      	adds	r3, #59	; 0x3b
   d6f26:	441a      	add	r2, r3
   d6f28:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d6f2c:	2300      	movs	r3, #0
   d6f2e:	61ca      	str	r2, [r1, #28]
   d6f30:	614d      	str	r5, [r1, #20]
   d6f32:	610e      	str	r6, [r1, #16]
   d6f34:	60cf      	str	r7, [r1, #12]
   d6f36:	620b      	str	r3, [r1, #32]
   d6f38:	4608      	mov	r0, r1
   d6f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6f3c:	00015180 	.word	0x00015180
   d6f40:	fffdc54f 	.word	0xfffdc54f
   d6f44:	00023ab1 	.word	0x00023ab1
   d6f48:	00023ab0 	.word	0x00023ab0

000d6f4c <__env_lock>:
   d6f4c:	4770      	bx	lr

000d6f4e <__env_unlock>:
   d6f4e:	4770      	bx	lr

000d6f50 <dynalib_user>:
   d6f50:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6f60:	0000 0000 6542 6967 6c6e 6e69 7953 636e     ....BeginlinSync
   d6f70:	5400 6568 6320 7275 6572 746e 6420 7461     .The current dat
   d6f80:	2065 6e61 2064 6974 656d 6920 2073 7325     e and time is %s
   d6f90:	0a20 5400 6568 6320 7275 6572 746e 7420      ..The current t
   d6fa0:	6d69 2065 7369 2520 2073 000a 7543 7272     ime is %s ..Curr
   d6fb0:	6e65 2074 6974 656d 6920 2073 7325 0000     ent time is %s..

000d6fc0 <_ZTV16Adafruit_SSD1306>:
	...
   d6fc8:	40c5 000d 42f3 000d 4d21 000d 5619 000d     .@...B..!M...V..
   d6fd8:	463d 000d 4a21 000d 44a1 000d 432d 000d     =F..!J...D..-C..
   d6fe8:	4ae1 000d 4b77 000d 4baf 000d 4bcb 000d     .J..wK...K...K..

000d6ff8 <_ZTV12Adafruit_GFX>:
	...
   d7008:	4d21 000d 5619 000d 40a1 000d 4a21 000d     !M...V...@..!J..
   d7018:	4b41 000d 4b5d 000d 4ae1 000d 4b77 000d     AK..]K...J..wK..
   d7028:	4baf 000d 4bcb 000d                         .K...K..

000d7030 <_ZL4font>:
   d7030:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d7040:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d7050:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d7060:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d7070:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d7080:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d7090:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d70a0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d70b0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d70c0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d70d0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d70e0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d70f0:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d7100:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d7110:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d7120:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d7130:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d7140:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d7150:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d7160:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d7170:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d7180:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d7190:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d71a0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d71b0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d71c0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d71d0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d71e0:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d71f0:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d7200:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d7210:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d7220:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d7230:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d7240:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d7250:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d7260:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d7270:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d7280:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d7290:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d72a0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d72b0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d72c0:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d72d0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d72e0:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d72f0:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d7300:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d7310:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d7320:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d7330:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d7340:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d7350:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d7360:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d7370:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d7380:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d7390:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d73a0:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d73b0:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d73c0:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d73d0:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d73e0:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d73f0:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d7400:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d7410:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d7420:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d7430:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d7440:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d7450:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d7460:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d7470:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d7480:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d7490:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d74a0:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d74b0:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d74c0:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d74d0:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d74e0:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d74f0:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d7500:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d7510:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d7520:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d752c <_ZTVN5spark13EthernetClassE>:
	...
   d7534:	532b 000d 5321 000d 5317 000d 530d 000d     +S..!S...S...S..
   d7544:	5301 000d 52f5 000d 52e9 000d 52e1 000d     .S...R...R...R..
   d7554:	52d7 000d 52cd 000d 5f45 000d               .R...R..E_..

000d7560 <_ZTV8SPIClass>:
	...
   d7568:	5349 000d 534b 000d                         IS..KS..

000d7570 <_ZL14clock_divisors>:
   d7570:	0800 1810 2820 3830 0066 6e6c 6600 006e     .... (08f.ln.fn.
   d7580:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
   d7590:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d75a0:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d75b0:	0069 6564 6174 6c69 2073 203d 6200 7561     i.details = .bau
   d75c0:	0064 6553 6972 6c61 5300 7265 6169 316c     d.Serial.Serial1
   d75d0:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
   d75e0:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
   d75f0:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
   d7600:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
   d7610:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
   d7620:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
   d7630:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
   d7640:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d7650:	6e61 6369 6100 6c6c 2500 302b 6433 253a     anic.all.%+03d:%
   d7660:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d7670:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d7680 <_ZTV9IPAddress>:
	...
   d7688:	599f 000d 5991 000d 5993 000d               .Y...Y...Y..

000d7694 <_ZTV9USBSerial>:
	...
   d769c:	5a79 000d 5abd 000d 5a97 000d 5619 000d     yZ...Z...Z...V..
   d76ac:	5a91 000d 5a7b 000d 5a83 000d 5ab7 000d     .Z..{Z...Z...Z..
   d76bc:	5a8b 000d 5a75 000d                         .Z..uZ..

000d76c4 <_ZTV11USARTSerial>:
	...
   d76cc:	5b61 000d 5b85 000d 5b91 000d 5619 000d     a[...[...[...V..
   d76dc:	5b6d 000d 5b79 000d 5b73 000d 5b7f 000d     m[..y[..s[...[..
   d76ec:	5b63 000d 5b67 000d                         c[..g[..

000d76f4 <_ZTV7TwoWire>:
	...
   d76fc:	5c35 000d 5c7f 000d 5c57 000d 5c37 000d     5\...\..W\..7\..
   d770c:	5c5f 000d 5c67 000d 5c6f 000d 5c77 000d     _\..g\..o\..w\..

000d771c <_ZTVN5spark9MeshClassE>:
	...
   d7724:	5d69 000d 5d5f 000d 5d55 000d 5d4b 000d     i].._]..U]..K]..
   d7734:	5d3f 000d 5d33 000d 5d27 000d 5d1f 000d     ?]..3]..']...]..
   d7744:	5d15 000d 5d0b 000d 5f45 000d               .]...]..E_..

000d7750 <_ZTVN5spark9WiFiClassE>:
	...
   d7758:	5ebf 000d 5eb5 000d 5eab 000d 5e61 000d     .^...^...^..a^..
   d7768:	5e9f 000d 5e93 000d 5e87 000d 5e7f 000d     .^...^...^...^..
   d7778:	5e75 000d 5e6b 000d 5f45 000d               u^..k^..E_..

000d7784 <_ZTVN5spark12NetworkClassE>:
	...
   d778c:	5edd 000d 5ee7 000d 5ef1 000d 5efb 000d     .^...^...^...^..
   d779c:	5f05 000d 5f11 000d 5f1d 000d 5f29 000d     ._..._..._..)_..
   d77ac:	5f31 000d 5f3b 000d 5f45 000d               1_..;_..E_..

000d77b8 <day_name.4725>:
   d77b8:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d77c8:	6972 6153 4a74                                   riSat

000d77cd <mon_name.4726>:
   d77cd:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d77dd:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d77ed:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d77fd:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d780d:	6425 000a                                   %d..

000d7811 <_ctype_>:
   d7811:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d7821:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d7831:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d7841:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d7851:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d7861:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7871:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7881:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7891:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d7914 <__sf_fake_stdin>:
	...

000d7934 <__sf_fake_stdout>:
	...

000d7954 <__sf_fake_stderr>:
	...
   d7974:	0043 0000                                   C...

000d7978 <__month_lengths>:
   d7978:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d7988:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d7998:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d79a8:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d79b8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d79c8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d79d8:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d79e8:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d79f8:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d7a08:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d7a14 <link_const_variable_data_end>:
   d7a14:	000d4301 	.word	0x000d4301
   d7a18:	000d4a1d 	.word	0x000d4a1d
   d7a1c:	000d4db1 	.word	0x000d4db1
   d7a20:	000d5335 	.word	0x000d5335
   d7a24:	000d5461 	.word	0x000d5461
   d7a28:	000d5771 	.word	0x000d5771
   d7a2c:	000d5869 	.word	0x000d5869
   d7a30:	000d58a1 	.word	0x000d58a1
   d7a34:	000d5e15 	.word	0x000d5e15
   d7a38:	000d5ec9 	.word	0x000d5ec9
   d7a3c:	000d6011 	.word	0x000d6011
   d7a40:	000d6109 	.word	0x000d6109
   d7a44:	000d6199 	.word	0x000d6199
   d7a48:	000d621d 	.word	0x000d621d
   d7a4c:	000d62e1 	.word	0x000d62e1
   d7a50:	000d63a5 	.word	0x000d63a5

000d7a54 <link_constructors_end>:
	...
