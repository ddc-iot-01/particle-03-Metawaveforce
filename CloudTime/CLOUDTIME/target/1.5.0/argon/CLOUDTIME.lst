
c:/Users/IoTPa/Documents/Brian/students/Jerry/particle-03-Metawaveforce/CloudTime/CLOUDTIME/target/1.5.0/argon/CLOUDTIME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003c64  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7c80  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000004c8  2003deac  000d7c84  0001deac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000047c  2003e374  2003e374  0002e374  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d814c  000d814c  0002814c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8174  000d8174  00028174  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e336f  00000000  00000000  00028178  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011f53  00000000  00000000  0010b4e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001fa7b  00000000  00000000  0011d43a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000027c0  00000000  00000000  0013ceb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000047c0  00000000  00000000  0013f675  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000371af  00000000  00000000  00143e35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002bbe6  00000000  00000000  0017afe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101510  00000000  00000000  001a6bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d830  00000000  00000000  002a80dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fc45 	bl	d68bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fc4a 	bl	d68d2 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003deac 	.word	0x2003deac
   d4048:	000d7c84 	.word	0x000d7c84
   d404c:	2003e374 	.word	0x2003e374
   d4050:	2003e374 	.word	0x2003e374
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fcfb 	bl	d5a54 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7c74 	.word	0x000d7c74
   d4080:	000d7c34 	.word	0x000d7c34

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b840 	b.w	d4108 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f92b 	bl	d42e4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bca1 	b.w	d59d8 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 b8ff 	b.w	d5298 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 b8fd 	b.w	d5298 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 f832 	bl	d5110 <panic_>
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d4ed1 	.word	0x000d4ed1

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c4:	4770      	bx	lr

000d40c6 <_ZN10CloudClass8syncTimeEv.isra.5>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d40c6:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40c8:	f001 f8b6 	bl	d5238 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d40cc:	b120      	cbz	r0, d40d8 <_ZN10CloudClass8syncTimeEv.isra.5+0x12>
            return false;
        }
        return spark_sync_time(NULL);
   d40ce:	2000      	movs	r0, #0
    }
   d40d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool syncTime(void)
    {
        if (!connected()) {
            return false;
        }
        return spark_sync_time(NULL);
   d40d4:	f001 b8b8 	b.w	d5248 <spark_sync_time>
    }
   d40d8:	bd08      	pop	{r3, pc}

000d40da <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.13>:
    }


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d40da:	b508      	push	{r3, lr}
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d40dc:	2000      	movs	r0, #0
   d40de:	f001 f8bb 	bl	d5258 <spark_sync_time_pending>
   d40e2:	b110      	cbz	r0, d40ea <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.13+0x10>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40e4:	f001 f8a8 	bl	d5238 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d40e8:	b958      	cbnz	r0, d4102 <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.13+0x28>
   d40ea:	2000      	movs	r0, #0
   d40ec:	f001 f8b4 	bl	d5258 <spark_sync_time_pending>
   d40f0:	b128      	cbz	r0, d40fe <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.13+0x24>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40f2:	f001 f8a1 	bl	d5238 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d40f6:	f080 0001 	eor.w	r0, r0, #1
   d40fa:	b2c0      	uxtb	r0, r0
   d40fc:	bd08      	pop	{r3, pc}
   d40fe:	2001      	movs	r0, #1
   d4100:	bd08      	pop	{r3, pc}
        while (_while() && !_condition()) {
            spark_process();
   d4102:	f001 f891 	bl	d5228 <spark_process>
   d4106:	e7e9      	b.n	d40dc <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.13+0x2>

000d4108 <setup>:
   
int currentDateTime;


// setup() runs once, when the device is first turned on.
void setup() {
   d4108:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
 Serial.begin(9600);
   d410a:	f001 fda9 	bl	d5c60 <_Z16_fetch_usbserialv>
   d410e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4112:	f001 fd93 	bl	d5c3c <_ZN9USBSerial5beginEl>
   Wire.begin();
   d4116:	f002 f8ff 	bl	d6318 <_Z19__fetch_global_Wirev>
   d411a:	f001 fe87 	bl	d5e2c <_ZN7TwoWire5beginEv>
   while(!Serial);
   d411e:	f001 fd9f 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4122:	f001 fd92 	bl	d5c4a <_ZN9USBSerialcvbEv>
   d4126:	2800      	cmp	r0, #0
   d4128:	d0f9      	beq.n	d411e <setup+0x16>
   Serial.println("BeginlinSync");
   d412a:	f001 fd99 	bl	d5c60 <_Z16_fetch_usbserialv>
   d412e:	4908      	ldr	r1, [pc, #32]	; (d4150 <setup+0x48>)
   d4130:	f001 fb29 	bl	d5786 <_ZN5Print7printlnEPKc>
    display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d4134:	223c      	movs	r2, #60	; 0x3c
   d4136:	2102      	movs	r1, #2
   d4138:	4806      	ldr	r0, [pc, #24]	; (d4154 <setup+0x4c>)
   d413a:	f000 fb1d 	bl	d4778 <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   d413e:	4805      	ldr	r0, [pc, #20]	; (d4154 <setup+0x4c>)
   d4140:	f000 fc6a 	bl	d4a18 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4144:	4803      	ldr	r0, [pc, #12]	; (d4154 <setup+0x4c>)
}
   d4146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   Wire.begin();
   while(!Serial);
   Serial.println("BeginlinSync");
    display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
  display.clearDisplay();
  display.display();
   d414a:	f000 bbe7 	b.w	d491c <_ZN16Adafruit_SSD13067displayEv>
   d414e:	bf00      	nop
   d4150:	000d7174 	.word	0x000d7174
   d4154:	2003e378 	.word	0x2003e378

000d4158 <_Z12sync_my_timev>:
  // The core of your code will likely live here.
  sync_my_time();
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
 printcurrentDateTime();
}
void sync_my_time() {
   d4158:	b570      	push	{r4, r5, r6, lr}
   d415a:	b094      	sub	sp, #80	; 0x50
  String DateTime;
   d415c:	493a      	ldr	r1, [pc, #232]	; (d4248 <_Z12sync_my_timev+0xf0>)
   d415e:	a805      	add	r0, sp, #20
   d4160:	f001 fa4b 	bl	d55fa <_ZN6StringC1EPK19__FlashStringHelper>
  String TimeOnly;
   d4164:	4938      	ldr	r1, [pc, #224]	; (d4248 <_Z12sync_my_timev+0xf0>)
   d4166:	a809      	add	r0, sp, #36	; 0x24
   d4168:	f001 fa47 	bl	d55fa <_ZN6StringC1EPK19__FlashStringHelper>
  char currentDateTime[25];
  char currentTime[9];
  Time.zone(-6); // Set Time Zone to MDT (UTC - 7)
   d416c:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d4170:	f001 fb84 	bl	d587c <_ZN9TimeClass4zoneEf>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4174:	f000 feb4 	bl	d4ee0 <HAL_Timer_Get_Milli_Seconds>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d4178:	ac14      	add	r4, sp, #80	; 0x50
   d417a:	2500      	movs	r5, #0
   d417c:	4606      	mov	r6, r0
  unsigned long cur=millis();
  // Request time synch from Particle Device Cloud and wait for data to come back
  Particle.syncTime();
   d417e:	f7ff ffa2 	bl	d40c6 <_ZN10CloudClass8syncTimeEv.isra.5>
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
   d4182:	f7ff ffaa 	bl	d40da <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.13>
   d4186:	f844 5d1c 	str.w	r5, [r4, #-28]!
        return spark_sync_time_last(&tm, nullptr);
   d418a:	4629      	mov	r1, r5
   d418c:	4620      	mov	r0, r4
   d418e:	f001 f86b 	bl	d5268 <spark_sync_time_last>
  waitUntil(Particle.syncTimeDone);

  // Check if synchronized successfully
  if (Particle.timeSyncedLast() >= cur) {
   d4192:	42b0      	cmp	r0, r6
   d4194:	d350      	bcc.n	d4238 <_Z12sync_my_timev+0xe0>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d4196:	f001 fbd0 	bl	d593a <_ZN9TimeClass3nowEv>
   d419a:	4601      	mov	r1, r0
   d419c:	4620      	mov	r0, r4
   d419e:	f001 fb89 	bl	d58b4 <_ZN9TimeClass7timeStrEl>
    DateTime = Time.timeStr();
   d41a2:	4621      	mov	r1, r4
   d41a4:	a805      	add	r0, sp, #20
   d41a6:	f001 fa58 	bl	d565a <_ZN6StringaSEOS_>
   d41aa:	4620      	mov	r0, r4
   d41ac:	f001 f9de 	bl	d556c <_ZN6StringD1Ev>
    TimeOnly = DateTime.substring(11,19);       // pull out only Time from DateTime String
   d41b0:	2313      	movs	r3, #19
   d41b2:	220b      	movs	r2, #11
   d41b4:	a905      	add	r1, sp, #20
   d41b6:	4620      	mov	r0, r4
   d41b8:	f001 fa70 	bl	d569c <_ZNK6String9substringEjj>
   d41bc:	4621      	mov	r1, r4
   d41be:	a809      	add	r0, sp, #36	; 0x24
   d41c0:	f001 fa4b 	bl	d565a <_ZN6StringaSEOS_>
   d41c4:	4620      	mov	r0, r4
   d41c6:	f001 f9d1 	bl	d556c <_ZN6StringD1Ev>
    Serial.println(DateTime);
   d41ca:	f001 fd49 	bl	d5c60 <_Z16_fetch_usbserialv>
   d41ce:	9905      	ldr	r1, [sp, #20]
   d41d0:	f001 fad9 	bl	d5786 <_ZN5Print7printlnEPKc>
    Serial.println(TimeOnly);
   d41d4:	f001 fd44 	bl	d5c60 <_Z16_fetch_usbserialv>
   d41d8:	9909      	ldr	r1, [sp, #36]	; 0x24
   d41da:	f001 fad4 	bl	d5786 <_ZN5Print7printlnEPKc>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d41de:	462b      	mov	r3, r5
   d41e0:	2219      	movs	r2, #25
   d41e2:	4621      	mov	r1, r4
   d41e4:	a805      	add	r0, sp, #20
   d41e6:	f001 fa40 	bl	d566a <_ZNK6String8getBytesEPhjj>
   d41ea:	462b      	mov	r3, r5
   d41ec:	2209      	movs	r2, #9
   d41ee:	a902      	add	r1, sp, #8
   d41f0:	a809      	add	r0, sp, #36	; 0x24
   d41f2:	f001 fa3a 	bl	d566a <_ZNK6String8getBytesEPhjj>
    // Using Time with Formatted Print Statements
    DateTime.toCharArray(currentDateTime,25);   // convert DateTime in to an array of char for printf()
    TimeOnly.toCharArray(currentTime,9);        // convert TImeOnly to an array of char for printf()
    Serial.printf("The current date and time is %s \n",currentDateTime);
   d41f6:	f001 fd33 	bl	d5c60 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d41fa:	4623      	mov	r3, r4
   d41fc:	4a13      	ldr	r2, [pc, #76]	; (d424c <_Z12sync_my_timev+0xf4>)
   d41fe:	4629      	mov	r1, r5
   d4200:	f001 faeb 	bl	d57da <_ZN5Print11printf_implEbPKcz>
    Serial.printf("The current time is %s \n",currentTime);
   d4204:	f001 fd2c 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4208:	ab02      	add	r3, sp, #8
   d420a:	4a11      	ldr	r2, [pc, #68]	; (d4250 <_Z12sync_my_timev+0xf8>)
   d420c:	4629      	mov	r1, r5
   d420e:	f001 fae4 	bl	d57da <_ZN5Print11printf_implEbPKcz>
    Particle.syncTime();
   d4212:	f7ff ff58 	bl	d40c6 <_ZN10CloudClass8syncTimeEv.isra.5>
   d4216:	f7ff ff60 	bl	d40da <_ZN11SystemClass18waitConditionWhileIZ12sync_my_timevEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.13>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d421a:	a814      	add	r0, sp, #80	; 0x50
        return spark_sync_time_last(&tm, nullptr);
   d421c:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d421e:	f840 5d4c 	str.w	r5, [r0, #-76]!
        return spark_sync_time_last(&tm, nullptr);
   d4222:	f001 f821 	bl	d5268 <spark_sync_time_last>
    //Wait to receive time from Particle Device Cloud
    waitUntil(Particle.syncTimeDone);
    // Check if synchronized successfully
    if(Particle.timeSyncedLast() >= cur){
   d4226:	42b0      	cmp	r0, r6
   d4228:	d306      	bcc.n	d4238 <_Z12sync_my_timev+0xe0>
      // Print current time
      Serial.printlnf("Current time is %s",currentTime);//Time.timeStr().c_str());
   d422a:	f001 fd19 	bl	d5c60 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d422e:	ab02      	add	r3, sp, #8
   d4230:	4a08      	ldr	r2, [pc, #32]	; (d4254 <_Z12sync_my_timev+0xfc>)
   d4232:	2101      	movs	r1, #1
   d4234:	f001 fad1 	bl	d57da <_ZN5Print11printf_implEbPKcz>
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
 printcurrentDateTime();
}
void sync_my_time() {
  String DateTime;
  String TimeOnly;
   d4238:	a809      	add	r0, sp, #36	; 0x24
   d423a:	f001 f997 	bl	d556c <_ZN6StringD1Ev>
  sync_my_time();
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
 printcurrentDateTime();
}
void sync_my_time() {
  String DateTime;
   d423e:	a805      	add	r0, sp, #20
   d4240:	f001 f994 	bl	d556c <_ZN6StringD1Ev>
      // Print current time
      Serial.printlnf("Current time is %s",currentTime);//Time.timeStr().c_str());
    }  
  }

}
   d4244:	b014      	add	sp, #80	; 0x50
   d4246:	bd70      	pop	{r4, r5, r6, pc}
   d4248:	000d783f 	.word	0x000d783f
   d424c:	000d7181 	.word	0x000d7181
   d4250:	000d71a3 	.word	0x000d71a3
   d4254:	000d71bc 	.word	0x000d71bc

000d4258 <_Z20printcurrentDateTimev>:
void printcurrentDateTime () {
   d4258:	b510      	push	{r4, lr}
  display.clearDisplay( );
   d425a:	4c20      	ldr	r4, [pc, #128]	; (d42dc <_Z20printcurrentDateTimev+0x84>)
   d425c:	4620      	mov	r0, r4
   d425e:	f000 fbdb 	bl	d4a18 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4262:	4620      	mov	r0, r4
   d4264:	f000 fb5a 	bl	d491c <_ZN16Adafruit_SSD13067displayEv>
  // display a pixel in each corner of the screen
  display.drawPixel(0, 0, WHITE);
   d4268:	2200      	movs	r2, #0
   d426a:	4611      	mov	r1, r2
   d426c:	4620      	mov	r0, r4
   d426e:	2301      	movs	r3, #1
   d4270:	f000 f9da 	bl	d4628 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 0, WHITE);
   d4274:	4620      	mov	r0, r4
   d4276:	2301      	movs	r3, #1
   d4278:	2200      	movs	r2, #0
   d427a:	217f      	movs	r1, #127	; 0x7f
   d427c:	f000 f9d4 	bl	d4628 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(0, 63, WHITE);
   d4280:	4620      	mov	r0, r4
   d4282:	2301      	movs	r3, #1
   d4284:	223f      	movs	r2, #63	; 0x3f
   d4286:	2100      	movs	r1, #0
   d4288:	f000 f9ce 	bl	d4628 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 63, WHITE);
   d428c:	2301      	movs	r3, #1
   d428e:	223f      	movs	r2, #63	; 0x3f
   d4290:	4620      	mov	r0, r4
   d4292:	217f      	movs	r1, #127	; 0x7f
   d4294:	f000 f9c8 	bl	d4628 <_ZN16Adafruit_SSD13069drawPixelEsst>
 display.setTextSize(1);
   d4298:	4620      	mov	r0, r4
   d429a:	2101      	movs	r1, #1
   d429c:	f000 fd7e 	bl	d4d9c <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d42a0:	4620      	mov	r0, r4
   d42a2:	2101      	movs	r1, #1
   d42a4:	f000 fd7f 	bl	d4da6 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(27,30);
   d42a8:	221e      	movs	r2, #30
   d42aa:	4620      	mov	r0, r4
   d42ac:	211b      	movs	r1, #27
   d42ae:	f000 fd72 	bl	d4d96 <_ZN12Adafruit_GFX9setCursorEss>
  display.print("currentDateTime");
   d42b2:	490b      	ldr	r1, [pc, #44]	; (d42e0 <_Z20printcurrentDateTimev+0x88>)
   d42b4:	4620      	mov	r0, r4
   d42b6:	f001 fa53 	bl	d5760 <_ZN5Print5printEPKc>
   delay(1000);
   d42ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d42be:	f001 fb4d 	bl	d595c <delay>
   display.display();
   d42c2:	4620      	mov	r0, r4
   d42c4:	f000 fb2a 	bl	d491c <_ZN16Adafruit_SSD13067displayEv>
   delay(1000);
   d42c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d42cc:	f001 fb46 	bl	d595c <delay>
   display.display();
   d42d0:	4620      	mov	r0, r4
   d42d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.setCursor(27,30);
  display.print("currentDateTime");
   delay(1000);
   display.display();
   delay(1000);
   display.display();
   d42d6:	f000 bb21 	b.w	d491c <_ZN16Adafruit_SSD13067displayEv>
   d42da:	bf00      	nop
   d42dc:	2003e378 	.word	0x2003e378
   d42e0:	000d71cf 	.word	0x000d71cf

000d42e4 <loop>:
  display.clearDisplay();
  display.display();
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d42e4:	b508      	push	{r3, lr}
  // The core of your code will likely live here.
  sync_my_time();
   d42e6:	f7ff ff37 	bl	d4158 <_Z12sync_my_timev>
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
   d42ea:	f64e 2160 	movw	r1, #60000	; 0xea60
   d42ee:	f242 7010 	movw	r0, #10000	; 0x2710
   d42f2:	f001 fdbe 	bl	d5e72 <_Z6randomii>
   d42f6:	f001 fb31 	bl	d595c <delay>
 printcurrentDateTime();
}
   d42fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  sync_my_time();
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
 printcurrentDateTime();
   d42fe:	f7ff bfab 	b.w	d4258 <_Z20printcurrentDateTimev>

000d4302 <_ZN16Adafruit_SSD1306D0Ev>:
   d4302:	b510      	push	{r4, lr}
   d4304:	2124      	movs	r1, #36	; 0x24
   d4306:	4604      	mov	r4, r0
   d4308:	f002 f83a 	bl	d6380 <_ZdlPvj>
   d430c:	4620      	mov	r0, r4
   d430e:	bd10      	pop	{r4, pc}

000d4310 <_GLOBAL__sub_I_display>:
  display.print("currentDateTime");
   delay(1000);
   display.display();
   delay(1000);
   display.display();
   d4310:	b510      	push	{r4, lr}

#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1); 
   d4312:	4c07      	ldr	r4, [pc, #28]	; (d4330 <_GLOBAL__sub_I_display+0x20>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4314:	f000 fd64 	bl	d4de0 <HAL_Pin_Map>
   d4318:	f04f 31ff 	mov.w	r1, #4294967295
   d431c:	4620      	mov	r0, r4
   d431e:	f000 f9cd 	bl	d46bc <_ZN16Adafruit_SSD1306C1Ea>
   d4322:	4620      	mov	r0, r4
   d4324:	4a03      	ldr	r2, [pc, #12]	; (d4334 <_GLOBAL__sub_I_display+0x24>)
   d4326:	4904      	ldr	r1, [pc, #16]	; (d4338 <_GLOBAL__sub_I_display+0x28>)
  display.print("currentDateTime");
   delay(1000);
   display.display();
   delay(1000);
   display.display();
   d4328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1); 
   d432c:	f002 b81a 	b.w	d6364 <__aeabi_atexit>
   d4330:	2003e378 	.word	0x2003e378
   d4334:	2003e374 	.word	0x2003e374
   d4338:	000d40c5 	.word	0x000d40c5

000d433c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d433c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d433e:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4340:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4344:	2c02      	cmp	r4, #2
   d4346:	d008      	beq.n	d435a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4348:	2c03      	cmp	r4, #3
   d434a:	d00f      	beq.n	d436c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d434c:	2c01      	cmp	r4, #1
   d434e:	d170      	bne.n	d4432 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4350:	8904      	ldrh	r4, [r0, #8]
   d4352:	3c01      	subs	r4, #1
   d4354:	1aa2      	subs	r2, r4, r2
   d4356:	b212      	sxth	r2, r2
      break;
   d4358:	e00c      	b.n	d4374 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d435a:	8944      	ldrh	r4, [r0, #10]
   d435c:	3c01      	subs	r4, #1
   d435e:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4360:	8904      	ldrh	r4, [r0, #8]
   d4362:	1ae4      	subs	r4, r4, r3
   d4364:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4366:	b212      	sxth	r2, r2
      x -= (w-1);
   d4368:	b209      	sxth	r1, r1
      break;
   d436a:	e062      	b.n	d4432 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d436c:	8944      	ldrh	r4, [r0, #10]
   d436e:	1ae4      	subs	r4, r4, r3
   d4370:	1a61      	subs	r1, r4, r1
   d4372:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4374:	2a00      	cmp	r2, #0
   d4376:	db5b      	blt.n	d4430 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4378:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d437c:	4294      	cmp	r4, r2
   d437e:	f340 8090 	ble.w	d44a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4382:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4384:	bfbe      	ittt	lt
   d4386:	185b      	addlt	r3, r3, r1
   d4388:	b21b      	sxthlt	r3, r3
    __y = 0;
   d438a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d438c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4390:	18cc      	adds	r4, r1, r3
   d4392:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4394:	bfc4      	itt	gt
   d4396:	1a43      	subgt	r3, r0, r1
   d4398:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d439a:	2b00      	cmp	r3, #0
   d439c:	f340 8081 	ble.w	d44a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d43a0:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d43a2:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d43a4:	4f3f      	ldr	r7, [pc, #252]	; (d44a4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d43a6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d43aa:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d43ae:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d43b0:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d43b4:	d017      	beq.n	d43e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d43b6:	f1c1 0108 	rsb	r1, r1, #8
   d43ba:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d43bc:	493a      	ldr	r1, [pc, #232]	; (d44a8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d43be:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d43c0:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d43c2:	bf3f      	itttt	cc
   d43c4:	ebc3 0e00 	rsbcc	lr, r3, r0
   d43c8:	21ff      	movcc	r1, #255	; 0xff
   d43ca:	fa41 f10e 	asrcc.w	r1, r1, lr
   d43ce:	400e      	andcc	r6, r1
   d43d0:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d43d2:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d43d4:	bf0c      	ite	eq
   d43d6:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d43d8:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d43da:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d43dc:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d43de:	d360      	bcc.n	d44a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d43e0:	1a18      	subs	r0, r3, r0
   d43e2:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d43e4:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d43e6:	2b07      	cmp	r3, #7
   d43e8:	d917      	bls.n	d441a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d43ea:	2d01      	cmp	r5, #1
   d43ec:	bf0c      	ite	eq
   d43ee:	20ff      	moveq	r0, #255	; 0xff
   d43f0:	2000      	movne	r0, #0
   d43f2:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d43f6:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d43f8:	3a08      	subs	r2, #8
   d43fa:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d43fc:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d43fe:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4402:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4406:	d8f7      	bhi.n	d43f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d4408:	f1a3 0208 	sub.w	r2, r3, #8
   d440c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4410:	3201      	adds	r2, #1
   d4412:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4416:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d441a:	2b00      	cmp	r3, #0
   d441c:	d041      	beq.n	d44a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d441e:	4a23      	ldr	r2, [pc, #140]	; (d44ac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4420:	5cd2      	ldrb	r2, [r2, r3]
   d4422:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4424:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4426:	bf0c      	ite	eq
   d4428:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d442a:	4393      	bicne	r3, r2
   d442c:	7023      	strb	r3, [r4, #0]
   d442e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4430:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4432:	2a00      	cmp	r2, #0
   d4434:	db35      	blt.n	d44a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4436:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d443a:	4294      	cmp	r4, r2
   d443c:	dd31      	ble.n	d44a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d443e:	2900      	cmp	r1, #0
    w += x;
   d4440:	bfbc      	itt	lt
   d4442:	18c9      	addlt	r1, r1, r3
   d4444:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4446:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d444a:	bfb8      	it	lt
   d444c:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d444e:	18ce      	adds	r6, r1, r3
   d4450:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4452:	bfc4      	itt	gt
   d4454:	1a63      	subgt	r3, r4, r1
   d4456:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4458:	2b00      	cmp	r3, #0
   d445a:	dd22      	ble.n	d44a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d445c:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d445e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4462:	4810      	ldr	r0, [pc, #64]	; (d44a4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4464:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4468:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d446a:	2001      	movs	r0, #1
   d446c:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4470:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4472:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4474:	d109      	bne.n	d448a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4476:	3b01      	subs	r3, #1
   d4478:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d447a:	1c5c      	adds	r4, r3, #1
   d447c:	d011      	beq.n	d44a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d447e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4482:	4310      	orrs	r0, r2
   d4484:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4488:	e7f5      	b.n	d4476 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d448a:	43d2      	mvns	r2, r2
   d448c:	b2d2      	uxtb	r2, r2
   d448e:	3b01      	subs	r3, #1
   d4490:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4492:	1c58      	adds	r0, r3, #1
   d4494:	d005      	beq.n	d44a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4496:	f811 0b01 	ldrb.w	r0, [r1], #1
   d449a:	4010      	ands	r0, r2
   d449c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d44a0:	e7f5      	b.n	d448e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d44a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44a4:	2003debc 	.word	0x2003debc
   d44a8:	2003deb4 	.word	0x2003deb4
   d44ac:	2003deac 	.word	0x2003deac

000d44b0 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d44b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d44b2:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d44b4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d44b8:	2c02      	cmp	r4, #2
   d44ba:	d008      	beq.n	d44ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d44bc:	2c03      	cmp	r4, #3
   d44be:	d00f      	beq.n	d44e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d44c0:	2c01      	cmp	r4, #1
   d44c2:	d112      	bne.n	d44ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d44c4:	8904      	ldrh	r4, [r0, #8]
   d44c6:	1ae4      	subs	r4, r4, r3
   d44c8:	1aa2      	subs	r2, r4, r2
   d44ca:	b212      	sxth	r2, r2
      break;
   d44cc:	e06d      	b.n	d45aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d44ce:	8904      	ldrh	r4, [r0, #8]
   d44d0:	3c01      	subs	r4, #1
   d44d2:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d44d4:	8944      	ldrh	r4, [r0, #10]
   d44d6:	1ae4      	subs	r4, r4, r3
   d44d8:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d44da:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d44dc:	b212      	sxth	r2, r2
      break;
   d44de:	e004      	b.n	d44ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d44e0:	8944      	ldrh	r4, [r0, #10]
   d44e2:	3c01      	subs	r4, #1
   d44e4:	1a61      	subs	r1, r4, r1
   d44e6:	b209      	sxth	r1, r1
      break;
   d44e8:	e05f      	b.n	d45aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d44ea:	2900      	cmp	r1, #0
   d44ec:	db5c      	blt.n	d45a8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d44ee:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d44f2:	428c      	cmp	r4, r1
   d44f4:	f340 8091 	ble.w	d461a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d44f8:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d44fa:	bfbc      	itt	lt
   d44fc:	18d2      	addlt	r2, r2, r3
   d44fe:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4500:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4504:	bfb8      	it	lt
   d4506:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4508:	18d4      	adds	r4, r2, r3
   d450a:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d450c:	bfc4      	itt	gt
   d450e:	1a83      	subgt	r3, r0, r2
   d4510:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4512:	2b00      	cmp	r3, #0
   d4514:	f340 8081 	ble.w	d461a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4518:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d451a:	4e40      	ldr	r6, [pc, #256]	; (d461c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d451c:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d451e:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4520:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4524:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4528:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d452c:	d017      	beq.n	d455e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d452e:	f1c4 0408 	rsb	r4, r4, #8
   d4532:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4534:	4c3a      	ldr	r4, [pc, #232]	; (d4620 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4536:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4538:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d453a:	bf3f      	itttt	cc
   d453c:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4540:	24ff      	movcc	r4, #255	; 0xff
   d4542:	fa44 f40e 	asrcc.w	r4, r4, lr
   d4546:	4027      	andcc	r7, r4
   d4548:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d454a:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d454c:	bf0c      	ite	eq
   d454e:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4550:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4552:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4554:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4556:	d360      	bcc.n	d461a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d4558:	1a10      	subs	r0, r2, r0
   d455a:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d455c:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d455e:	2a07      	cmp	r2, #7
   d4560:	d917      	bls.n	d4592 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4562:	2d01      	cmp	r5, #1
   d4564:	bf0c      	ite	eq
   d4566:	24ff      	moveq	r4, #255	; 0xff
   d4568:	2400      	movne	r4, #0
   d456a:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d456e:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4570:	3908      	subs	r1, #8
   d4572:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4574:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4576:	f800 4c80 	strb.w	r4, [r0, #-128]
   d457a:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d457e:	d8f7      	bhi.n	d4570 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4580:	f1a2 0108 	sub.w	r1, r2, #8
   d4584:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d4588:	3101      	adds	r1, #1
   d458a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d458e:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4592:	2a00      	cmp	r2, #0
   d4594:	d041      	beq.n	d461a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4596:	4923      	ldr	r1, [pc, #140]	; (d4624 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d4598:	5c89      	ldrb	r1, [r1, r2]
   d459a:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d459c:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d459e:	bf0c      	ite	eq
   d45a0:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d45a2:	438a      	bicne	r2, r1
   d45a4:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d45a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d45a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d45aa:	2900      	cmp	r1, #0
   d45ac:	db35      	blt.n	d461a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d45ae:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d45b2:	428c      	cmp	r4, r1
   d45b4:	dd31      	ble.n	d461a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d45b6:	2a00      	cmp	r2, #0
    w += x;
   d45b8:	bfbc      	itt	lt
   d45ba:	18d2      	addlt	r2, r2, r3
   d45bc:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d45be:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d45c2:	bfb8      	it	lt
   d45c4:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d45c6:	18d6      	adds	r6, r2, r3
   d45c8:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d45ca:	bfc4      	itt	gt
   d45cc:	1aa3      	subgt	r3, r4, r2
   d45ce:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d45d0:	2b00      	cmp	r3, #0
   d45d2:	dd22      	ble.n	d461a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d45d4:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d45d6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d45da:	4810      	ldr	r0, [pc, #64]	; (d461c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d45dc:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d45e0:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d45e2:	2201      	movs	r2, #1
   d45e4:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d45e8:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d45ea:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d45ec:	d109      	bne.n	d4602 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d45ee:	1e5a      	subs	r2, r3, #1
   d45f0:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d45f2:	1c5c      	adds	r4, r3, #1
   d45f4:	d011      	beq.n	d461a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d45f6:	f810 2b01 	ldrb.w	r2, [r0], #1
   d45fa:	430a      	orrs	r2, r1
   d45fc:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4600:	e7f5      	b.n	d45ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d4602:	43c9      	mvns	r1, r1
   d4604:	b2c9      	uxtb	r1, r1
   d4606:	1e5a      	subs	r2, r3, #1
   d4608:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d460a:	1c5a      	adds	r2, r3, #1
   d460c:	d005      	beq.n	d461a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d460e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4612:	400a      	ands	r2, r1
   d4614:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4618:	e7f5      	b.n	d4606 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d461a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d461c:	2003debc 	.word	0x2003debc
   d4620:	2003deb4 	.word	0x2003deb4
   d4624:	2003deac 	.word	0x2003deac

000d4628 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d462a:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d462c:	4606      	mov	r6, r0
   d462e:	4614      	mov	r4, r2
   d4630:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4632:	db3f      	blt.n	d46b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4634:	f000 fbbc 	bl	d4db0 <_ZN12Adafruit_GFX5widthEv>
   d4638:	4285      	cmp	r5, r0
   d463a:	da3b      	bge.n	d46b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d463c:	2c00      	cmp	r4, #0
   d463e:	db39      	blt.n	d46b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4640:	4630      	mov	r0, r6
   d4642:	f000 fbb8 	bl	d4db6 <_ZN12Adafruit_GFX6heightEv>
   d4646:	4284      	cmp	r4, r0
   d4648:	da34      	bge.n	d46b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d464a:	4630      	mov	r0, r6
   d464c:	f000 fbae 	bl	d4dac <_ZN12Adafruit_GFX11getRotationEv>
   d4650:	2802      	cmp	r0, #2
   d4652:	d127      	bne.n	d46a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4654:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4656:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4658:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d465a:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d465c:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d465e:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4660:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d4662:	b204      	sxth	r4, r0
   d4664:	e006      	b.n	d4674 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4666:	2801      	cmp	r0, #1
   d4668:	d104      	bne.n	d4674 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d466a:	8933      	ldrh	r3, [r6, #8]
   d466c:	3b01      	subs	r3, #1
   d466e:	1b1b      	subs	r3, r3, r4
   d4670:	462c      	mov	r4, r5
   d4672:	b21d      	sxth	r5, r3
   d4674:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4676:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4678:	fb94 f0f0 	sdiv	r0, r4, r0
   d467c:	b200      	sxth	r0, r0
   d467e:	4b0e      	ldr	r3, [pc, #56]	; (d46b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d4680:	f004 0207 	and.w	r2, r4, #7
   d4684:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4688:	d104      	bne.n	d4694 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d468a:	4097      	lsls	r7, r2
   d468c:	5c5a      	ldrb	r2, [r3, r1]
   d468e:	4317      	orrs	r7, r2
   d4690:	545f      	strb	r7, [r3, r1]
   d4692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4694:	5c58      	ldrb	r0, [r3, r1]
   d4696:	2701      	movs	r7, #1
   d4698:	fa07 f202 	lsl.w	r2, r7, r2
   d469c:	ea20 0202 	bic.w	r2, r0, r2
   d46a0:	545a      	strb	r2, [r3, r1]
   d46a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d46a4:	2803      	cmp	r0, #3
   d46a6:	d1de      	bne.n	d4666 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d46a8:	8973      	ldrh	r3, [r6, #10]
   d46aa:	3b01      	subs	r3, #1
   d46ac:	1b5b      	subs	r3, r3, r5
   d46ae:	4625      	mov	r5, r4
   d46b0:	b21c      	sxth	r4, r3
   d46b2:	e7df      	b.n	d4674 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d46b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d46b6:	bf00      	nop
   d46b8:	2003debc 	.word	0x2003debc

000d46bc <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d46bc:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d46be:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d46c0:	4604      	mov	r4, r0
   d46c2:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d46c4:	2180      	movs	r1, #128	; 0x80
   d46c6:	f000 fa87 	bl	d4bd8 <_ZN12Adafruit_GFXC1Ess>
   d46ca:	4b06      	ldr	r3, [pc, #24]	; (d46e4 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d46cc:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d46ce:	23ff      	movs	r3, #255	; 0xff
   d46d0:	7763      	strb	r3, [r4, #29]
   d46d2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d46d6:	77e3      	strb	r3, [r4, #31]
   d46d8:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d46da:	f884 5020 	strb.w	r5, [r4, #32]
}
   d46de:	4620      	mov	r0, r4
   d46e0:	bd38      	pop	{r3, r4, r5, pc}
   d46e2:	bf00      	nop
   d46e4:	000d71e8 	.word	0x000d71e8

000d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d46e8:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d46ea:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d46ee:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d46f0:	4604      	mov	r4, r0
   d46f2:	460d      	mov	r5, r1
  if (sid != -1)
   d46f4:	d028      	beq.n	d4748 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d46f6:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d46fa:	2101      	movs	r1, #1
   d46fc:	b280      	uxth	r0, r0
   d46fe:	f001 fd94 	bl	d622a <digitalWrite>
    digitalWrite(dc, LOW);
   d4702:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4706:	2100      	movs	r1, #0
   d4708:	b280      	uxth	r0, r0
   d470a:	f001 fd8e 	bl	d622a <digitalWrite>
    digitalWrite(cs, LOW);
   d470e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4712:	2100      	movs	r1, #0
   d4714:	b280      	uxth	r0, r0
   d4716:	f001 fd88 	bl	d622a <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d471a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d471e:	b12b      	cbz	r3, d472c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    (void)SPI.transfer(d);
   d4720:	f001 fdc0 	bl	d62a4 <_ZN8particle7globals11instanceSpiEv>
   d4724:	4629      	mov	r1, r5
   d4726:	f000 fee1 	bl	d54ec <_ZN8SPIClass8transferEh>
   d472a:	e005      	b.n	d4738 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d472c:	462b      	mov	r3, r5
   d472e:	2201      	movs	r2, #1
   d4730:	7fa1      	ldrb	r1, [r4, #30]
   d4732:	7f60      	ldrb	r0, [r4, #29]
   d4734:	f001 fd92 	bl	d625c <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4738:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d473c:	2101      	movs	r1, #1
   d473e:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d4740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4744:	f001 bd71 	b.w	d622a <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d4748:	f001 fde6 	bl	d6318 <_Z19__fetch_global_Wirev>
   d474c:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4750:	f001 fb76 	bl	d5e40 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4754:	f001 fde0 	bl	d6318 <_Z19__fetch_global_Wirev>
   d4758:	6803      	ldr	r3, [r0, #0]
   d475a:	2100      	movs	r1, #0
   d475c:	689b      	ldr	r3, [r3, #8]
   d475e:	4798      	blx	r3
    Wire.write(c);
   d4760:	f001 fdda 	bl	d6318 <_Z19__fetch_global_Wirev>
   d4764:	6803      	ldr	r3, [r0, #0]
   d4766:	4629      	mov	r1, r5
   d4768:	689b      	ldr	r3, [r3, #8]
   d476a:	4798      	blx	r3
    Wire.endTransmission();
   d476c:	f001 fdd4 	bl	d6318 <_Z19__fetch_global_Wirev>
  }
}
   d4770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d4774:	f001 bb6b 	b.w	d5e4e <_ZN7TwoWire15endTransmissionEv>

000d4778 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4778:	b538      	push	{r3, r4, r5, lr}
   d477a:	4604      	mov	r4, r0
   d477c:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d477e:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4780:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d4784:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d4786:	3301      	adds	r3, #1
   d4788:	d037      	beq.n	d47fa <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d478a:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d478e:	2101      	movs	r1, #1
   d4790:	b280      	uxth	r0, r0
   d4792:	f001 fd39 	bl	d6208 <pinMode>
    pinMode(cs, OUTPUT);
   d4796:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d479a:	2101      	movs	r1, #1
   d479c:	b280      	uxth	r0, r0
   d479e:	f001 fd33 	bl	d6208 <pinMode>
    if (!hwSPI){
   d47a2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d47a6:	b95b      	cbnz	r3, d47c0 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d47a8:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d47ac:	2101      	movs	r1, #1
   d47ae:	b280      	uxth	r0, r0
   d47b0:	f001 fd2a 	bl	d6208 <pinMode>
    	pinMode(sclk, OUTPUT);
   d47b4:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d47b8:	2101      	movs	r1, #1
   d47ba:	b280      	uxth	r0, r0
   d47bc:	f001 fd24 	bl	d6208 <pinMode>
    	}
    if (hwSPI){
   d47c0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d47c4:	b1eb      	cbz	r3, d4802 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d47c6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d47ca:	2101      	movs	r1, #1
   d47cc:	b280      	uxth	r0, r0
   d47ce:	f001 fd2c 	bl	d622a <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
   d47d2:	f001 fd67 	bl	d62a4 <_ZN8particle7globals11instanceSpiEv>
   d47d6:	2101      	movs	r1, #1
   d47d8:	f000 fdf9 	bl	d53ce <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
   d47dc:	f001 fd62 	bl	d62a4 <_ZN8particle7globals11instanceSpiEv>
   d47e0:	2110      	movs	r1, #16
   d47e2:	f000 fe5f 	bl	d54a4 <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
   d47e6:	f001 fd5d 	bl	d62a4 <_ZN8particle7globals11instanceSpiEv>
   d47ea:	2100      	movs	r1, #0
   d47ec:	f000 fe00 	bl	d53f0 <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
   d47f0:	f001 fd58 	bl	d62a4 <_ZN8particle7globals11instanceSpiEv>
   d47f4:	f000 fdda 	bl	d53ac <_ZN8SPIClass5beginEv>
   d47f8:	e003      	b.n	d4802 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d47fa:	f001 fd8d 	bl	d6318 <_Z19__fetch_global_Wirev>
   d47fe:	f001 fb15 	bl	d5e2c <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d4802:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4806:	2101      	movs	r1, #1
   d4808:	b280      	uxth	r0, r0
   d480a:	f001 fcfd 	bl	d6208 <pinMode>
  digitalWrite(rst, HIGH);
   d480e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4812:	2101      	movs	r1, #1
   d4814:	b280      	uxth	r0, r0
   d4816:	f001 fd08 	bl	d622a <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d481a:	2001      	movs	r0, #1
   d481c:	f001 f89e 	bl	d595c <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d4820:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4824:	2100      	movs	r1, #0
   d4826:	b280      	uxth	r0, r0
   d4828:	f001 fcff 	bl	d622a <digitalWrite>
  // wait 10ms
  delay(10);
   d482c:	200a      	movs	r0, #10
   d482e:	f001 f895 	bl	d595c <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d4832:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4836:	2101      	movs	r1, #1
   d4838:	b280      	uxth	r0, r0
   d483a:	f001 fcf6 	bl	d622a <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d483e:	4620      	mov	r0, r4
   d4840:	21ae      	movs	r1, #174	; 0xae
   d4842:	f7ff ff51 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4846:	4620      	mov	r0, r4
   d4848:	21d5      	movs	r1, #213	; 0xd5
   d484a:	f7ff ff4d 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d484e:	4620      	mov	r0, r4
   d4850:	2180      	movs	r1, #128	; 0x80
   d4852:	f7ff ff49 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4856:	4620      	mov	r0, r4
   d4858:	21a8      	movs	r1, #168	; 0xa8
   d485a:	f7ff ff45 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d485e:	4620      	mov	r0, r4
   d4860:	213f      	movs	r1, #63	; 0x3f
   d4862:	f7ff ff41 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4866:	4620      	mov	r0, r4
   d4868:	21d3      	movs	r1, #211	; 0xd3
   d486a:	f7ff ff3d 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d486e:	4620      	mov	r0, r4
   d4870:	2100      	movs	r1, #0
   d4872:	f7ff ff39 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4876:	4620      	mov	r0, r4
   d4878:	2140      	movs	r1, #64	; 0x40
   d487a:	f7ff ff35 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d487e:	218d      	movs	r1, #141	; 0x8d
   d4880:	4620      	mov	r0, r4
   d4882:	f7ff ff31 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4886:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4888:	bf0c      	ite	eq
   d488a:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d488c:	2114      	movne	r1, #20
   d488e:	4620      	mov	r0, r4
   d4890:	f7ff ff2a 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4894:	4620      	mov	r0, r4
   d4896:	2120      	movs	r1, #32
   d4898:	f7ff ff26 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d489c:	4620      	mov	r0, r4
   d489e:	2100      	movs	r1, #0
   d48a0:	f7ff ff22 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d48a4:	4620      	mov	r0, r4
   d48a6:	21a1      	movs	r1, #161	; 0xa1
   d48a8:	f7ff ff1e 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d48ac:	4620      	mov	r0, r4
   d48ae:	21c8      	movs	r1, #200	; 0xc8
   d48b0:	f7ff ff1a 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d48b4:	4620      	mov	r0, r4
   d48b6:	21da      	movs	r1, #218	; 0xda
   d48b8:	f7ff ff16 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d48bc:	4620      	mov	r0, r4
   d48be:	2112      	movs	r1, #18
   d48c0:	f7ff ff12 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d48c4:	2181      	movs	r1, #129	; 0x81
   d48c6:	4620      	mov	r0, r4
   d48c8:	f7ff ff0e 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d48cc:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d48ce:	bf0c      	ite	eq
   d48d0:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d48d2:	21cf      	movne	r1, #207	; 0xcf
   d48d4:	4620      	mov	r0, r4
   d48d6:	f7ff ff07 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d48da:	21d9      	movs	r1, #217	; 0xd9
   d48dc:	4620      	mov	r0, r4
   d48de:	f7ff ff03 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d48e2:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d48e4:	bf0c      	ite	eq
   d48e6:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d48e8:	21f1      	movne	r1, #241	; 0xf1
   d48ea:	4620      	mov	r0, r4
   d48ec:	f7ff fefc 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d48f0:	4620      	mov	r0, r4
   d48f2:	21db      	movs	r1, #219	; 0xdb
   d48f4:	f7ff fef8 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d48f8:	4620      	mov	r0, r4
   d48fa:	2140      	movs	r1, #64	; 0x40
   d48fc:	f7ff fef4 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d4900:	4620      	mov	r0, r4
   d4902:	21a4      	movs	r1, #164	; 0xa4
   d4904:	f7ff fef0 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d4908:	4620      	mov	r0, r4
   d490a:	21a6      	movs	r1, #166	; 0xa6
   d490c:	f7ff feec 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4910:	4620      	mov	r0, r4
   d4912:	21af      	movs	r1, #175	; 0xaf
}
   d4914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4918:	f7ff bee6 	b.w	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d491c <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4920:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4922:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4924:	f7ff fee0 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d4928:	2100      	movs	r1, #0
   d492a:	4620      	mov	r0, r4
   d492c:	f7ff fedc 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4930:	217f      	movs	r1, #127	; 0x7f
   d4932:	4620      	mov	r0, r4
   d4934:	f7ff fed8 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d4938:	2122      	movs	r1, #34	; 0x22
   d493a:	4620      	mov	r0, r4
   d493c:	f7ff fed4 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4940:	2100      	movs	r1, #0
   d4942:	4620      	mov	r0, r4
   d4944:	f7ff fed0 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d4948:	2107      	movs	r1, #7
   d494a:	4620      	mov	r0, r4
   d494c:	f7ff fecc 	bl	d46e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d4950:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4954:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d4a14 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d4958:	3301      	adds	r3, #1
   d495a:	d035      	beq.n	d49c8 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d495c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4960:	2101      	movs	r1, #1
   d4962:	b280      	uxth	r0, r0
   d4964:	f001 fc61 	bl	d622a <digitalWrite>
    digitalWrite(dc, HIGH);
   d4968:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d496c:	2101      	movs	r1, #1
   d496e:	b280      	uxth	r0, r0
   d4970:	f001 fc5b 	bl	d622a <digitalWrite>
    digitalWrite(cs, LOW);
   d4974:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4978:	2100      	movs	r1, #0
   d497a:	b280      	uxth	r0, r0
   d497c:	f001 fc55 	bl	d622a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4980:	2001      	movs	r0, #1
   d4982:	f000 faa5 	bl	d4ed0 <HAL_Delay_Microseconds>
   d4986:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4988:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d498c:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4990:	b12b      	cbz	r3, d499e <_ZN16Adafruit_SSD13067displayEv+0x82>
    (void)SPI.transfer(d);
   d4992:	f001 fc87 	bl	d62a4 <_ZN8particle7globals11instanceSpiEv>
   d4996:	4631      	mov	r1, r6
   d4998:	f000 fda8 	bl	d54ec <_ZN8SPIClass8transferEh>
   d499c:	e005      	b.n	d49aa <_ZN16Adafruit_SSD13067displayEv+0x8e>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d499e:	4633      	mov	r3, r6
   d49a0:	2201      	movs	r2, #1
   d49a2:	7fa1      	ldrb	r1, [r4, #30]
   d49a4:	7f60      	ldrb	r0, [r4, #29]
   d49a6:	f001 fc59 	bl	d625c <shiftOut>
   d49aa:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d49ac:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d49b0:	d1ea      	bne.n	d4988 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d49b2:	2001      	movs	r0, #1
   d49b4:	f000 fa8c 	bl	d4ed0 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d49b8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d49bc:	2101      	movs	r1, #1
   d49be:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d49c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d49c4:	f001 bc31 	b.w	d622a <digitalWrite>
   d49c8:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d49ca:	f001 fca5 	bl	d6318 <_Z19__fetch_global_Wirev>
   d49ce:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d49d2:	f001 fa35 	bl	d5e40 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d49d6:	f001 fc9f 	bl	d6318 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d49da:	6803      	ldr	r3, [r0, #0]
   d49dc:	2140      	movs	r1, #64	; 0x40
   d49de:	689b      	ldr	r3, [r3, #8]
   d49e0:	4798      	blx	r3
   d49e2:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d49e4:	f001 fc98 	bl	d6318 <_Z19__fetch_global_Wirev>
   d49e8:	19af      	adds	r7, r5, r6
   d49ea:	6803      	ldr	r3, [r0, #0]
   d49ec:	b2bf      	uxth	r7, r7
   d49ee:	689b      	ldr	r3, [r3, #8]
   d49f0:	f818 1007 	ldrb.w	r1, [r8, r7]
   d49f4:	3601      	adds	r6, #1
   d49f6:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d49f8:	2e10      	cmp	r6, #16
   d49fa:	d1f3      	bne.n	d49e4 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d49fc:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d49fe:	f001 fc8b 	bl	d6318 <_Z19__fetch_global_Wirev>
   d4a02:	b2ad      	uxth	r5, r5
   d4a04:	f001 fa23 	bl	d5e4e <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4a08:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4a0c:	d1dd      	bne.n	d49ca <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4a12:	bf00      	nop
   d4a14:	2003debc 	.word	0x2003debc

000d4a18 <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4a1c:	2100      	movs	r1, #0
   d4a1e:	4801      	ldr	r0, [pc, #4]	; (d4a24 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4a20:	f001 bf57 	b.w	d68d2 <memset>
   d4a24:	2003debc 	.word	0x2003debc

000d4a28 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4a28:	f000 b9da 	b.w	d4de0 <HAL_Pin_Map>

000d4a2c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a30:	b085      	sub	sp, #20
   d4a32:	461e      	mov	r6, r3
   d4a34:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d4a38:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d4a3c:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4a3e:	1a9a      	subs	r2, r3, r2
   d4a40:	2a00      	cmp	r2, #0
   d4a42:	bfb8      	it	lt
   d4a44:	4252      	neglt	r2, r2
   d4a46:	9200      	str	r2, [sp, #0]
   d4a48:	1a72      	subs	r2, r6, r1
   d4a4a:	2a00      	cmp	r2, #0
   d4a4c:	bfb8      	it	lt
   d4a4e:	4252      	neglt	r2, r2
   d4a50:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4a52:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4a54:	9a00      	ldr	r2, [sp, #0]
   d4a56:	9901      	ldr	r1, [sp, #4]
   d4a58:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4a5a:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4a5c:	dd05      	ble.n	d4a6a <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d4a5e:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d4a60:	461e      	mov	r6, r3
   d4a62:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4a64:	4622      	mov	r2, r4
    swap(x0, y0);
   d4a66:	462c      	mov	r4, r5
   d4a68:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4a6a:	42b4      	cmp	r4, r6
   d4a6c:	dd05      	ble.n	d4a7a <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d4a6e:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d4a70:	461d      	mov	r5, r3
   d4a72:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4a74:	4622      	mov	r2, r4
   d4a76:	4634      	mov	r4, r6
   d4a78:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4a7a:	1b5a      	subs	r2, r3, r5
   d4a7c:	2a00      	cmp	r2, #0
   d4a7e:	bfb8      	it	lt
   d4a80:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4a82:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4a86:	429d      	cmp	r5, r3
   d4a88:	bfb4      	ite	lt
   d4a8a:	2301      	movlt	r3, #1
   d4a8c:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4a90:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4a94:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4a96:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d4a98:	fa0f f788 	sxth.w	r7, r8
   d4a9c:	2202      	movs	r2, #2
   d4a9e:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4aa2:	42b4      	cmp	r4, r6
   d4aa4:	dc1f      	bgt.n	d4ae6 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d4aa6:	9a01      	ldr	r2, [sp, #4]
   d4aa8:	9b00      	ldr	r3, [sp, #0]
   d4aaa:	4293      	cmp	r3, r2
   d4aac:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d4ab0:	bfc8      	it	gt
   d4ab2:	4622      	movgt	r2, r4
   d4ab4:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4ab8:	bfc8      	it	gt
   d4aba:	4629      	movgt	r1, r5
   d4abc:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d4abe:	bfdc      	itt	le
   d4ac0:	462a      	movle	r2, r5
   d4ac2:	4621      	movle	r1, r4
   d4ac4:	4648      	mov	r0, r9
   d4ac6:	47d8      	blx	fp
    }
    err -= dy;
   d4ac8:	9b03      	ldr	r3, [sp, #12]
   d4aca:	1aff      	subs	r7, r7, r3
   d4acc:	b2bb      	uxth	r3, r7
   d4ace:	b21f      	sxth	r7, r3
    if (err < 0) {
   d4ad0:	2f00      	cmp	r7, #0
   d4ad2:	da05      	bge.n	d4ae0 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d4ad4:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d4ad6:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d4ada:	4415      	add	r5, r2
   d4adc:	b22d      	sxth	r5, r5
      err += dx;
   d4ade:	b23f      	sxth	r7, r7
   d4ae0:	3401      	adds	r4, #1
   d4ae2:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4ae4:	e7dd      	b.n	d4aa2 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d4ae6:	b005      	add	sp, #20
   d4ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4aec <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4aec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4af0:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4af4:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4af6:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d4afa:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4afc:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d4afe:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4b00:	4691      	mov	r9, r2
   d4b02:	460d      	mov	r5, r1
   d4b04:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d4b06:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4b08:	6823      	ldr	r3, [r4, #0]
   d4b0a:	9600      	str	r6, [sp, #0]
   d4b0c:	f10a 32ff 	add.w	r2, sl, #4294967295
   d4b10:	444a      	add	r2, r9
   d4b12:	69df      	ldr	r7, [r3, #28]
   d4b14:	4629      	mov	r1, r5
   d4b16:	4643      	mov	r3, r8
   d4b18:	4620      	mov	r0, r4
   d4b1a:	b212      	sxth	r2, r2
   d4b1c:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d4b1e:	6823      	ldr	r3, [r4, #0]
   d4b20:	9600      	str	r6, [sp, #0]
   d4b22:	699f      	ldr	r7, [r3, #24]
   d4b24:	464a      	mov	r2, r9
   d4b26:	4653      	mov	r3, sl
   d4b28:	4629      	mov	r1, r5
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d4b2e:	6823      	ldr	r3, [r4, #0]
   d4b30:	960a      	str	r6, [sp, #40]	; 0x28
   d4b32:	f108 31ff 	add.w	r1, r8, #4294967295
   d4b36:	4429      	add	r1, r5
   d4b38:	699d      	ldr	r5, [r3, #24]
   d4b3a:	464a      	mov	r2, r9
   d4b3c:	4653      	mov	r3, sl
   d4b3e:	b209      	sxth	r1, r1
   d4b40:	4620      	mov	r0, r4
   d4b42:	46ac      	mov	ip, r5
}
   d4b44:	b002      	add	sp, #8
   d4b46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d4b4a:	4760      	bx	ip

000d4b4c <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d4b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d4b4e:	3b01      	subs	r3, #1
   d4b50:	4413      	add	r3, r2
   d4b52:	6804      	ldr	r4, [r0, #0]
   d4b54:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4b58:	9501      	str	r5, [sp, #4]
   d4b5a:	b21b      	sxth	r3, r3
   d4b5c:	9300      	str	r3, [sp, #0]
   d4b5e:	6964      	ldr	r4, [r4, #20]
   d4b60:	460b      	mov	r3, r1
   d4b62:	47a0      	blx	r4
}
   d4b64:	b003      	add	sp, #12
   d4b66:	bd30      	pop	{r4, r5, pc}

000d4b68 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d4b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d4b6a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4b6e:	6804      	ldr	r4, [r0, #0]
   d4b70:	e88d 0024 	stmia.w	sp, {r2, r5}
   d4b74:	3b01      	subs	r3, #1
   d4b76:	440b      	add	r3, r1
   d4b78:	6964      	ldr	r4, [r4, #20]
   d4b7a:	b21b      	sxth	r3, r3
   d4b7c:	47a0      	blx	r4
}
   d4b7e:	b003      	add	sp, #12
   d4b80:	bd30      	pop	{r4, r5, pc}

000d4b82 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4b82:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4b86:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d4b8a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4b8e:	4605      	mov	r5, r0
   d4b90:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4b92:	460c      	mov	r4, r1
   d4b94:	eb01 0a03 	add.w	sl, r1, r3
   d4b98:	4554      	cmp	r4, sl
   d4b9a:	da0b      	bge.n	d4bb4 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d4b9c:	682b      	ldr	r3, [r5, #0]
   d4b9e:	f8cd 9000 	str.w	r9, [sp]
   d4ba2:	699e      	ldr	r6, [r3, #24]
   d4ba4:	4621      	mov	r1, r4
   d4ba6:	4643      	mov	r3, r8
   d4ba8:	463a      	mov	r2, r7
   d4baa:	4628      	mov	r0, r5
   d4bac:	3401      	adds	r4, #1
   d4bae:	47b0      	blx	r6
   d4bb0:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4bb2:	e7f1      	b.n	d4b98 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d4bb4:	b002      	add	sp, #8
   d4bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4bba <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d4bba:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d4bbc:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d4bc0:	6804      	ldr	r4, [r0, #0]
   d4bc2:	9101      	str	r1, [sp, #4]
   d4bc4:	9200      	str	r2, [sp, #0]
   d4bc6:	2200      	movs	r2, #0
   d4bc8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4bcc:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d4bce:	4611      	mov	r1, r2
   d4bd0:	47a0      	blx	r4
}
   d4bd2:	b002      	add	sp, #8
   d4bd4:	bd10      	pop	{r4, pc}

000d4bd6 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d4bd6:	4770      	bx	lr

000d4bd8 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4bd8:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d4bda:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4bdc:	2400      	movs	r4, #0
   d4bde:	4d08      	ldr	r5, [pc, #32]	; (d4c00 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4be0:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d4be2:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d4be4:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d4be6:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d4bea:	2201      	movs	r2, #1
   d4bec:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d4bee:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d4bf0:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d4bf2:	8204      	strh	r4, [r0, #16]
   d4bf4:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d4bf6:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d4bf8:	82c1      	strh	r1, [r0, #22]
   d4bfa:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d4bfc:	7682      	strb	r2, [r0, #26]
}
   d4bfe:	bd30      	pop	{r4, r5, pc}
   d4c00:	000d7220 	.word	0x000d7220

000d4c04 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c08:	b08f      	sub	sp, #60	; 0x3c
   d4c0a:	4605      	mov	r5, r0
   d4c0c:	9106      	str	r1, [sp, #24]
   d4c0e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d4c12:	9107      	str	r1, [sp, #28]
   d4c14:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d4c18:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d4c1a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d4c1e:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4c20:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d4c24:	4281      	cmp	r1, r0
   d4c26:	dd7c      	ble.n	d4d22 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d4c28:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d4c2c:	4291      	cmp	r1, r2
   d4c2e:	dd78      	ble.n	d4d22 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d4c30:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d4c32:	fb11 0008 	smlabb	r0, r1, r8, r0
   d4c36:	2800      	cmp	r0, #0
   d4c38:	dd73      	ble.n	d4d22 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d4c3a:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d4c3e:	2800      	cmp	r0, #0
   d4c40:	dd6f      	ble.n	d4d22 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4c42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4c46:	b296      	uxth	r6, r2
   d4c48:	930c      	str	r3, [sp, #48]	; 0x30
   d4c4a:	f106 0308 	add.w	r3, r6, #8
   d4c4e:	b29b      	uxth	r3, r3
   d4c50:	9109      	str	r1, [sp, #36]	; 0x24
   d4c52:	2400      	movs	r4, #0
   d4c54:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d4c56:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4c58:	bf1c      	itt	ne
   d4c5a:	4b33      	ldrne	r3, [pc, #204]	; (d4d28 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d4c5c:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4c5e:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4c60:	bf16      	itet	ne
   d4c62:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d4c64:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4c68:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4c6c:	9604      	str	r6, [sp, #16]
   d4c6e:	fa1f f388 	uxth.w	r3, r8
   d4c72:	9303      	str	r3, [sp, #12]
   d4c74:	9a03      	ldr	r2, [sp, #12]
   d4c76:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d4c7a:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4c7e:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4c82:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4c84:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4c86:	920a      	str	r2, [sp, #40]	; 0x28
   d4c88:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4c8a:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4c8e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d4c90:	f019 0f01 	tst.w	r9, #1
   d4c94:	d011      	beq.n	d4cba <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d4c96:	f1b8 0f01 	cmp.w	r8, #1
   d4c9a:	682b      	ldr	r3, [r5, #0]
   d4c9c:	d103      	bne.n	d4ca6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d4c9e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4ca2:	9b07      	ldr	r3, [sp, #28]
   d4ca4:	e014      	b.n	d4cd0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4ca6:	9a07      	ldr	r2, [sp, #28]
   d4ca8:	9201      	str	r2, [sp, #4]
   d4caa:	f8cd a000 	str.w	sl, [sp]
   d4cae:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4cb2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d4cb6:	4653      	mov	r3, sl
   d4cb8:	e018      	b.n	d4cec <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d4cba:	9b07      	ldr	r3, [sp, #28]
   d4cbc:	9a08      	ldr	r2, [sp, #32]
   d4cbe:	4293      	cmp	r3, r2
   d4cc0:	d017      	beq.n	d4cf2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4cc2:	f1b8 0f01 	cmp.w	r8, #1
   d4cc6:	682b      	ldr	r3, [r5, #0]
   d4cc8:	d107      	bne.n	d4cda <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d4cca:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4cce:	4613      	mov	r3, r2
   d4cd0:	b23a      	sxth	r2, r7
   d4cd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4cd4:	4628      	mov	r0, r5
   d4cd6:	47d8      	blx	fp
   d4cd8:	e00b      	b.n	d4cf2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4cda:	9a08      	ldr	r2, [sp, #32]
   d4cdc:	9201      	str	r2, [sp, #4]
   d4cde:	f8cd a000 	str.w	sl, [sp]
   d4ce2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d4ce6:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4cea:	4653      	mov	r3, sl
   d4cec:	990a      	ldr	r1, [sp, #40]	; 0x28
   d4cee:	4628      	mov	r0, r5
   d4cf0:	47d8      	blx	fp
   d4cf2:	9b04      	ldr	r3, [sp, #16]
   d4cf4:	9a03      	ldr	r2, [sp, #12]
   d4cf6:	4413      	add	r3, r2
   d4cf8:	b29b      	uxth	r3, r3
   d4cfa:	9304      	str	r3, [sp, #16]
   d4cfc:	9b05      	ldr	r3, [sp, #20]
   d4cfe:	4413      	add	r3, r2
   d4d00:	b29b      	uxth	r3, r3
   d4d02:	3701      	adds	r7, #1
   d4d04:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4d08:	b2bf      	uxth	r7, r7
   d4d0a:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d4d0c:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4d10:	d1be      	bne.n	d4c90 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d4d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4d14:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d4d16:	3401      	adds	r4, #1
   d4d18:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4d1c:	b264      	sxtb	r4, r4
   d4d1e:	9309      	str	r3, [sp, #36]	; 0x24
   d4d20:	d199      	bne.n	d4c56 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d4d22:	b00f      	add	sp, #60	; 0x3c
   d4d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d28:	000d7250 	.word	0x000d7250

000d4d2c <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4d2c:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d4d2e:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4d30:	b085      	sub	sp, #20
   d4d32:	4604      	mov	r4, r0
   d4d34:	460b      	mov	r3, r1

  if (c == '\n') {
   d4d36:	d104      	bne.n	d4d42 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d4d38:	7e02      	ldrb	r2, [r0, #24]
   d4d3a:	8a43      	ldrh	r3, [r0, #18]
   d4d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d4d40:	e023      	b.n	d4d8a <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d4d42:	290d      	cmp	r1, #13
   d4d44:	d024      	beq.n	d4d90 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d4d46:	7e05      	ldrb	r5, [r0, #24]
   d4d48:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d4d4c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d4d50:	9502      	str	r5, [sp, #8]
   d4d52:	8ac5      	ldrh	r5, [r0, #22]
   d4d54:	9501      	str	r5, [sp, #4]
   d4d56:	8a85      	ldrh	r5, [r0, #20]
   d4d58:	9500      	str	r5, [sp, #0]
   d4d5a:	f7ff ff53 	bl	d4c04 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d4d5e:	7e22      	ldrb	r2, [r4, #24]
   d4d60:	8a23      	ldrh	r3, [r4, #16]
   d4d62:	b291      	uxth	r1, r2
   d4d64:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d4d68:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4d6c:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d4d6e:	b21b      	sxth	r3, r3
   d4d70:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4d72:	b168      	cbz	r0, d4d90 <_ZN12Adafruit_GFX5writeEh+0x64>
   d4d74:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d4d78:	f06f 0505 	mvn.w	r5, #5
   d4d7c:	fb05 0202 	mla	r2, r5, r2, r0
   d4d80:	4293      	cmp	r3, r2
   d4d82:	dd05      	ble.n	d4d90 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d4d84:	8a63      	ldrh	r3, [r4, #18]
   d4d86:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d4d8a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d4d8c:	2300      	movs	r3, #0
   d4d8e:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d4d90:	2001      	movs	r0, #1
   d4d92:	b005      	add	sp, #20
   d4d94:	bd30      	pop	{r4, r5, pc}

000d4d96 <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d4d96:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d4d98:	8242      	strh	r2, [r0, #18]
   d4d9a:	4770      	bx	lr

000d4d9c <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d4d9c:	2900      	cmp	r1, #0
   d4d9e:	bf08      	it	eq
   d4da0:	2101      	moveq	r1, #1
   d4da2:	7601      	strb	r1, [r0, #24]
   d4da4:	4770      	bx	lr

000d4da6 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d4da6:	82c1      	strh	r1, [r0, #22]
   d4da8:	8281      	strh	r1, [r0, #20]
   d4daa:	4770      	bx	lr

000d4dac <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d4dac:	7e40      	ldrb	r0, [r0, #25]
   d4dae:	4770      	bx	lr

000d4db0 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d4db0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d4db4:	4770      	bx	lr

000d4db6 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d4db6:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d4dba:	4770      	bx	lr

000d4dbc <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4dbc:	f000 b810 	b.w	d4de0 <HAL_Pin_Map>

000d4dc0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4dc0:	b508      	push	{r3, lr}
   d4dc2:	4b02      	ldr	r3, [pc, #8]	; (d4dcc <netdb_freeaddrinfo+0xc>)
   d4dc4:	681b      	ldr	r3, [r3, #0]
   d4dc6:	689b      	ldr	r3, [r3, #8]
   d4dc8:	9301      	str	r3, [sp, #4]
   d4dca:	bd08      	pop	{r3, pc}
   d4dcc:	00030268 	.word	0x00030268

000d4dd0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4dd0:	b508      	push	{r3, lr}
   d4dd2:	4b02      	ldr	r3, [pc, #8]	; (d4ddc <netdb_getaddrinfo+0xc>)
   d4dd4:	681b      	ldr	r3, [r3, #0]
   d4dd6:	68db      	ldr	r3, [r3, #12]
   d4dd8:	9301      	str	r3, [sp, #4]
   d4dda:	bd08      	pop	{r3, pc}
   d4ddc:	00030268 	.word	0x00030268

000d4de0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4de0:	b508      	push	{r3, lr}
   d4de2:	4b02      	ldr	r3, [pc, #8]	; (d4dec <HAL_Pin_Map+0xc>)
   d4de4:	681b      	ldr	r3, [r3, #0]
   d4de6:	681b      	ldr	r3, [r3, #0]
   d4de8:	9301      	str	r3, [sp, #4]
   d4dea:	bd08      	pop	{r3, pc}
   d4dec:	0003022c 	.word	0x0003022c

000d4df0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4df0:	b508      	push	{r3, lr}
   d4df2:	4b02      	ldr	r3, [pc, #8]	; (d4dfc <HAL_Pin_Mode+0xc>)
   d4df4:	681b      	ldr	r3, [r3, #0]
   d4df6:	689b      	ldr	r3, [r3, #8]
   d4df8:	9301      	str	r3, [sp, #4]
   d4dfa:	bd08      	pop	{r3, pc}
   d4dfc:	0003022c 	.word	0x0003022c

000d4e00 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4e00:	b508      	push	{r3, lr}
   d4e02:	4b02      	ldr	r3, [pc, #8]	; (d4e0c <HAL_Get_Pin_Mode+0xc>)
   d4e04:	681b      	ldr	r3, [r3, #0]
   d4e06:	68db      	ldr	r3, [r3, #12]
   d4e08:	9301      	str	r3, [sp, #4]
   d4e0a:	bd08      	pop	{r3, pc}
   d4e0c:	0003022c 	.word	0x0003022c

000d4e10 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4e10:	b508      	push	{r3, lr}
   d4e12:	4b02      	ldr	r3, [pc, #8]	; (d4e1c <HAL_GPIO_Write+0xc>)
   d4e14:	681b      	ldr	r3, [r3, #0]
   d4e16:	691b      	ldr	r3, [r3, #16]
   d4e18:	9301      	str	r3, [sp, #4]
   d4e1a:	bd08      	pop	{r3, pc}
   d4e1c:	0003022c 	.word	0x0003022c

000d4e20 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4e20:	b508      	push	{r3, lr}
   d4e22:	4b02      	ldr	r3, [pc, #8]	; (d4e2c <HAL_SPI_Begin+0xc>)
   d4e24:	681b      	ldr	r3, [r3, #0]
   d4e26:	681b      	ldr	r3, [r3, #0]
   d4e28:	9301      	str	r3, [sp, #4]
   d4e2a:	bd08      	pop	{r3, pc}
   d4e2c:	00030230 	.word	0x00030230

000d4e30 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d4e30:	b508      	push	{r3, lr}
   d4e32:	4b02      	ldr	r3, [pc, #8]	; (d4e3c <HAL_SPI_Set_Bit_Order+0xc>)
   d4e34:	681b      	ldr	r3, [r3, #0]
   d4e36:	689b      	ldr	r3, [r3, #8]
   d4e38:	9301      	str	r3, [sp, #4]
   d4e3a:	bd08      	pop	{r3, pc}
   d4e3c:	00030230 	.word	0x00030230

000d4e40 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d4e40:	b508      	push	{r3, lr}
   d4e42:	4b02      	ldr	r3, [pc, #8]	; (d4e4c <HAL_SPI_Set_Data_Mode+0xc>)
   d4e44:	681b      	ldr	r3, [r3, #0]
   d4e46:	68db      	ldr	r3, [r3, #12]
   d4e48:	9301      	str	r3, [sp, #4]
   d4e4a:	bd08      	pop	{r3, pc}
   d4e4c:	00030230 	.word	0x00030230

000d4e50 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d4e50:	b508      	push	{r3, lr}
   d4e52:	4b02      	ldr	r3, [pc, #8]	; (d4e5c <HAL_SPI_Set_Clock_Divider+0xc>)
   d4e54:	681b      	ldr	r3, [r3, #0]
   d4e56:	691b      	ldr	r3, [r3, #16]
   d4e58:	9301      	str	r3, [sp, #4]
   d4e5a:	bd08      	pop	{r3, pc}
   d4e5c:	00030230 	.word	0x00030230

000d4e60 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4e60:	b508      	push	{r3, lr}
   d4e62:	4b02      	ldr	r3, [pc, #8]	; (d4e6c <HAL_SPI_Send_Receive_Data+0xc>)
   d4e64:	681b      	ldr	r3, [r3, #0]
   d4e66:	695b      	ldr	r3, [r3, #20]
   d4e68:	9301      	str	r3, [sp, #4]
   d4e6a:	bd08      	pop	{r3, pc}
   d4e6c:	00030230 	.word	0x00030230

000d4e70 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4e70:	b508      	push	{r3, lr}
   d4e72:	4b02      	ldr	r3, [pc, #8]	; (d4e7c <HAL_SPI_Init+0xc>)
   d4e74:	681b      	ldr	r3, [r3, #0]
   d4e76:	69db      	ldr	r3, [r3, #28]
   d4e78:	9301      	str	r3, [sp, #4]
   d4e7a:	bd08      	pop	{r3, pc}
   d4e7c:	00030230 	.word	0x00030230

000d4e80 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4e80:	b508      	push	{r3, lr}
   d4e82:	4b02      	ldr	r3, [pc, #8]	; (d4e8c <HAL_SPI_Is_Enabled+0xc>)
   d4e84:	681b      	ldr	r3, [r3, #0]
   d4e86:	6a1b      	ldr	r3, [r3, #32]
   d4e88:	9301      	str	r3, [sp, #4]
   d4e8a:	bd08      	pop	{r3, pc}
   d4e8c:	00030230 	.word	0x00030230

000d4e90 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4e90:	b508      	push	{r3, lr}
   d4e92:	4b02      	ldr	r3, [pc, #8]	; (d4e9c <HAL_SPI_Info+0xc>)
   d4e94:	681b      	ldr	r3, [r3, #0]
   d4e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e98:	9301      	str	r3, [sp, #4]
   d4e9a:	bd08      	pop	{r3, pc}
   d4e9c:	00030230 	.word	0x00030230

000d4ea0 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d4ea0:	b508      	push	{r3, lr}
   d4ea2:	4b02      	ldr	r3, [pc, #8]	; (d4eac <HAL_SPI_Acquire+0xc>)
   d4ea4:	681b      	ldr	r3, [r3, #0]
   d4ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ea8:	9301      	str	r3, [sp, #4]
   d4eaa:	bd08      	pop	{r3, pc}
   d4eac:	00030230 	.word	0x00030230

000d4eb0 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d4eb0:	b508      	push	{r3, lr}
   d4eb2:	4b02      	ldr	r3, [pc, #8]	; (d4ebc <HAL_SPI_Release+0xc>)
   d4eb4:	681b      	ldr	r3, [r3, #0]
   d4eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4eb8:	9301      	str	r3, [sp, #4]
   d4eba:	bd08      	pop	{r3, pc}
   d4ebc:	00030230 	.word	0x00030230

000d4ec0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4ec0:	b508      	push	{r3, lr}
   d4ec2:	4b02      	ldr	r3, [pc, #8]	; (d4ecc <HAL_RNG_GetRandomNumber+0xc>)
   d4ec4:	681b      	ldr	r3, [r3, #0]
   d4ec6:	685b      	ldr	r3, [r3, #4]
   d4ec8:	9301      	str	r3, [sp, #4]
   d4eca:	bd08      	pop	{r3, pc}
   d4ecc:	00030218 	.word	0x00030218

000d4ed0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4ed0:	b508      	push	{r3, lr}
   d4ed2:	4b02      	ldr	r3, [pc, #8]	; (d4edc <HAL_Delay_Microseconds+0xc>)
   d4ed4:	681b      	ldr	r3, [r3, #0]
   d4ed6:	68db      	ldr	r3, [r3, #12]
   d4ed8:	9301      	str	r3, [sp, #4]
   d4eda:	bd08      	pop	{r3, pc}
   d4edc:	00030218 	.word	0x00030218

000d4ee0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4ee0:	b508      	push	{r3, lr}
   d4ee2:	4b02      	ldr	r3, [pc, #8]	; (d4eec <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4ee4:	681b      	ldr	r3, [r3, #0]
   d4ee6:	695b      	ldr	r3, [r3, #20]
   d4ee8:	9301      	str	r3, [sp, #4]
   d4eea:	bd08      	pop	{r3, pc}
   d4eec:	00030218 	.word	0x00030218

000d4ef0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4ef0:	b508      	push	{r3, lr}
   d4ef2:	4b02      	ldr	r3, [pc, #8]	; (d4efc <HAL_RTC_Get_UnixTime+0xc>)
   d4ef4:	681b      	ldr	r3, [r3, #0]
   d4ef6:	69db      	ldr	r3, [r3, #28]
   d4ef8:	9301      	str	r3, [sp, #4]
   d4efa:	bd08      	pop	{r3, pc}
   d4efc:	00030218 	.word	0x00030218

000d4f00 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4f00:	b508      	push	{r3, lr}
   d4f02:	4b02      	ldr	r3, [pc, #8]	; (d4f0c <HAL_RTC_Time_Is_Valid+0xc>)
   d4f04:	681b      	ldr	r3, [r3, #0]
   d4f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4f08:	9301      	str	r3, [sp, #4]
   d4f0a:	bd08      	pop	{r3, pc}
   d4f0c:	00030218 	.word	0x00030218

000d4f10 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4f10:	b508      	push	{r3, lr}
   d4f12:	4b02      	ldr	r3, [pc, #8]	; (d4f1c <os_thread_is_current+0xc>)
   d4f14:	681b      	ldr	r3, [r3, #0]
   d4f16:	689b      	ldr	r3, [r3, #8]
   d4f18:	9301      	str	r3, [sp, #4]
   d4f1a:	bd08      	pop	{r3, pc}
   d4f1c:	00030248 	.word	0x00030248

000d4f20 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4f20:	b508      	push	{r3, lr}
   d4f22:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <os_thread_join+0xc>)
   d4f24:	681b      	ldr	r3, [r3, #0]
   d4f26:	691b      	ldr	r3, [r3, #16]
   d4f28:	9301      	str	r3, [sp, #4]
   d4f2a:	bd08      	pop	{r3, pc}
   d4f2c:	00030248 	.word	0x00030248

000d4f30 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4f30:	b508      	push	{r3, lr}
   d4f32:	4b02      	ldr	r3, [pc, #8]	; (d4f3c <os_thread_cleanup+0xc>)
   d4f34:	681b      	ldr	r3, [r3, #0]
   d4f36:	695b      	ldr	r3, [r3, #20]
   d4f38:	9301      	str	r3, [sp, #4]
   d4f3a:	bd08      	pop	{r3, pc}
   d4f3c:	00030248 	.word	0x00030248

000d4f40 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4f40:	b508      	push	{r3, lr}
   d4f42:	4b02      	ldr	r3, [pc, #8]	; (d4f4c <os_mutex_recursive_create+0xc>)
   d4f44:	681b      	ldr	r3, [r3, #0]
   d4f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f48:	9301      	str	r3, [sp, #4]
   d4f4a:	bd08      	pop	{r3, pc}
   d4f4c:	00030248 	.word	0x00030248

000d4f50 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4f50:	b508      	push	{r3, lr}
   d4f52:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <os_mutex_recursive_destroy+0xc>)
   d4f54:	681b      	ldr	r3, [r3, #0]
   d4f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f58:	9301      	str	r3, [sp, #4]
   d4f5a:	bd08      	pop	{r3, pc}
   d4f5c:	00030248 	.word	0x00030248

000d4f60 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4f60:	b508      	push	{r3, lr}
   d4f62:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <inet_inet_ntop+0xc>)
   d4f64:	681b      	ldr	r3, [r3, #0]
   d4f66:	695b      	ldr	r3, [r3, #20]
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	00030264 	.word	0x00030264

000d4f70 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4f70:	b508      	push	{r3, lr}
   d4f72:	4b02      	ldr	r3, [pc, #8]	; (d4f7c <HAL_USART_Init+0xc>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	681b      	ldr	r3, [r3, #0]
   d4f78:	9301      	str	r3, [sp, #4]
   d4f7a:	bd08      	pop	{r3, pc}
   d4f7c:	0003023c 	.word	0x0003023c

000d4f80 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <HAL_USART_Write_Data+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	68db      	ldr	r3, [r3, #12]
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	0003023c 	.word	0x0003023c

000d4f90 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <HAL_USART_Available_Data+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	691b      	ldr	r3, [r3, #16]
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	0003023c 	.word	0x0003023c

000d4fa0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <HAL_USART_Read_Data+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	695b      	ldr	r3, [r3, #20]
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	0003023c 	.word	0x0003023c

000d4fb0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <HAL_USART_Peek_Data+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	699b      	ldr	r3, [r3, #24]
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	0003023c 	.word	0x0003023c

000d4fc0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <HAL_USART_Flush_Data+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	69db      	ldr	r3, [r3, #28]
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	0003023c 	.word	0x0003023c

000d4fd0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <HAL_USART_Is_Enabled+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	6a1b      	ldr	r3, [r3, #32]
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	0003023c 	.word	0x0003023c

000d4fe0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <HAL_USART_Available_Data_For_Write+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	0003023c 	.word	0x0003023c

000d4ff0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <HAL_I2C_Begin+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	68db      	ldr	r3, [r3, #12]
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	00030228 	.word	0x00030228

000d5000 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <HAL_I2C_Begin_Transmission+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	699b      	ldr	r3, [r3, #24]
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	00030228 	.word	0x00030228

000d5010 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <HAL_I2C_End_Transmission+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	69db      	ldr	r3, [r3, #28]
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	00030228 	.word	0x00030228

000d5020 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b02      	ldr	r3, [pc, #8]	; (d502c <HAL_I2C_Write_Data+0xc>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	6a1b      	ldr	r3, [r3, #32]
   d5028:	9301      	str	r3, [sp, #4]
   d502a:	bd08      	pop	{r3, pc}
   d502c:	00030228 	.word	0x00030228

000d5030 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <HAL_I2C_Available_Data+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	00030228 	.word	0x00030228

000d5040 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <HAL_I2C_Read_Data+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	00030228 	.word	0x00030228

000d5050 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5050:	b508      	push	{r3, lr}
   d5052:	4b02      	ldr	r3, [pc, #8]	; (d505c <HAL_I2C_Peek_Data+0xc>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5058:	9301      	str	r3, [sp, #4]
   d505a:	bd08      	pop	{r3, pc}
   d505c:	00030228 	.word	0x00030228

000d5060 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5060:	b508      	push	{r3, lr}
   d5062:	4b02      	ldr	r3, [pc, #8]	; (d506c <HAL_I2C_Flush_Data+0xc>)
   d5064:	681b      	ldr	r3, [r3, #0]
   d5066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5068:	9301      	str	r3, [sp, #4]
   d506a:	bd08      	pop	{r3, pc}
   d506c:	00030228 	.word	0x00030228

000d5070 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5070:	b508      	push	{r3, lr}
   d5072:	4b02      	ldr	r3, [pc, #8]	; (d507c <HAL_I2C_Is_Enabled+0xc>)
   d5074:	681b      	ldr	r3, [r3, #0]
   d5076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5078:	9301      	str	r3, [sp, #4]
   d507a:	bd08      	pop	{r3, pc}
   d507c:	00030228 	.word	0x00030228

000d5080 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5080:	b508      	push	{r3, lr}
   d5082:	4b02      	ldr	r3, [pc, #8]	; (d508c <HAL_I2C_Init+0xc>)
   d5084:	681b      	ldr	r3, [r3, #0]
   d5086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5088:	9301      	str	r3, [sp, #4]
   d508a:	bd08      	pop	{r3, pc}
   d508c:	00030228 	.word	0x00030228

000d5090 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5090:	b508      	push	{r3, lr}
   d5092:	4b02      	ldr	r3, [pc, #8]	; (d509c <HAL_USB_USART_Init+0xc>)
   d5094:	681b      	ldr	r3, [r3, #0]
   d5096:	681b      	ldr	r3, [r3, #0]
   d5098:	9301      	str	r3, [sp, #4]
   d509a:	bd08      	pop	{r3, pc}
   d509c:	0003024c 	.word	0x0003024c

000d50a0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d50a0:	b508      	push	{r3, lr}
   d50a2:	4b02      	ldr	r3, [pc, #8]	; (d50ac <HAL_USB_USART_Begin+0xc>)
   d50a4:	681b      	ldr	r3, [r3, #0]
   d50a6:	685b      	ldr	r3, [r3, #4]
   d50a8:	9301      	str	r3, [sp, #4]
   d50aa:	bd08      	pop	{r3, pc}
   d50ac:	0003024c 	.word	0x0003024c

000d50b0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d50b0:	b508      	push	{r3, lr}
   d50b2:	4b02      	ldr	r3, [pc, #8]	; (d50bc <HAL_USB_USART_Available_Data+0xc>)
   d50b4:	681b      	ldr	r3, [r3, #0]
   d50b6:	691b      	ldr	r3, [r3, #16]
   d50b8:	9301      	str	r3, [sp, #4]
   d50ba:	bd08      	pop	{r3, pc}
   d50bc:	0003024c 	.word	0x0003024c

000d50c0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d50c0:	b508      	push	{r3, lr}
   d50c2:	4b02      	ldr	r3, [pc, #8]	; (d50cc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d50c4:	681b      	ldr	r3, [r3, #0]
   d50c6:	695b      	ldr	r3, [r3, #20]
   d50c8:	9301      	str	r3, [sp, #4]
   d50ca:	bd08      	pop	{r3, pc}
   d50cc:	0003024c 	.word	0x0003024c

000d50d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50d0:	b508      	push	{r3, lr}
   d50d2:	4b02      	ldr	r3, [pc, #8]	; (d50dc <HAL_USB_USART_Receive_Data+0xc>)
   d50d4:	681b      	ldr	r3, [r3, #0]
   d50d6:	699b      	ldr	r3, [r3, #24]
   d50d8:	9301      	str	r3, [sp, #4]
   d50da:	bd08      	pop	{r3, pc}
   d50dc:	0003024c 	.word	0x0003024c

000d50e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50e0:	b508      	push	{r3, lr}
   d50e2:	4b02      	ldr	r3, [pc, #8]	; (d50ec <HAL_USB_USART_Send_Data+0xc>)
   d50e4:	681b      	ldr	r3, [r3, #0]
   d50e6:	69db      	ldr	r3, [r3, #28]
   d50e8:	9301      	str	r3, [sp, #4]
   d50ea:	bd08      	pop	{r3, pc}
   d50ec:	0003024c 	.word	0x0003024c

000d50f0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d50f0:	b508      	push	{r3, lr}
   d50f2:	4b02      	ldr	r3, [pc, #8]	; (d50fc <HAL_USB_USART_Flush_Data+0xc>)
   d50f4:	681b      	ldr	r3, [r3, #0]
   d50f6:	6a1b      	ldr	r3, [r3, #32]
   d50f8:	9301      	str	r3, [sp, #4]
   d50fa:	bd08      	pop	{r3, pc}
   d50fc:	0003024c 	.word	0x0003024c

000d5100 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d5100:	b508      	push	{r3, lr}
   d5102:	4b02      	ldr	r3, [pc, #8]	; (d510c <HAL_USB_USART_Is_Enabled+0xc>)
   d5104:	681b      	ldr	r3, [r3, #0]
   d5106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5108:	9301      	str	r3, [sp, #4]
   d510a:	bd08      	pop	{r3, pc}
   d510c:	0003024c 	.word	0x0003024c

000d5110 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5110:	b508      	push	{r3, lr}
   d5112:	4b02      	ldr	r3, [pc, #8]	; (d511c <panic_+0xc>)
   d5114:	681b      	ldr	r3, [r3, #0]
   d5116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5118:	9301      	str	r3, [sp, #4]
   d511a:	bd08      	pop	{r3, pc}
   d511c:	00030260 	.word	0x00030260

000d5120 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5120:	b508      	push	{r3, lr}
   d5122:	4b02      	ldr	r3, [pc, #8]	; (d512c <system_mode+0xc>)
   d5124:	681b      	ldr	r3, [r3, #0]
   d5126:	681b      	ldr	r3, [r3, #0]
   d5128:	9301      	str	r3, [sp, #4]
   d512a:	bd08      	pop	{r3, pc}
   d512c:	00030220 	.word	0x00030220

000d5130 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5130:	b508      	push	{r3, lr}
   d5132:	4b02      	ldr	r3, [pc, #8]	; (d513c <set_system_mode+0xc>)
   d5134:	681b      	ldr	r3, [r3, #0]
   d5136:	685b      	ldr	r3, [r3, #4]
   d5138:	9301      	str	r3, [sp, #4]
   d513a:	bd08      	pop	{r3, pc}
   d513c:	00030220 	.word	0x00030220

000d5140 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5140:	b508      	push	{r3, lr}
   d5142:	4b02      	ldr	r3, [pc, #8]	; (d514c <system_delay_ms+0xc>)
   d5144:	681b      	ldr	r3, [r3, #0]
   d5146:	695b      	ldr	r3, [r3, #20]
   d5148:	9301      	str	r3, [sp, #4]
   d514a:	bd08      	pop	{r3, pc}
   d514c:	00030220 	.word	0x00030220

000d5150 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5150:	b508      	push	{r3, lr}
   d5152:	4b02      	ldr	r3, [pc, #8]	; (d515c <system_thread_get_state+0xc>)
   d5154:	681b      	ldr	r3, [r3, #0]
   d5156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5158:	9301      	str	r3, [sp, #4]
   d515a:	bd08      	pop	{r3, pc}
   d515c:	00030220 	.word	0x00030220

000d5160 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5160:	b508      	push	{r3, lr}
   d5162:	4b03      	ldr	r3, [pc, #12]	; (d5170 <system_ctrl_set_app_request_handler+0x10>)
   d5164:	681b      	ldr	r3, [r3, #0]
   d5166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d516a:	9301      	str	r3, [sp, #4]
   d516c:	bd08      	pop	{r3, pc}
   d516e:	0000      	.short	0x0000
   d5170:	00030220 	.word	0x00030220

000d5174 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b03      	ldr	r3, [pc, #12]	; (d5184 <system_ctrl_set_result+0x10>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d517e:	9301      	str	r3, [sp, #4]
   d5180:	bd08      	pop	{r3, pc}
   d5182:	0000      	.short	0x0000
   d5184:	00030220 	.word	0x00030220

000d5188 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5188:	b508      	push	{r3, lr}
   d518a:	4b02      	ldr	r3, [pc, #8]	; (d5194 <network_connect+0xc>)
   d518c:	681b      	ldr	r3, [r3, #0]
   d518e:	685b      	ldr	r3, [r3, #4]
   d5190:	9301      	str	r3, [sp, #4]
   d5192:	bd08      	pop	{r3, pc}
   d5194:	00030240 	.word	0x00030240

000d5198 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5198:	b508      	push	{r3, lr}
   d519a:	4b02      	ldr	r3, [pc, #8]	; (d51a4 <network_connecting+0xc>)
   d519c:	681b      	ldr	r3, [r3, #0]
   d519e:	689b      	ldr	r3, [r3, #8]
   d51a0:	9301      	str	r3, [sp, #4]
   d51a2:	bd08      	pop	{r3, pc}
   d51a4:	00030240 	.word	0x00030240

000d51a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d51a8:	b508      	push	{r3, lr}
   d51aa:	4b02      	ldr	r3, [pc, #8]	; (d51b4 <network_disconnect+0xc>)
   d51ac:	681b      	ldr	r3, [r3, #0]
   d51ae:	68db      	ldr	r3, [r3, #12]
   d51b0:	9301      	str	r3, [sp, #4]
   d51b2:	bd08      	pop	{r3, pc}
   d51b4:	00030240 	.word	0x00030240

000d51b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d51b8:	b508      	push	{r3, lr}
   d51ba:	4b02      	ldr	r3, [pc, #8]	; (d51c4 <network_ready+0xc>)
   d51bc:	681b      	ldr	r3, [r3, #0]
   d51be:	691b      	ldr	r3, [r3, #16]
   d51c0:	9301      	str	r3, [sp, #4]
   d51c2:	bd08      	pop	{r3, pc}
   d51c4:	00030240 	.word	0x00030240

000d51c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d51c8:	b508      	push	{r3, lr}
   d51ca:	4b02      	ldr	r3, [pc, #8]	; (d51d4 <network_on+0xc>)
   d51cc:	681b      	ldr	r3, [r3, #0]
   d51ce:	695b      	ldr	r3, [r3, #20]
   d51d0:	9301      	str	r3, [sp, #4]
   d51d2:	bd08      	pop	{r3, pc}
   d51d4:	00030240 	.word	0x00030240

000d51d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d51d8:	b508      	push	{r3, lr}
   d51da:	4b02      	ldr	r3, [pc, #8]	; (d51e4 <network_off+0xc>)
   d51dc:	681b      	ldr	r3, [r3, #0]
   d51de:	699b      	ldr	r3, [r3, #24]
   d51e0:	9301      	str	r3, [sp, #4]
   d51e2:	bd08      	pop	{r3, pc}
   d51e4:	00030240 	.word	0x00030240

000d51e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d51e8:	b508      	push	{r3, lr}
   d51ea:	4b02      	ldr	r3, [pc, #8]	; (d51f4 <network_listen+0xc>)
   d51ec:	681b      	ldr	r3, [r3, #0]
   d51ee:	69db      	ldr	r3, [r3, #28]
   d51f0:	9301      	str	r3, [sp, #4]
   d51f2:	bd08      	pop	{r3, pc}
   d51f4:	00030240 	.word	0x00030240

000d51f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d51f8:	b508      	push	{r3, lr}
   d51fa:	4b02      	ldr	r3, [pc, #8]	; (d5204 <network_listening+0xc>)
   d51fc:	681b      	ldr	r3, [r3, #0]
   d51fe:	6a1b      	ldr	r3, [r3, #32]
   d5200:	9301      	str	r3, [sp, #4]
   d5202:	bd08      	pop	{r3, pc}
   d5204:	00030240 	.word	0x00030240

000d5208 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5208:	b508      	push	{r3, lr}
   d520a:	4b02      	ldr	r3, [pc, #8]	; (d5214 <network_set_listen_timeout+0xc>)
   d520c:	681b      	ldr	r3, [r3, #0]
   d520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5210:	9301      	str	r3, [sp, #4]
   d5212:	bd08      	pop	{r3, pc}
   d5214:	00030240 	.word	0x00030240

000d5218 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5218:	b508      	push	{r3, lr}
   d521a:	4b02      	ldr	r3, [pc, #8]	; (d5224 <network_get_listen_timeout+0xc>)
   d521c:	681b      	ldr	r3, [r3, #0]
   d521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5220:	9301      	str	r3, [sp, #4]
   d5222:	bd08      	pop	{r3, pc}
   d5224:	00030240 	.word	0x00030240

000d5228 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <spark_process+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	689b      	ldr	r3, [r3, #8]
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	00030244 	.word	0x00030244

000d5238 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <spark_cloud_flag_connected+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	695b      	ldr	r3, [r3, #20]
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	00030244 	.word	0x00030244

000d5248 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <spark_sync_time+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	00030244 	.word	0x00030244

000d5258 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <spark_sync_time_pending+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	00030244 	.word	0x00030244

000d5268 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <spark_sync_time_last+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	00030244 	.word	0x00030244

000d5278 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <spark_set_random_seed_from_cloud_handler+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	00030244 	.word	0x00030244

000d5288 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <malloc+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	681b      	ldr	r3, [r3, #0]
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	0003021c 	.word	0x0003021c

000d5298 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <free+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	685b      	ldr	r3, [r3, #4]
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	0003021c 	.word	0x0003021c

000d52a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <realloc+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	689b      	ldr	r3, [r3, #8]
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	0003021c 	.word	0x0003021c

000d52b8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <siprintf+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	691b      	ldr	r3, [r3, #16]
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	0003021c 	.word	0x0003021c

000d52c8 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <siscanf+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	699b      	ldr	r3, [r3, #24]
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	0003021c 	.word	0x0003021c

000d52d8 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <vsnprintf+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	0003021c 	.word	0x0003021c

000d52e8 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <_malloc_r+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	0003021c 	.word	0x0003021c

000d52f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d52f8:	2200      	movs	r2, #0
   d52fa:	4611      	mov	r1, r2
   d52fc:	6840      	ldr	r0, [r0, #4]
   d52fe:	f7ff bf7b 	b.w	d51f8 <network_listening>

000d5302 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5302:	2200      	movs	r2, #0
   d5304:	4611      	mov	r1, r2
   d5306:	6840      	ldr	r0, [r0, #4]
   d5308:	f7ff bf86 	b.w	d5218 <network_get_listen_timeout>

000d530c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d530c:	2200      	movs	r2, #0
   d530e:	6840      	ldr	r0, [r0, #4]
   d5310:	f7ff bf7a 	b.w	d5208 <network_set_listen_timeout>

000d5314 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5314:	2200      	movs	r2, #0
   d5316:	f081 0101 	eor.w	r1, r1, #1
   d531a:	6840      	ldr	r0, [r0, #4]
   d531c:	f7ff bf64 	b.w	d51e8 <network_listen>

000d5320 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5320:	2300      	movs	r3, #0
   d5322:	461a      	mov	r2, r3
   d5324:	4619      	mov	r1, r3
   d5326:	6840      	ldr	r0, [r0, #4]
   d5328:	f7ff bf56 	b.w	d51d8 <network_off>

000d532c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d532c:	2300      	movs	r3, #0
   d532e:	461a      	mov	r2, r3
   d5330:	4619      	mov	r1, r3
   d5332:	6840      	ldr	r0, [r0, #4]
   d5334:	f7ff bf48 	b.w	d51c8 <network_on>

000d5338 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5338:	2200      	movs	r2, #0
   d533a:	4611      	mov	r1, r2
   d533c:	6840      	ldr	r0, [r0, #4]
   d533e:	f7ff bf3b 	b.w	d51b8 <network_ready>

000d5342 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5342:	2200      	movs	r2, #0
   d5344:	4611      	mov	r1, r2
   d5346:	6840      	ldr	r0, [r0, #4]
   d5348:	f7ff bf26 	b.w	d5198 <network_connecting>

000d534c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d534c:	2200      	movs	r2, #0
   d534e:	2102      	movs	r1, #2
   d5350:	6840      	ldr	r0, [r0, #4]
   d5352:	f7ff bf29 	b.w	d51a8 <network_disconnect>

000d5356 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5356:	2300      	movs	r3, #0
   d5358:	461a      	mov	r2, r3
   d535a:	6840      	ldr	r0, [r0, #4]
   d535c:	f7ff bf14 	b.w	d5188 <network_connect>

000d5360 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5360:	4b02      	ldr	r3, [pc, #8]	; (d536c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5362:	2203      	movs	r2, #3
   d5364:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5366:	4a02      	ldr	r2, [pc, #8]	; (d5370 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5368:	601a      	str	r2, [r3, #0]
   d536a:	4770      	bx	lr
   d536c:	2003e39c 	.word	0x2003e39c
   d5370:	000d7754 	.word	0x000d7754

000d5374 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5374:	4770      	bx	lr

000d5376 <_ZN8SPIClassD0Ev>:
   d5376:	b510      	push	{r4, lr}
   d5378:	210c      	movs	r1, #12
   d537a:	4604      	mov	r4, r0
   d537c:	f001 f800 	bl	d6380 <_ZdlPvj>
   d5380:	4620      	mov	r0, r4
   d5382:	bd10      	pop	{r4, pc}

000d5384 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5384:	2100      	movs	r1, #0
   d5386:	f7ff bd8b 	b.w	d4ea0 <HAL_SPI_Acquire>

000d538a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d538a:	2100      	movs	r1, #0
   d538c:	f7ff bd90 	b.w	d4eb0 <HAL_SPI_Release>

000d5390 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5390:	b510      	push	{r4, lr}
   d5392:	4b05      	ldr	r3, [pc, #20]	; (d53a8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d5394:	6003      	str	r3, [r0, #0]
   d5396:	4604      	mov	r4, r0
{
    _spi = spi;
   d5398:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d539a:	4608      	mov	r0, r1
   d539c:	f7ff fd68 	bl	d4e70 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d53a0:	2300      	movs	r3, #0
   d53a2:	60a3      	str	r3, [r4, #8]
}
   d53a4:	4620      	mov	r0, r4
   d53a6:	bd10      	pop	{r4, pc}
   d53a8:	000d7788 	.word	0x000d7788

000d53ac <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d53ac:	b510      	push	{r4, lr}
   d53ae:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d53b0:	7900      	ldrb	r0, [r0, #4]
   d53b2:	f7ff ffe7 	bl	d5384 <_ZN8SPIClass4lockEv.isra.0>
   d53b6:	b948      	cbnz	r0, d53cc <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d53b8:	7920      	ldrb	r0, [r4, #4]
   d53ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d53be:	f7ff fd2f 	bl	d4e20 <HAL_SPI_Begin>
        unlock();
   d53c2:	7920      	ldrb	r0, [r4, #4]
    }
}
   d53c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d53c8:	f7ff bfdf 	b.w	d538a <_ZN8SPIClass6unlockEv.isra.1>
   d53cc:	bd10      	pop	{r4, pc}

000d53ce <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d53ce:	b538      	push	{r3, r4, r5, lr}
   d53d0:	4604      	mov	r4, r0
    if (!lock())
   d53d2:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d53d4:	460d      	mov	r5, r1
    if (!lock())
   d53d6:	f7ff ffd5 	bl	d5384 <_ZN8SPIClass4lockEv.isra.0>
   d53da:	b940      	cbnz	r0, d53ee <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d53dc:	7920      	ldrb	r0, [r4, #4]
   d53de:	4629      	mov	r1, r5
   d53e0:	f7ff fd26 	bl	d4e30 <HAL_SPI_Set_Bit_Order>
        unlock();
   d53e4:	7920      	ldrb	r0, [r4, #4]
    }
}
   d53e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d53ea:	f7ff bfce 	b.w	d538a <_ZN8SPIClass6unlockEv.isra.1>
   d53ee:	bd38      	pop	{r3, r4, r5, pc}

000d53f0 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d53f0:	b538      	push	{r3, r4, r5, lr}
   d53f2:	4604      	mov	r4, r0
    if (!lock())
   d53f4:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d53f6:	460d      	mov	r5, r1
    if (!lock())
   d53f8:	f7ff ffc4 	bl	d5384 <_ZN8SPIClass4lockEv.isra.0>
   d53fc:	b940      	cbnz	r0, d5410 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d53fe:	7920      	ldrb	r0, [r4, #4]
   d5400:	4629      	mov	r1, r5
   d5402:	f7ff fd1d 	bl	d4e40 <HAL_SPI_Set_Data_Mode>
        unlock();
   d5406:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d540c:	f7ff bfbd 	b.w	d538a <_ZN8SPIClass6unlockEv.isra.1>
   d5410:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5414 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5414:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5416:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5418:	6018      	str	r0, [r3, #0]
   d541a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d541c:	6818      	ldr	r0, [r3, #0]
   d541e:	4288      	cmp	r0, r1
   d5420:	b2e5      	uxtb	r5, r4
   d5422:	d906      	bls.n	d5432 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5424:	3401      	adds	r4, #1
   d5426:	2c08      	cmp	r4, #8
   d5428:	d002      	beq.n	d5430 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d542a:	0840      	lsrs	r0, r0, #1
   d542c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d542e:	e7f5      	b.n	d541c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5430:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5432:	4b02      	ldr	r3, [pc, #8]	; (d543c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5434:	5d5b      	ldrb	r3, [r3, r5]
   d5436:	7013      	strb	r3, [r2, #0]
   d5438:	bd30      	pop	{r4, r5, pc}
   d543a:	bf00      	nop
   d543c:	000d7790 	.word	0x000d7790

000d5440 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5444:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5446:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5448:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d544a:	7900      	ldrb	r0, [r0, #4]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d544c:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d544e:	460e      	mov	r6, r1
   d5450:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5452:	f7ff ff97 	bl	d5384 <_ZN8SPIClass4lockEv.isra.0>
   d5456:	4605      	mov	r5, r0
   d5458:	bb00      	cbnz	r0, d549c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d545a:	f894 8004 	ldrb.w	r8, [r4, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d545e:	4601      	mov	r1, r0
   d5460:	2214      	movs	r2, #20
   d5462:	a803      	add	r0, sp, #12
   d5464:	f001 fa35 	bl	d68d2 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5468:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d546a:	462a      	mov	r2, r5
   d546c:	a903      	add	r1, sp, #12
   d546e:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5470:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d5474:	f7ff fd0c 	bl	d4e90 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5478:	ab02      	add	r3, sp, #8
   d547a:	f10d 0207 	add.w	r2, sp, #7
   d547e:	fb07 f106 	mul.w	r1, r7, r6
   d5482:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d5484:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5488:	f7ff ffc4 	bl	d5414 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d548c:	7920      	ldrb	r0, [r4, #4]
   d548e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5492:	f7ff fcdd 	bl	d4e50 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d5496:	7920      	ldrb	r0, [r4, #4]
   d5498:	f7ff ff77 	bl	d538a <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d549c:	9802      	ldr	r0, [sp, #8]
   d549e:	b008      	add	sp, #32
   d54a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d54a4 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d54a4:	b538      	push	{r3, r4, r5, lr}
   d54a6:	4604      	mov	r4, r0
    if (!lock())
   d54a8:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d54aa:	460d      	mov	r5, r1
    if (!lock())
   d54ac:	f7ff ff6a 	bl	d5384 <_ZN8SPIClass4lockEv.isra.0>
   d54b0:	b9c8      	cbnz	r0, d54e6 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d54b2:	68a1      	ldr	r1, [r4, #8]
   d54b4:	b171      	cbz	r1, d54d4 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d54b6:	4b0c      	ldr	r3, [pc, #48]	; (d54e8 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d54b8:	5cc2      	ldrb	r2, [r0, r3]
   d54ba:	42aa      	cmp	r2, r5
   d54bc:	d002      	beq.n	d54c4 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d54be:	3001      	adds	r0, #1
   d54c0:	2808      	cmp	r0, #8
   d54c2:	d1f9      	bne.n	d54b8 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d54c4:	3001      	adds	r0, #1
   d54c6:	b2c0      	uxtb	r0, r0
   d54c8:	40c1      	lsrs	r1, r0
   d54ca:	2201      	movs	r2, #1
   d54cc:	4620      	mov	r0, r4
   d54ce:	f7ff ffb7 	bl	d5440 <_ZN8SPIClass13setClockSpeedEjj>
   d54d2:	e003      	b.n	d54dc <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d54d4:	4629      	mov	r1, r5
   d54d6:	7920      	ldrb	r0, [r4, #4]
   d54d8:	f7ff fcba 	bl	d4e50 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d54dc:	7920      	ldrb	r0, [r4, #4]
    }
}
   d54de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d54e2:	f7ff bf52 	b.w	d538a <_ZN8SPIClass6unlockEv.isra.1>
   d54e6:	bd38      	pop	{r3, r4, r5, pc}
   d54e8:	000d7790 	.word	0x000d7790

000d54ec <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d54ec:	b538      	push	{r3, r4, r5, lr}
   d54ee:	4604      	mov	r4, r0
    uint16_t result = 0;
    if (!lock())
   d54f0:	7900      	ldrb	r0, [r0, #4]

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d54f2:	460d      	mov	r5, r1
    uint16_t result = 0;
    if (!lock())
   d54f4:	f7ff ff46 	bl	d5384 <_ZN8SPIClass4lockEv.isra.0>
   d54f8:	b940      	cbnz	r0, d550c <_ZN8SPIClass8transferEh+0x20>
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
   d54fa:	4629      	mov	r1, r5
   d54fc:	7920      	ldrb	r0, [r4, #4]
   d54fe:	f7ff fcaf 	bl	d4e60 <HAL_SPI_Send_Receive_Data>
   d5502:	4605      	mov	r5, r0
        unlock();
   d5504:	7920      	ldrb	r0, [r4, #4]
   d5506:	f7ff ff40 	bl	d538a <_ZN8SPIClass6unlockEv.isra.1>
   d550a:	e000      	b.n	d550e <_ZN8SPIClass8transferEh+0x22>
    return clock;
}

byte SPIClass::transfer(byte _data)
{
    uint16_t result = 0;
   d550c:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
        unlock();
    }
    return static_cast<byte>(result);
}
   d550e:	b2e8      	uxtb	r0, r5
   d5510:	bd38      	pop	{r3, r4, r5, pc}

000d5512 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5512:	7900      	ldrb	r0, [r0, #4]
   d5514:	f7ff bcb4 	b.w	d4e80 <HAL_SPI_Is_Enabled>

000d5518 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5518:	b510      	push	{r4, lr}
   d551a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d551c:	6800      	ldr	r0, [r0, #0]
   d551e:	b118      	cbz	r0, d5528 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5520:	f7ff feba 	bl	d5298 <free>
            wakeupSource_ = nullptr;
   d5524:	2300      	movs	r3, #0
   d5526:	6023      	str	r3, [r4, #0]
   d5528:	bd10      	pop	{r4, pc}

000d552a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d552a:	b510      	push	{r4, lr}
   d552c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d552e:	f7ff fff3 	bl	d5518 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5532:	4620      	mov	r0, r4
   d5534:	bd10      	pop	{r4, pc}
	...

000d5538 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5538:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d553a:	4c09      	ldr	r4, [pc, #36]	; (d5560 <_GLOBAL__sub_I_System+0x28>)
   d553c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d553e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5542:	6020      	str	r0, [r4, #0]
   d5544:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5546:	71a0      	strb	r0, [r4, #6]
   d5548:	8120      	strh	r0, [r4, #8]
   d554a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d554c:	f7ff fdf0 	bl	d5130 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5550:	4620      	mov	r0, r4
   d5552:	4a04      	ldr	r2, [pc, #16]	; (d5564 <_GLOBAL__sub_I_System+0x2c>)
   d5554:	4904      	ldr	r1, [pc, #16]	; (d5568 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d555a:	f000 bf03 	b.w	d6364 <__aeabi_atexit>
   d555e:	bf00      	nop
   d5560:	2003e3a4 	.word	0x2003e3a4
   d5564:	2003e374 	.word	0x2003e374
   d5568:	000d552b 	.word	0x000d552b

000d556c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d556c:	b510      	push	{r4, lr}
   d556e:	4604      	mov	r4, r0
{
	free(buffer);
   d5570:	6800      	ldr	r0, [r0, #0]
   d5572:	f7ff fe91 	bl	d5298 <free>
}
   d5576:	4620      	mov	r0, r4
   d5578:	bd10      	pop	{r4, pc}

000d557a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d557a:	b510      	push	{r4, lr}
   d557c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d557e:	6800      	ldr	r0, [r0, #0]
   d5580:	b108      	cbz	r0, d5586 <_ZN6String10invalidateEv+0xc>
   d5582:	f7ff fe89 	bl	d5298 <free>
	buffer = NULL;
   d5586:	2300      	movs	r3, #0
   d5588:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d558a:	60a3      	str	r3, [r4, #8]
   d558c:	6063      	str	r3, [r4, #4]
   d558e:	bd10      	pop	{r4, pc}

000d5590 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5590:	b538      	push	{r3, r4, r5, lr}
   d5592:	4604      	mov	r4, r0
   d5594:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5596:	6800      	ldr	r0, [r0, #0]
   d5598:	3101      	adds	r1, #1
   d559a:	f7ff fe85 	bl	d52a8 <realloc>
	if (newbuffer) {
   d559e:	b110      	cbz	r0, d55a6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d55a0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d55a4:	2001      	movs	r0, #1
	}
	return 0;
}
   d55a6:	bd38      	pop	{r3, r4, r5, pc}

000d55a8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d55a8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d55aa:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d55ac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d55ae:	b113      	cbz	r3, d55b6 <_ZN6String7reserveEj+0xe>
   d55b0:	6843      	ldr	r3, [r0, #4]
   d55b2:	428b      	cmp	r3, r1
   d55b4:	d207      	bcs.n	d55c6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d55b6:	4620      	mov	r0, r4
   d55b8:	f7ff ffea 	bl	d5590 <_ZN6String12changeBufferEj>
   d55bc:	b120      	cbz	r0, d55c8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d55be:	68a3      	ldr	r3, [r4, #8]
   d55c0:	b90b      	cbnz	r3, d55c6 <_ZN6String7reserveEj+0x1e>
   d55c2:	6822      	ldr	r2, [r4, #0]
   d55c4:	7013      	strb	r3, [r2, #0]
   d55c6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d55c8:	bd10      	pop	{r4, pc}

000d55ca <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55ca:	b570      	push	{r4, r5, r6, lr}
   d55cc:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d55ce:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55d0:	4604      	mov	r4, r0
   d55d2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d55d4:	f7ff ffe8 	bl	d55a8 <_ZN6String7reserveEj>
   d55d8:	b918      	cbnz	r0, d55e2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d55da:	4620      	mov	r0, r4
   d55dc:	f7ff ffcd 	bl	d557a <_ZN6String10invalidateEv>
		return *this;
   d55e0:	e009      	b.n	d55f6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d55e2:	462a      	mov	r2, r5
   d55e4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d55e6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d55e8:	6820      	ldr	r0, [r4, #0]
   d55ea:	f001 f967 	bl	d68bc <memcpy>
	buffer[len] = 0;
   d55ee:	6822      	ldr	r2, [r4, #0]
   d55f0:	68a3      	ldr	r3, [r4, #8]
   d55f2:	2100      	movs	r1, #0
   d55f4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d55f6:	4620      	mov	r0, r4
   d55f8:	bd70      	pop	{r4, r5, r6, pc}

000d55fa <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d55fa:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d55fc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d55fe:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5600:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5602:	6043      	str	r3, [r0, #4]
	len = 0;
   d5604:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5606:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5608:	460d      	mov	r5, r1
   d560a:	b139      	cbz	r1, d561c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d560c:	4608      	mov	r0, r1
   d560e:	f001 f9dd 	bl	d69cc <strlen>
   d5612:	4629      	mov	r1, r5
   d5614:	4602      	mov	r2, r0
   d5616:	4620      	mov	r0, r4
   d5618:	f7ff ffd7 	bl	d55ca <_ZN6String4copyEPKcj>
}
   d561c:	4620      	mov	r0, r4
   d561e:	bd38      	pop	{r3, r4, r5, pc}

000d5620 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5620:	b538      	push	{r3, r4, r5, lr}
   d5622:	4605      	mov	r5, r0
	if (buffer) {
   d5624:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5626:	460c      	mov	r4, r1
	if (buffer) {
   d5628:	b160      	cbz	r0, d5644 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d562a:	686a      	ldr	r2, [r5, #4]
   d562c:	688b      	ldr	r3, [r1, #8]
   d562e:	429a      	cmp	r2, r3
   d5630:	d306      	bcc.n	d5640 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d5632:	6809      	ldr	r1, [r1, #0]
   d5634:	f001 f9c2 	bl	d69bc <strcpy>
			len = rhs.len;
   d5638:	68a3      	ldr	r3, [r4, #8]
   d563a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d563c:	2300      	movs	r3, #0
   d563e:	e00a      	b.n	d5656 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d5640:	f7ff fe2a 	bl	d5298 <free>
		}
	}
	buffer = rhs.buffer;
   d5644:	6823      	ldr	r3, [r4, #0]
   d5646:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5648:	6863      	ldr	r3, [r4, #4]
   d564a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d564c:	68a3      	ldr	r3, [r4, #8]
   d564e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5650:	2300      	movs	r3, #0
   d5652:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d5654:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d5656:	60a3      	str	r3, [r4, #8]
   d5658:	bd38      	pop	{r3, r4, r5, pc}

000d565a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d565a:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d565c:	b510      	push	{r4, lr}
   d565e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5660:	d001      	beq.n	d5666 <_ZN6StringaSEOS_+0xc>
   d5662:	f7ff ffdd 	bl	d5620 <_ZN6String4moveERS_>
	return *this;
}
   d5666:	4620      	mov	r0, r4
   d5668:	bd10      	pop	{r4, pc}

000d566a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d566a:	b570      	push	{r4, r5, r6, lr}
   d566c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d566e:	b19a      	cbz	r2, d5698 <_ZNK6String8getBytesEPhjj+0x2e>
   d5670:	b191      	cbz	r1, d5698 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d5672:	6885      	ldr	r5, [r0, #8]
   d5674:	429d      	cmp	r5, r3
   d5676:	d802      	bhi.n	d567e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d5678:	2300      	movs	r3, #0
   d567a:	700b      	strb	r3, [r1, #0]
		return;
   d567c:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d567e:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d5680:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d5682:	6801      	ldr	r1, [r0, #0]
   d5684:	42ac      	cmp	r4, r5
   d5686:	bf28      	it	cs
   d5688:	462c      	movcs	r4, r5
   d568a:	4419      	add	r1, r3
   d568c:	4622      	mov	r2, r4
   d568e:	4630      	mov	r0, r6
   d5690:	f001 f9b9 	bl	d6a06 <strncpy>
	buf[n] = 0;
   d5694:	2300      	movs	r3, #0
   d5696:	5533      	strb	r3, [r6, r4]
   d5698:	bd70      	pop	{r4, r5, r6, pc}
	...

000d569c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d569e:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d56a0:	460f      	mov	r7, r1
   d56a2:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d56a4:	490c      	ldr	r1, [pc, #48]	; (d56d8 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d56a6:	bf88      	it	hi
   d56a8:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d56aa:	4614      	mov	r4, r2
   d56ac:	4606      	mov	r6, r0
	if (left > right) {
   d56ae:	bf84      	itt	hi
   d56b0:	462c      	movhi	r4, r5
   d56b2:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d56b4:	f7ff ffa1 	bl	d55fa <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d56b8:	68ba      	ldr	r2, [r7, #8]
   d56ba:	4294      	cmp	r4, r2
   d56bc:	d80a      	bhi.n	d56d4 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d56be:	6839      	ldr	r1, [r7, #0]
   d56c0:	4295      	cmp	r5, r2
   d56c2:	bf94      	ite	ls
   d56c4:	ebc4 0205 	rsbls	r2, r4, r5
   d56c8:	ebc4 0202 	rsbhi	r2, r4, r2
   d56cc:	4421      	add	r1, r4
   d56ce:	4630      	mov	r0, r6
   d56d0:	f7ff ff7b 	bl	d55ca <_ZN6String4copyEPKcj>
	return out;
}
   d56d4:	4630      	mov	r0, r6
   d56d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d56d8:	000d783f 	.word	0x000d783f

000d56dc <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d56dc:	b510      	push	{r4, lr}
   d56de:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d56e0:	6800      	ldr	r0, [r0, #0]
   d56e2:	b108      	cbz	r0, d56e8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d56e4:	f7ff fc34 	bl	d4f50 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d56e8:	4620      	mov	r0, r4
   d56ea:	bd10      	pop	{r4, pc}

000d56ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d56ec:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d56ee:	4c06      	ldr	r4, [pc, #24]	; (d5708 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d56f0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d56f2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d56f4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d56f6:	f7ff fc23 	bl	d4f40 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d56fa:	4620      	mov	r0, r4
   d56fc:	4a03      	ldr	r2, [pc, #12]	; (d570c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d56fe:	4904      	ldr	r1, [pc, #16]	; (d5710 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5704:	f000 be2e 	b.w	d6364 <__aeabi_atexit>
   d5708:	2003e3b0 	.word	0x2003e3b0
   d570c:	2003e374 	.word	0x2003e374
   d5710:	000d56dd 	.word	0x000d56dd

000d5714 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5716:	4606      	mov	r6, r0
   d5718:	460d      	mov	r5, r1
   d571a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d571c:	2400      	movs	r4, #0
  while (size--) {
   d571e:	42bd      	cmp	r5, r7
   d5720:	d00c      	beq.n	d573c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5722:	6833      	ldr	r3, [r6, #0]
   d5724:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5728:	689b      	ldr	r3, [r3, #8]
   d572a:	4630      	mov	r0, r6
   d572c:	4798      	blx	r3
     if (chunk>=0)
   d572e:	2800      	cmp	r0, #0
   d5730:	db01      	blt.n	d5736 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5732:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5734:	e7f3      	b.n	d571e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5736:	2c00      	cmp	r4, #0
   d5738:	bf08      	it	eq
   d573a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d573c:	4620      	mov	r0, r4
   d573e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5740 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5740:	b570      	push	{r4, r5, r6, lr}
   d5742:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5744:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5746:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5748:	b149      	cbz	r1, d575e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d574a:	f001 f93f 	bl	d69cc <strlen>
   d574e:	682b      	ldr	r3, [r5, #0]
   d5750:	4602      	mov	r2, r0
   d5752:	4621      	mov	r1, r4
   d5754:	4628      	mov	r0, r5
   d5756:	68db      	ldr	r3, [r3, #12]
    }
   d5758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d575c:	4718      	bx	r3
    }
   d575e:	bd70      	pop	{r4, r5, r6, pc}

000d5760 <_ZN5Print5printEPKc>:
   d5760:	b508      	push	{r3, lr}
   d5762:	f7ff ffed 	bl	d5740 <_ZN5Print5writeEPKc>
   d5766:	bd08      	pop	{r3, pc}

000d5768 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5768:	6803      	ldr	r3, [r0, #0]
   d576a:	689b      	ldr	r3, [r3, #8]
   d576c:	4718      	bx	r3

000d576e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d576e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5770:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5772:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5774:	f7ff fff8 	bl	d5768 <_ZN5Print5printEc>
  n += print('\n');
   d5778:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d577a:	4604      	mov	r4, r0
  n += print('\n');
   d577c:	4628      	mov	r0, r5
   d577e:	f7ff fff3 	bl	d5768 <_ZN5Print5printEc>
  return n;
}
   d5782:	4420      	add	r0, r4
   d5784:	bd38      	pop	{r3, r4, r5, pc}

000d5786 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5786:	b538      	push	{r3, r4, r5, lr}
   d5788:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d578a:	f7ff ffd9 	bl	d5740 <_ZN5Print5writeEPKc>
   d578e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5790:	4628      	mov	r0, r5
   d5792:	f7ff ffec 	bl	d576e <_ZN5Print7printlnEv>
  return n;
}
   d5796:	4420      	add	r0, r4
   d5798:	bd38      	pop	{r3, r4, r5, pc}

000d579a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d579a:	b530      	push	{r4, r5, lr}
   d579c:	b08b      	sub	sp, #44	; 0x2c
   d579e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d57a0:	2100      	movs	r1, #0
   d57a2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d57a6:	2a01      	cmp	r2, #1
   d57a8:	bf98      	it	ls
   d57aa:	220a      	movls	r2, #10
   d57ac:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d57b0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d57b4:	fb05 3312 	mls	r3, r5, r2, r3
   d57b8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d57bc:	2b09      	cmp	r3, #9
   d57be:	bf94      	ite	ls
   d57c0:	3330      	addls	r3, #48	; 0x30
   d57c2:	3337      	addhi	r3, #55	; 0x37
   d57c4:	b2db      	uxtb	r3, r3
   d57c6:	4621      	mov	r1, r4
   d57c8:	f804 3901 	strb.w	r3, [r4], #-1
   d57cc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d57ce:	2d00      	cmp	r5, #0
   d57d0:	d1ee      	bne.n	d57b0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d57d2:	f7ff ffb5 	bl	d5740 <_ZN5Print5writeEPKc>
}
   d57d6:	b00b      	add	sp, #44	; 0x2c
   d57d8:	bd30      	pop	{r4, r5, pc}

000d57da <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d57da:	b40c      	push	{r2, r3}
   d57dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d57e0:	b087      	sub	sp, #28
   d57e2:	af00      	add	r7, sp, #0
   d57e4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d57e8:	4605      	mov	r5, r0
   d57ea:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d57ee:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d57f0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d57f2:	4623      	mov	r3, r4
   d57f4:	464a      	mov	r2, r9
   d57f6:	2114      	movs	r1, #20
   d57f8:	1d38      	adds	r0, r7, #4
   d57fa:	f7ff fd6d 	bl	d52d8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d57fe:	2813      	cmp	r0, #19
   d5800:	d805      	bhi.n	d580e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5802:	1d39      	adds	r1, r7, #4
   d5804:	4628      	mov	r0, r5
   d5806:	f7ff ff9b 	bl	d5740 <_ZN5Print5writeEPKc>
   d580a:	4604      	mov	r4, r0
   d580c:	e013      	b.n	d5836 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d580e:	f100 0308 	add.w	r3, r0, #8
   d5812:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5816:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5818:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d581c:	1c41      	adds	r1, r0, #1
   d581e:	4623      	mov	r3, r4
   d5820:	464a      	mov	r2, r9
   d5822:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5824:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5826:	f7ff fd57 	bl	d52d8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d582a:	4669      	mov	r1, sp
   d582c:	4628      	mov	r0, r5
   d582e:	f7ff ff87 	bl	d5740 <_ZN5Print5writeEPKc>
   d5832:	4604      	mov	r4, r0
   d5834:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5836:	b11e      	cbz	r6, d5840 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5838:	4628      	mov	r0, r5
   d583a:	f7ff ff98 	bl	d576e <_ZN5Print7printlnEv>
   d583e:	4404      	add	r4, r0
    return n;
}
   d5840:	4620      	mov	r0, r4
   d5842:	371c      	adds	r7, #28
   d5844:	46bd      	mov	sp, r7
   d5846:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d584a:	b002      	add	sp, #8
   d584c:	4770      	bx	lr
	...

000d5850 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5850:	4b01      	ldr	r3, [pc, #4]	; (d5858 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5852:	4a02      	ldr	r2, [pc, #8]	; (d585c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5854:	601a      	str	r2, [r3, #0]
   d5856:	4770      	bx	lr
   d5858:	2003e3b4 	.word	0x2003e3b4
   d585c:	000d780b 	.word	0x000d780b

000d5860 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5860:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5862:	2000      	movs	r0, #0
   d5864:	f7ff fcf8 	bl	d5258 <spark_sync_time_pending>
   d5868:	b128      	cbz	r0, d5876 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d586a:	f7ff fce5 	bl	d5238 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d586e:	f080 0001 	eor.w	r0, r0, #1
   d5872:	b2c0      	uxtb	r0, r0
   d5874:	bd08      	pop	{r3, pc}
   d5876:	2001      	movs	r0, #1
    }
   d5878:	bd08      	pop	{r3, pc}
	...

000d587c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d587c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d5880:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5888:	d40f      	bmi.n	d58aa <_ZN9TimeClass4zoneEf+0x2e>
   d588a:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d588e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5896:	dc08      	bgt.n	d58aa <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d5898:	eddf 7a04 	vldr	s15, [pc, #16]	; d58ac <_ZN9TimeClass4zoneEf+0x30>
   d589c:	4b04      	ldr	r3, [pc, #16]	; (d58b0 <_ZN9TimeClass4zoneEf+0x34>)
   d589e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d58a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d58a6:	ed83 0a00 	vstr	s0, [r3]
   d58aa:	4770      	bx	lr
   d58ac:	45610000 	.word	0x45610000
   d58b0:	2003e3c0 	.word	0x2003e3c0

000d58b4 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d58b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d58b6:	4b0e      	ldr	r3, [pc, #56]	; (d58f0 <_ZN9TimeClass7timeStrEl+0x3c>)
   d58b8:	681b      	ldr	r3, [r3, #0]
   d58ba:	4419      	add	r1, r3
   d58bc:	4b0d      	ldr	r3, [pc, #52]	; (d58f4 <_ZN9TimeClass7timeStrEl+0x40>)
   d58be:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d58c0:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d58c2:	a802      	add	r0, sp, #8
   d58c4:	4419      	add	r1, r3
   d58c6:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d58ca:	f000 feff 	bl	d66cc <localtime>
        char* ascstr = asctime(calendar_time);
   d58ce:	f000 feb3 	bl	d6638 <asctime>
   d58d2:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d58d4:	f001 f87a 	bl	d69cc <strlen>
        ascstr[len-1] = 0; // remove final newline
   d58d8:	4428      	add	r0, r5
   d58da:	2300      	movs	r3, #0
   d58dc:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d58e0:	4629      	mov	r1, r5
   d58e2:	4620      	mov	r0, r4
   d58e4:	f7ff fe89 	bl	d55fa <_ZN6StringC1EPK19__FlashStringHelper>
}
   d58e8:	4620      	mov	r0, r4
   d58ea:	b003      	add	sp, #12
   d58ec:	bd30      	pop	{r4, r5, pc}
   d58ee:	bf00      	nop
   d58f0:	2003e3c0 	.word	0x2003e3c0
   d58f4:	2003e3bc 	.word	0x2003e3bc

000d58f8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d58f8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d58fa:	2000      	movs	r0, #0
   d58fc:	f7ff fb00 	bl	d4f00 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5900:	4604      	mov	r4, r0
   d5902:	b968      	cbnz	r0, d5920 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5904:	f7ff fc0c 	bl	d5120 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5908:	2801      	cmp	r0, #1
   d590a:	d10b      	bne.n	d5924 <_ZN9TimeClass7isValidEv+0x2c>
   d590c:	4620      	mov	r0, r4
   d590e:	f7ff fc1f 	bl	d5150 <system_thread_get_state>
   d5912:	b938      	cbnz	r0, d5924 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d5914:	f7ff ffa4 	bl	d5860 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5918:	b930      	cbnz	r0, d5928 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d591a:	f7ff fc85 	bl	d5228 <spark_process>
   d591e:	e7f9      	b.n	d5914 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5920:	2001      	movs	r0, #1
   d5922:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5924:	2000      	movs	r0, #0
   d5926:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5928:	f7ff ff9a 	bl	d5860 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d592c:	2000      	movs	r0, #0
   d592e:	f7ff fae7 	bl	d4f00 <HAL_RTC_Time_Is_Valid>
   d5932:	3000      	adds	r0, #0
   d5934:	bf18      	it	ne
   d5936:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5938:	bd10      	pop	{r4, pc}

000d593a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d593a:	b508      	push	{r3, lr}
    (void)isValid();
   d593c:	f7ff ffdc 	bl	d58f8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5944:	f7ff bad4 	b.w	d4ef0 <HAL_RTC_Get_UnixTime>

000d5948 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5948:	4b02      	ldr	r3, [pc, #8]	; (d5954 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d594a:	681a      	ldr	r2, [r3, #0]
   d594c:	4b02      	ldr	r3, [pc, #8]	; (d5958 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d594e:	601a      	str	r2, [r3, #0]
   d5950:	4770      	bx	lr
   d5952:	bf00      	nop
   d5954:	2003e2bc 	.word	0x2003e2bc
   d5958:	2003e3b8 	.word	0x2003e3b8

000d595c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d595c:	2100      	movs	r1, #0
   d595e:	f7ff bbef 	b.w	d5140 <system_delay_ms>

000d5962 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5962:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5964:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5966:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5968:	b113      	cbz	r3, d5970 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d596a:	2203      	movs	r2, #3
   d596c:	4601      	mov	r1, r0
   d596e:	4798      	blx	r3
    }
   d5970:	4620      	mov	r0, r4
   d5972:	bd10      	pop	{r4, pc}

000d5974 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5974:	b510      	push	{r4, lr}
   d5976:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5978:	f7ff fff3 	bl	d5962 <_ZNSt14_Function_baseD1Ev>
   d597c:	4620      	mov	r0, r4
   d597e:	bd10      	pop	{r4, pc}

000d5980 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5980:	4803      	ldr	r0, [pc, #12]	; (d5990 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5982:	4a04      	ldr	r2, [pc, #16]	; (d5994 <_GLOBAL__sub_I_RGB+0x14>)
   d5984:	4904      	ldr	r1, [pc, #16]	; (d5998 <_GLOBAL__sub_I_RGB+0x18>)
   d5986:	2300      	movs	r3, #0
   d5988:	6083      	str	r3, [r0, #8]
   d598a:	f000 bceb 	b.w	d6364 <__aeabi_atexit>
   d598e:	bf00      	nop
   d5990:	2003e3c4 	.word	0x2003e3c4
   d5994:	2003e374 	.word	0x2003e374
   d5998:	000d5975 	.word	0x000d5975

000d599c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d599c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d599e:	4b0c      	ldr	r3, [pc, #48]	; (d59d0 <serialEventRun+0x34>)
   d59a0:	b133      	cbz	r3, d59b0 <serialEventRun+0x14>
   d59a2:	f000 f95d 	bl	d5c60 <_Z16_fetch_usbserialv>
   d59a6:	6803      	ldr	r3, [r0, #0]
   d59a8:	691b      	ldr	r3, [r3, #16]
   d59aa:	4798      	blx	r3
   d59ac:	2800      	cmp	r0, #0
   d59ae:	dc09      	bgt.n	d59c4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d59b0:	4b08      	ldr	r3, [pc, #32]	; (d59d4 <serialEventRun+0x38>)
   d59b2:	b163      	cbz	r3, d59ce <serialEventRun+0x32>
   d59b4:	f000 f9d6 	bl	d5d64 <_Z22__fetch_global_Serial1v>
   d59b8:	6803      	ldr	r3, [r0, #0]
   d59ba:	691b      	ldr	r3, [r3, #16]
   d59bc:	4798      	blx	r3
   d59be:	2800      	cmp	r0, #0
   d59c0:	dc03      	bgt.n	d59ca <serialEventRun+0x2e>
   d59c2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d59c4:	f3af 8000 	nop.w
   d59c8:	e7f2      	b.n	d59b0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d59ca:	f3af 8000 	nop.w
   d59ce:	bd08      	pop	{r3, pc}
	...

000d59d8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d59d8:	b508      	push	{r3, lr}
	serialEventRun();
   d59da:	f7ff ffdf 	bl	d599c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d59de:	f7ff fa7f 	bl	d4ee0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d59e2:	4b01      	ldr	r3, [pc, #4]	; (d59e8 <_post_loop+0x10>)
   d59e4:	6018      	str	r0, [r3, #0]
   d59e6:	bd08      	pop	{r3, pc}
   d59e8:	2003e708 	.word	0x2003e708

000d59ec <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d59ec:	4802      	ldr	r0, [pc, #8]	; (d59f8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d59ee:	4a03      	ldr	r2, [pc, #12]	; (d59fc <_Z33system_initialize_user_backup_ramv+0x10>)
   d59f0:	4903      	ldr	r1, [pc, #12]	; (d5a00 <_Z33system_initialize_user_backup_ramv+0x14>)
   d59f2:	1a12      	subs	r2, r2, r0
   d59f4:	f000 bf62 	b.w	d68bc <memcpy>
   d59f8:	2003f400 	.word	0x2003f400
   d59fc:	2003f404 	.word	0x2003f404
   d5a00:	000d7c80 	.word	0x000d7c80

000d5a04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5a04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5a06:	2300      	movs	r3, #0
   d5a08:	9300      	str	r3, [sp, #0]
   d5a0a:	461a      	mov	r2, r3
   d5a0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a10:	f7ff fbb0 	bl	d5174 <system_ctrl_set_result>
}
   d5a14:	b003      	add	sp, #12
   d5a16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5a1c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5a1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5a1e:	8843      	ldrh	r3, [r0, #2]
   d5a20:	2b0a      	cmp	r3, #10
   d5a22:	d008      	beq.n	d5a36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5a24:	2b50      	cmp	r3, #80	; 0x50
   d5a26:	d109      	bne.n	d5a3c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5a28:	4b09      	ldr	r3, [pc, #36]	; (d5a50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5a2a:	681b      	ldr	r3, [r3, #0]
   d5a2c:	b13b      	cbz	r3, d5a3e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5a2e:	b003      	add	sp, #12
   d5a30:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5a34:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5a36:	f7ff ffe5 	bl	d5a04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5a3a:	e006      	b.n	d5a4a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5a3c:	2300      	movs	r3, #0
   d5a3e:	9300      	str	r3, [sp, #0]
   d5a40:	461a      	mov	r2, r3
   d5a42:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a46:	f7ff fb95 	bl	d5174 <system_ctrl_set_result>
        break;
    }
}
   d5a4a:	b003      	add	sp, #12
   d5a4c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5a50:	2003e3d4 	.word	0x2003e3d4

000d5a54 <module_user_init_hook>:

void module_user_init_hook()
{
   d5a54:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5a56:	4c10      	ldr	r4, [pc, #64]	; (d5a98 <module_user_init_hook+0x44>)
   d5a58:	4d10      	ldr	r5, [pc, #64]	; (d5a9c <module_user_init_hook+0x48>)
   d5a5a:	6823      	ldr	r3, [r4, #0]
   d5a5c:	42ab      	cmp	r3, r5
   d5a5e:	4b10      	ldr	r3, [pc, #64]	; (d5aa0 <module_user_init_hook+0x4c>)
   d5a60:	bf0c      	ite	eq
   d5a62:	2201      	moveq	r2, #1
   d5a64:	2200      	movne	r2, #0
   d5a66:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5a68:	d002      	beq.n	d5a70 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5a6a:	f7ff ffbf 	bl	d59ec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5a6e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5a70:	f7ff fa26 	bl	d4ec0 <HAL_RNG_GetRandomNumber>
   d5a74:	4604      	mov	r4, r0
    srand(seed);
   d5a76:	f000 ff35 	bl	d68e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5a7a:	4b0a      	ldr	r3, [pc, #40]	; (d5aa4 <module_user_init_hook+0x50>)
   d5a7c:	b113      	cbz	r3, d5a84 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5a7e:	4620      	mov	r0, r4
   d5a80:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5a84:	2100      	movs	r1, #0
   d5a86:	4807      	ldr	r0, [pc, #28]	; (d5aa4 <module_user_init_hook+0x50>)
   d5a88:	f7ff fbf6 	bl	d5278 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5a8c:	2100      	movs	r1, #0
   d5a8e:	4806      	ldr	r0, [pc, #24]	; (d5aa8 <module_user_init_hook+0x54>)
}
   d5a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5a94:	f7ff bb64 	b.w	d5160 <system_ctrl_set_app_request_handler>
   d5a98:	2003f400 	.word	0x2003f400
   d5a9c:	9a271c1e 	.word	0x9a271c1e
   d5aa0:	2003e3d8 	.word	0x2003e3d8
   d5aa4:	00000000 	.word	0x00000000
   d5aa8:	000d5a1d 	.word	0x000d5a1d

000d5aac <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5aac:	4770      	bx	lr

000d5aae <_ZN9IPAddressD0Ev>:
   d5aae:	b510      	push	{r4, lr}
   d5ab0:	2118      	movs	r1, #24
   d5ab2:	4604      	mov	r4, r0
   d5ab4:	f000 fc64 	bl	d6380 <_ZdlPvj>
   d5ab8:	4620      	mov	r0, r4
   d5aba:	bd10      	pop	{r4, pc}

000d5abc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5abc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5abe:	7d03      	ldrb	r3, [r0, #20]
   d5ac0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5ac2:	b08d      	sub	sp, #52	; 0x34
   d5ac4:	460e      	mov	r6, r1
   d5ac6:	f100 0704 	add.w	r7, r0, #4
   d5aca:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5ace:	d002      	beq.n	d5ad6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5ad0:	f100 0508 	add.w	r5, r0, #8
   d5ad4:	e018      	b.n	d5b08 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ad6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ad8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ada:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ade:	232f      	movs	r3, #47	; 0x2f
   d5ae0:	462a      	mov	r2, r5
   d5ae2:	200a      	movs	r0, #10
   d5ae4:	f7ff fa3c 	bl	d4f60 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5ae8:	4628      	mov	r0, r5
   d5aea:	f000 ff6f 	bl	d69cc <strlen>
   d5aee:	6833      	ldr	r3, [r6, #0]
   d5af0:	4602      	mov	r2, r0
   d5af2:	68db      	ldr	r3, [r3, #12]
   d5af4:	4629      	mov	r1, r5
   d5af6:	4630      	mov	r0, r6
   d5af8:	4798      	blx	r3
   d5afa:	e00f      	b.n	d5b1c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5afc:	b124      	cbz	r4, d5b08 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5afe:	212e      	movs	r1, #46	; 0x2e
   d5b00:	4630      	mov	r0, r6
   d5b02:	f7ff fe31 	bl	d5768 <_ZN5Print5printEc>
   d5b06:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5b08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5b0c:	220a      	movs	r2, #10
   d5b0e:	4630      	mov	r0, r6
   d5b10:	f7ff fe43 	bl	d579a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b14:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b16:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b18:	d1f0      	bne.n	d5afc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b1a:	4620      	mov	r0, r4
    }
    return n;
}
   d5b1c:	b00d      	add	sp, #52	; 0x34
   d5b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b20 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5b20:	b510      	push	{r4, lr}
   d5b22:	4b05      	ldr	r3, [pc, #20]	; (d5b38 <_ZN9IPAddressC1Ev+0x18>)
   d5b24:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5b26:	2211      	movs	r2, #17
   d5b28:	f840 3b04 	str.w	r3, [r0], #4
   d5b2c:	2100      	movs	r1, #0
   d5b2e:	f000 fed0 	bl	d68d2 <memset>
{
    clear();
}
   d5b32:	4620      	mov	r0, r4
   d5b34:	bd10      	pop	{r4, pc}
   d5b36:	bf00      	nop
   d5b38:	000d78a8 	.word	0x000d78a8

000d5b3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5b3c:	4603      	mov	r3, r0
   d5b3e:	4a07      	ldr	r2, [pc, #28]	; (d5b5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5b40:	b510      	push	{r4, lr}
   d5b42:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5b46:	f101 0210 	add.w	r2, r1, #16
   d5b4a:	f851 4b04 	ldr.w	r4, [r1], #4
   d5b4e:	f843 4b04 	str.w	r4, [r3], #4
   d5b52:	4291      	cmp	r1, r2
   d5b54:	d1f9      	bne.n	d5b4a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5b56:	780a      	ldrb	r2, [r1, #0]
   d5b58:	701a      	strb	r2, [r3, #0]
}
   d5b5a:	bd10      	pop	{r4, pc}
   d5b5c:	000d78a8 	.word	0x000d78a8

000d5b60 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5b60:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5b62:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5b66:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5b6a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5b6e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5b72:	2304      	movs	r3, #4
   d5b74:	6041      	str	r1, [r0, #4]
   d5b76:	7503      	strb	r3, [r0, #20]
   d5b78:	bd10      	pop	{r4, pc}

000d5b7a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5b7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5b7c:	780d      	ldrb	r5, [r1, #0]
   d5b7e:	788b      	ldrb	r3, [r1, #2]
   d5b80:	784a      	ldrb	r2, [r1, #1]
   d5b82:	78c9      	ldrb	r1, [r1, #3]
   d5b84:	9100      	str	r1, [sp, #0]
   d5b86:	4629      	mov	r1, r5
   d5b88:	f7ff ffea 	bl	d5b60 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5b8c:	b003      	add	sp, #12
   d5b8e:	bd30      	pop	{r4, r5, pc}

000d5b90 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b90:	7441      	strb	r1, [r0, #17]
   d5b92:	4770      	bx	lr

000d5b94 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5b94:	4770      	bx	lr

000d5b96 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5b96:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5b98:	2100      	movs	r1, #0
   d5b9a:	7c00      	ldrb	r0, [r0, #16]
   d5b9c:	f7ff fa98 	bl	d50d0 <HAL_USB_USART_Receive_Data>
}
   d5ba0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5ba4:	bf28      	it	cs
   d5ba6:	f04f 30ff 	movcs.w	r0, #4294967295
   d5baa:	bd08      	pop	{r3, pc}

000d5bac <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5bac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5bae:	2101      	movs	r1, #1
   d5bb0:	7c00      	ldrb	r0, [r0, #16]
   d5bb2:	f7ff fa8d 	bl	d50d0 <HAL_USB_USART_Receive_Data>
}
   d5bb6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5bba:	bf28      	it	cs
   d5bbc:	f04f 30ff 	movcs.w	r0, #4294967295
   d5bc0:	bd08      	pop	{r3, pc}

000d5bc2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5bc2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5bc4:	7c00      	ldrb	r0, [r0, #16]
   d5bc6:	f7ff fa7b 	bl	d50c0 <HAL_USB_USART_Available_Data_For_Write>
}
   d5bca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5bce:	bd08      	pop	{r3, pc}

000d5bd0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5bd0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5bd2:	7c00      	ldrb	r0, [r0, #16]
   d5bd4:	f7ff fa6c 	bl	d50b0 <HAL_USB_USART_Available_Data>
}
   d5bd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5bdc:	bd08      	pop	{r3, pc}

000d5bde <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5bde:	7c00      	ldrb	r0, [r0, #16]
   d5be0:	f7ff ba86 	b.w	d50f0 <HAL_USB_USART_Flush_Data>

000d5be4 <_ZN9USBSerialD0Ev>:
   d5be4:	b510      	push	{r4, lr}
   d5be6:	2114      	movs	r1, #20
   d5be8:	4604      	mov	r4, r0
   d5bea:	f000 fbc9 	bl	d6380 <_ZdlPvj>
   d5bee:	4620      	mov	r0, r4
   d5bf0:	bd10      	pop	{r4, pc}

000d5bf2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5bf2:	b538      	push	{r3, r4, r5, lr}
   d5bf4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5bf6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5bf8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5bfa:	f7ff fa61 	bl	d50c0 <HAL_USB_USART_Available_Data_For_Write>
   d5bfe:	2800      	cmp	r0, #0
   d5c00:	dc01      	bgt.n	d5c06 <_ZN9USBSerial5writeEh+0x14>
   d5c02:	7c60      	ldrb	r0, [r4, #17]
   d5c04:	b128      	cbz	r0, d5c12 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5c06:	4629      	mov	r1, r5
   d5c08:	7c20      	ldrb	r0, [r4, #16]
   d5c0a:	f7ff fa69 	bl	d50e0 <HAL_USB_USART_Send_Data>
   d5c0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5c12:	bd38      	pop	{r3, r4, r5, pc}

000d5c14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c14:	b510      	push	{r4, lr}
   d5c16:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5c18:	2300      	movs	r3, #0
   d5c1a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c20:	60a3      	str	r3, [r4, #8]
   d5c22:	4b05      	ldr	r3, [pc, #20]	; (d5c38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5c24:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5c26:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c28:	4608      	mov	r0, r1
{
  _serial = serial;
   d5c2a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5c2c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5c2e:	4611      	mov	r1, r2
   d5c30:	f7ff fa2e 	bl	d5090 <HAL_USB_USART_Init>
}
   d5c34:	4620      	mov	r0, r4
   d5c36:	bd10      	pop	{r4, pc}
   d5c38:	000d78bc 	.word	0x000d78bc

000d5c3c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5c3c:	2200      	movs	r2, #0
   d5c3e:	7c00      	ldrb	r0, [r0, #16]
   d5c40:	f7ff ba2e 	b.w	d50a0 <HAL_USB_USART_Begin>

000d5c44 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d5c44:	7c00      	ldrb	r0, [r0, #16]
   d5c46:	f7ff ba5b 	b.w	d5100 <HAL_USB_USART_Is_Enabled>

000d5c4a <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
   d5c4a:	f7ff bffb 	b.w	d5c44 <_ZN9USBSerial9isEnabledEv>

000d5c4e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c4e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5c50:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c52:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5c54:	2100      	movs	r1, #0
   d5c56:	f000 fe3c 	bl	d68d2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5c5a:	4620      	mov	r0, r4
   d5c5c:	bd10      	pop	{r4, pc}
	...

000d5c60 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5c60:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c62:	4d0e      	ldr	r5, [pc, #56]	; (d5c9c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5c64:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5c66:	a801      	add	r0, sp, #4
   d5c68:	f7ff fff1 	bl	d5c4e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c6c:	6829      	ldr	r1, [r5, #0]
   d5c6e:	f011 0401 	ands.w	r4, r1, #1
   d5c72:	d110      	bne.n	d5c96 <_Z16_fetch_usbserialv+0x36>
   d5c74:	4628      	mov	r0, r5
   d5c76:	f7fe fa1d 	bl	d40b4 <__cxa_guard_acquire>
   d5c7a:	b160      	cbz	r0, d5c96 <_Z16_fetch_usbserialv+0x36>
   d5c7c:	aa01      	add	r2, sp, #4
   d5c7e:	4621      	mov	r1, r4
   d5c80:	4807      	ldr	r0, [pc, #28]	; (d5ca0 <_Z16_fetch_usbserialv+0x40>)
   d5c82:	f7ff ffc7 	bl	d5c14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5c86:	4628      	mov	r0, r5
   d5c88:	f7fe fa19 	bl	d40be <__cxa_guard_release>
   d5c8c:	4a05      	ldr	r2, [pc, #20]	; (d5ca4 <_Z16_fetch_usbserialv+0x44>)
   d5c8e:	4906      	ldr	r1, [pc, #24]	; (d5ca8 <_Z16_fetch_usbserialv+0x48>)
   d5c90:	4803      	ldr	r0, [pc, #12]	; (d5ca0 <_Z16_fetch_usbserialv+0x40>)
   d5c92:	f000 fb67 	bl	d6364 <__aeabi_atexit>
	return _usbserial;
}
   d5c96:	4802      	ldr	r0, [pc, #8]	; (d5ca0 <_Z16_fetch_usbserialv+0x40>)
   d5c98:	b007      	add	sp, #28
   d5c9a:	bd30      	pop	{r4, r5, pc}
   d5c9c:	2003e3dc 	.word	0x2003e3dc
   d5ca0:	2003e3e0 	.word	0x2003e3e0
   d5ca4:	2003e374 	.word	0x2003e374
   d5ca8:	000d5b95 	.word	0x000d5b95

000d5cac <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5cac:	4770      	bx	lr

000d5cae <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5cae:	7441      	strb	r1, [r0, #17]
   d5cb0:	4770      	bx	lr

000d5cb2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5cb2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5cb4:	7c00      	ldrb	r0, [r0, #16]
   d5cb6:	f7ff f993 	bl	d4fe0 <HAL_USART_Available_Data_For_Write>
}
   d5cba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cbe:	bd08      	pop	{r3, pc}

000d5cc0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5cc0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5cc2:	7c00      	ldrb	r0, [r0, #16]
   d5cc4:	f7ff f964 	bl	d4f90 <HAL_USART_Available_Data>
}
   d5cc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ccc:	bd08      	pop	{r3, pc}

000d5cce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5cce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5cd0:	7c00      	ldrb	r0, [r0, #16]
   d5cd2:	f7ff f96d 	bl	d4fb0 <HAL_USART_Peek_Data>
}
   d5cd6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cda:	bf28      	it	cs
   d5cdc:	f04f 30ff 	movcs.w	r0, #4294967295
   d5ce0:	bd08      	pop	{r3, pc}

000d5ce2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5ce2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5ce4:	7c00      	ldrb	r0, [r0, #16]
   d5ce6:	f7ff f95b 	bl	d4fa0 <HAL_USART_Read_Data>
}
   d5cea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cee:	bf28      	it	cs
   d5cf0:	f04f 30ff 	movcs.w	r0, #4294967295
   d5cf4:	bd08      	pop	{r3, pc}

000d5cf6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5cf6:	7c00      	ldrb	r0, [r0, #16]
   d5cf8:	f7ff b962 	b.w	d4fc0 <HAL_USART_Flush_Data>

000d5cfc <_ZN11USARTSerialD0Ev>:
   d5cfc:	b510      	push	{r4, lr}
   d5cfe:	2114      	movs	r1, #20
   d5d00:	4604      	mov	r4, r0
   d5d02:	f000 fb3d 	bl	d6380 <_ZdlPvj>
   d5d06:	4620      	mov	r0, r4
   d5d08:	bd10      	pop	{r4, pc}

000d5d0a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5d0a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d0c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5d0e:	4604      	mov	r4, r0
   d5d10:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d12:	b925      	cbnz	r5, d5d1e <_ZN11USARTSerial5writeEh+0x14>
   d5d14:	7c00      	ldrb	r0, [r0, #16]
   d5d16:	f7ff f963 	bl	d4fe0 <HAL_USART_Available_Data_For_Write>
   d5d1a:	2800      	cmp	r0, #0
   d5d1c:	dd05      	ble.n	d5d2a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d1e:	4631      	mov	r1, r6
   d5d20:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d26:	f7ff b92b 	b.w	d4f80 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5d2a:	4628      	mov	r0, r5
   d5d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5d30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5d30:	b510      	push	{r4, lr}
   d5d32:	4604      	mov	r4, r0
   d5d34:	4608      	mov	r0, r1
   d5d36:	4611      	mov	r1, r2
   d5d38:	2200      	movs	r2, #0
   d5d3a:	6062      	str	r2, [r4, #4]
   d5d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5d40:	60a2      	str	r2, [r4, #8]
   d5d42:	4a05      	ldr	r2, [pc, #20]	; (d5d58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5d44:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5d46:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5d48:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5d4a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5d4c:	461a      	mov	r2, r3
   d5d4e:	f7ff f90f 	bl	d4f70 <HAL_USART_Init>
}
   d5d52:	4620      	mov	r0, r4
   d5d54:	bd10      	pop	{r4, pc}
   d5d56:	bf00      	nop
   d5d58:	000d78ec 	.word	0x000d78ec

000d5d5c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5d5c:	7c00      	ldrb	r0, [r0, #16]
   d5d5e:	f7ff b937 	b.w	d4fd0 <HAL_USART_Is_Enabled>
	...

000d5d64 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5d64:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5d66:	4d0c      	ldr	r5, [pc, #48]	; (d5d98 <_Z22__fetch_global_Serial1v+0x34>)
   d5d68:	6829      	ldr	r1, [r5, #0]
   d5d6a:	f011 0401 	ands.w	r4, r1, #1
   d5d6e:	d111      	bne.n	d5d94 <_Z22__fetch_global_Serial1v+0x30>
   d5d70:	4628      	mov	r0, r5
   d5d72:	f7fe f99f 	bl	d40b4 <__cxa_guard_acquire>
   d5d76:	b168      	cbz	r0, d5d94 <_Z22__fetch_global_Serial1v+0x30>
   d5d78:	4a08      	ldr	r2, [pc, #32]	; (d5d9c <_Z22__fetch_global_Serial1v+0x38>)
   d5d7a:	4b09      	ldr	r3, [pc, #36]	; (d5da0 <_Z22__fetch_global_Serial1v+0x3c>)
   d5d7c:	4809      	ldr	r0, [pc, #36]	; (d5da4 <_Z22__fetch_global_Serial1v+0x40>)
   d5d7e:	4621      	mov	r1, r4
   d5d80:	f7ff ffd6 	bl	d5d30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5d84:	4628      	mov	r0, r5
   d5d86:	f7fe f99a 	bl	d40be <__cxa_guard_release>
   d5d8a:	4a07      	ldr	r2, [pc, #28]	; (d5da8 <_Z22__fetch_global_Serial1v+0x44>)
   d5d8c:	4907      	ldr	r1, [pc, #28]	; (d5dac <_Z22__fetch_global_Serial1v+0x48>)
   d5d8e:	4805      	ldr	r0, [pc, #20]	; (d5da4 <_Z22__fetch_global_Serial1v+0x40>)
   d5d90:	f000 fae8 	bl	d6364 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5d94:	4803      	ldr	r0, [pc, #12]	; (d5da4 <_Z22__fetch_global_Serial1v+0x40>)
   d5d96:	bd38      	pop	{r3, r4, r5, pc}
   d5d98:	2003e48c 	.word	0x2003e48c
   d5d9c:	2003e490 	.word	0x2003e490
   d5da0:	2003e408 	.word	0x2003e408
   d5da4:	2003e3f4 	.word	0x2003e3f4
   d5da8:	2003e374 	.word	0x2003e374
   d5dac:	000d5cad 	.word	0x000d5cad

000d5db0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5db0:	4770      	bx	lr

000d5db2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5db4:	4606      	mov	r6, r0
   d5db6:	4615      	mov	r5, r2
   d5db8:	460c      	mov	r4, r1
   d5dba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5dbc:	42bc      	cmp	r4, r7
   d5dbe:	d006      	beq.n	d5dce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5dc0:	6833      	ldr	r3, [r6, #0]
   d5dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5dc6:	689b      	ldr	r3, [r3, #8]
   d5dc8:	4630      	mov	r0, r6
   d5dca:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5dcc:	e7f6      	b.n	d5dbc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5dce:	4628      	mov	r0, r5
   d5dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5dd2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5dd2:	2200      	movs	r2, #0
   d5dd4:	7c00      	ldrb	r0, [r0, #16]
   d5dd6:	f7ff b923 	b.w	d5020 <HAL_I2C_Write_Data>

000d5dda <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5dda:	2100      	movs	r1, #0
   d5ddc:	7c00      	ldrb	r0, [r0, #16]
   d5dde:	f7ff b927 	b.w	d5030 <HAL_I2C_Available_Data>

000d5de2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5de2:	2100      	movs	r1, #0
   d5de4:	7c00      	ldrb	r0, [r0, #16]
   d5de6:	f7ff b92b 	b.w	d5040 <HAL_I2C_Read_Data>

000d5dea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5dea:	2100      	movs	r1, #0
   d5dec:	7c00      	ldrb	r0, [r0, #16]
   d5dee:	f7ff b92f 	b.w	d5050 <HAL_I2C_Peek_Data>

000d5df2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5df2:	2100      	movs	r1, #0
   d5df4:	7c00      	ldrb	r0, [r0, #16]
   d5df6:	f7ff b933 	b.w	d5060 <HAL_I2C_Flush_Data>

000d5dfa <_ZN7TwoWireD0Ev>:
   d5dfa:	b510      	push	{r4, lr}
   d5dfc:	2114      	movs	r1, #20
   d5dfe:	4604      	mov	r4, r0
   d5e00:	f000 fabe 	bl	d6380 <_ZdlPvj>
   d5e04:	4620      	mov	r0, r4
   d5e06:	bd10      	pop	{r4, pc}

000d5e08 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5e08:	b510      	push	{r4, lr}
   d5e0a:	4604      	mov	r4, r0
   d5e0c:	2300      	movs	r3, #0
   d5e0e:	6063      	str	r3, [r4, #4]
   d5e10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e14:	60a3      	str	r3, [r4, #8]
   d5e16:	4b04      	ldr	r3, [pc, #16]	; (d5e28 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5e18:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5e1a:	4608      	mov	r0, r1
   d5e1c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5e1e:	4611      	mov	r1, r2
   d5e20:	f7ff f92e 	bl	d5080 <HAL_I2C_Init>
}
   d5e24:	4620      	mov	r0, r4
   d5e26:	bd10      	pop	{r4, pc}
   d5e28:	000d791c 	.word	0x000d791c

000d5e2c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5e2c:	2300      	movs	r3, #0
   d5e2e:	461a      	mov	r2, r3
   d5e30:	4619      	mov	r1, r3
   d5e32:	7c00      	ldrb	r0, [r0, #16]
   d5e34:	f7ff b8dc 	b.w	d4ff0 <HAL_I2C_Begin>

000d5e38 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5e38:	2200      	movs	r2, #0
   d5e3a:	7c00      	ldrb	r0, [r0, #16]
   d5e3c:	f7ff b8e0 	b.w	d5000 <HAL_I2C_Begin_Transmission>

000d5e40 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5e40:	b2c9      	uxtb	r1, r1
   d5e42:	f7ff bff9 	b.w	d5e38 <_ZN7TwoWire17beginTransmissionEh>

000d5e46 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5e46:	2200      	movs	r2, #0
   d5e48:	7c00      	ldrb	r0, [r0, #16]
   d5e4a:	f7ff b8e1 	b.w	d5010 <HAL_I2C_End_Transmission>

000d5e4e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5e4e:	2101      	movs	r1, #1
   d5e50:	f7ff bff9 	b.w	d5e46 <_ZN7TwoWire15endTransmissionEh>

000d5e54 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5e54:	2100      	movs	r1, #0
   d5e56:	7c00      	ldrb	r0, [r0, #16]
   d5e58:	f7ff b90a 	b.w	d5070 <HAL_I2C_Is_Enabled>

000d5e5c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d5e5c:	b510      	push	{r4, lr}
  if (0 == max) {
   d5e5e:	4604      	mov	r4, r0
   d5e60:	b130      	cbz	r0, d5e70 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d5e62:	f000 fd67 	bl	d6934 <rand>
   d5e66:	fb90 f3f4 	sdiv	r3, r0, r4
   d5e6a:	fb03 0014 	mls	r0, r3, r4, r0
   d5e6e:	bd10      	pop	{r4, pc}
}
   d5e70:	bd10      	pop	{r4, pc}

000d5e72 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d5e72:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d5e74:	b510      	push	{r4, lr}
   d5e76:	4604      	mov	r4, r0
  if (min >= max) {
   d5e78:	da04      	bge.n	d5e84 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d5e7a:	1a08      	subs	r0, r1, r0
   d5e7c:	f7ff ffee 	bl	d5e5c <_Z6randomi>
   d5e80:	4420      	add	r0, r4
   d5e82:	bd10      	pop	{r4, pc}
}
   d5e84:	bd10      	pop	{r4, pc}

000d5e86 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e86:	2200      	movs	r2, #0
   d5e88:	4611      	mov	r1, r2
   d5e8a:	6840      	ldr	r0, [r0, #4]
   d5e8c:	f7ff b9b4 	b.w	d51f8 <network_listening>

000d5e90 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e90:	2200      	movs	r2, #0
   d5e92:	4611      	mov	r1, r2
   d5e94:	6840      	ldr	r0, [r0, #4]
   d5e96:	f7ff b9bf 	b.w	d5218 <network_get_listen_timeout>

000d5e9a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e9a:	2200      	movs	r2, #0
   d5e9c:	6840      	ldr	r0, [r0, #4]
   d5e9e:	f7ff b9b3 	b.w	d5208 <network_set_listen_timeout>

000d5ea2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ea2:	2200      	movs	r2, #0
   d5ea4:	f081 0101 	eor.w	r1, r1, #1
   d5ea8:	6840      	ldr	r0, [r0, #4]
   d5eaa:	f7ff b99d 	b.w	d51e8 <network_listen>

000d5eae <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5eae:	2300      	movs	r3, #0
   d5eb0:	461a      	mov	r2, r3
   d5eb2:	2101      	movs	r1, #1
   d5eb4:	6840      	ldr	r0, [r0, #4]
   d5eb6:	f7ff b98f 	b.w	d51d8 <network_off>

000d5eba <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5eba:	2300      	movs	r3, #0
   d5ebc:	461a      	mov	r2, r3
   d5ebe:	4619      	mov	r1, r3
   d5ec0:	6840      	ldr	r0, [r0, #4]
   d5ec2:	f7ff b981 	b.w	d51c8 <network_on>

000d5ec6 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ec6:	2200      	movs	r2, #0
   d5ec8:	4611      	mov	r1, r2
   d5eca:	6840      	ldr	r0, [r0, #4]
   d5ecc:	f7ff b974 	b.w	d51b8 <network_ready>

000d5ed0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ed0:	2200      	movs	r2, #0
   d5ed2:	4611      	mov	r1, r2
   d5ed4:	6840      	ldr	r0, [r0, #4]
   d5ed6:	f7ff b95f 	b.w	d5198 <network_connecting>

000d5eda <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5eda:	2200      	movs	r2, #0
   d5edc:	2102      	movs	r1, #2
   d5ede:	6840      	ldr	r0, [r0, #4]
   d5ee0:	f7ff b962 	b.w	d51a8 <network_disconnect>

000d5ee4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5ee4:	2300      	movs	r3, #0
   d5ee6:	461a      	mov	r2, r3
   d5ee8:	6840      	ldr	r0, [r0, #4]
   d5eea:	f7ff b94d 	b.w	d5188 <network_connect>

000d5eee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5eee:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5ef0:	4605      	mov	r5, r0
   d5ef2:	b188      	cbz	r0, d5f18 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ef4:	6804      	ldr	r4, [r0, #0]
   d5ef6:	b14c      	cbz	r4, d5f0c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5ef8:	68a3      	ldr	r3, [r4, #8]
   d5efa:	b11b      	cbz	r3, d5f04 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5efc:	2203      	movs	r2, #3
   d5efe:	4621      	mov	r1, r4
   d5f00:	4620      	mov	r0, r4
   d5f02:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f04:	2110      	movs	r1, #16
   d5f06:	4620      	mov	r0, r4
   d5f08:	f000 fa3a 	bl	d6380 <_ZdlPvj>
   d5f0c:	4628      	mov	r0, r5
   d5f0e:	2114      	movs	r1, #20
      }
   d5f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f14:	f000 ba34 	b.w	d6380 <_ZdlPvj>
   d5f18:	bd38      	pop	{r3, r4, r5, pc}

000d5f1a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5f1a:	b110      	cbz	r0, d5f22 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5f1c:	6803      	ldr	r3, [r0, #0]
   d5f1e:	685b      	ldr	r3, [r3, #4]
   d5f20:	4718      	bx	r3
   d5f22:	4770      	bx	lr

000d5f24 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5f24:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5f26:	6803      	ldr	r3, [r0, #0]
   d5f28:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5f2a:	b1bb      	cbz	r3, d5f5c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5f2c:	6858      	ldr	r0, [r3, #4]
   d5f2e:	f7fe ffef 	bl	d4f10 <os_thread_is_current>
   d5f32:	b978      	cbnz	r0, d5f54 <_ZN6ThreadD1Ev+0x30>
   d5f34:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5f36:	7c5a      	ldrb	r2, [r3, #17]
   d5f38:	b912      	cbnz	r2, d5f40 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5f3a:	6858      	ldr	r0, [r3, #4]
   d5f3c:	f7fe fff0 	bl	d4f20 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5f40:	6823      	ldr	r3, [r4, #0]
   d5f42:	6858      	ldr	r0, [r3, #4]
   d5f44:	f7fe fff4 	bl	d4f30 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f48:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5f4a:	2300      	movs	r3, #0
   d5f4c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5f4e:	b128      	cbz	r0, d5f5c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5f50:	f7ff ffcd 	bl	d5eee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f54:	6820      	ldr	r0, [r4, #0]
   d5f56:	b108      	cbz	r0, d5f5c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5f58:	f7ff ffc9 	bl	d5eee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5f5c:	4620      	mov	r0, r4
   d5f5e:	bd10      	pop	{r4, pc}

000d5f60 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5f60:	b538      	push	{r3, r4, r5, lr}
   d5f62:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f64:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5f68:	b108      	cbz	r0, d5f6e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5f6a:	f7fe f896 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5f6e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5f72:	b108      	cbz	r0, d5f78 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5f74:	f7fe ffec 	bl	d4f50 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f78:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5f7c:	b135      	cbz	r5, d5f8c <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f7e:	4628      	mov	r0, r5
   d5f80:	f7ff ffd0 	bl	d5f24 <_ZN6ThreadD1Ev>
   d5f84:	2104      	movs	r1, #4
   d5f86:	4628      	mov	r0, r5
   d5f88:	f000 f9fa 	bl	d6380 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f8c:	6820      	ldr	r0, [r4, #0]
   d5f8e:	b108      	cbz	r0, d5f94 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5f90:	f7ff ffc3 	bl	d5f1a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5f94:	4620      	mov	r0, r4
   d5f96:	bd38      	pop	{r3, r4, r5, pc}

000d5f98 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5f98:	b510      	push	{r4, lr}
   d5f9a:	4b04      	ldr	r3, [pc, #16]	; (d5fac <_ZN5spark9MeshClassD1Ev+0x14>)
   d5f9c:	4604      	mov	r4, r0
   d5f9e:	f840 3b08 	str.w	r3, [r0], #8
   d5fa2:	f7ff ffdd 	bl	d5f60 <_ZN5spark11MeshPublishD1Ev>
   d5fa6:	4620      	mov	r0, r4
   d5fa8:	bd10      	pop	{r4, pc}
   d5faa:	bf00      	nop
   d5fac:	000d7944 	.word	0x000d7944

000d5fb0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5fb0:	b538      	push	{r3, r4, r5, lr}
   d5fb2:	4c0e      	ldr	r4, [pc, #56]	; (d5fec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5fb4:	4b0e      	ldr	r3, [pc, #56]	; (d5ff0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5fb6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5fb8:	2500      	movs	r5, #0
   d5fba:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5fbc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5fc0:	6063      	str	r3, [r4, #4]
   d5fc2:	60a5      	str	r5, [r4, #8]
   d5fc4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5fc8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5fcc:	f7fe ffb8 	bl	d4f40 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5fd0:	4b08      	ldr	r3, [pc, #32]	; (d5ff4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5fd2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5fd6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5fda:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5fdc:	4620      	mov	r0, r4
   d5fde:	4a06      	ldr	r2, [pc, #24]	; (d5ff8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5fe0:	4906      	ldr	r1, [pc, #24]	; (d5ffc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5fe6:	f000 b9bd 	b.w	d6364 <__aeabi_atexit>
   d5fea:	bf00      	nop
   d5fec:	2003e514 	.word	0x2003e514
   d5ff0:	000d79ac 	.word	0x000d79ac
   d5ff4:	000d7944 	.word	0x000d7944
   d5ff8:	2003e374 	.word	0x2003e374
   d5ffc:	000d5f99 	.word	0x000d5f99

000d6000 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6000:	2200      	movs	r2, #0
   d6002:	4611      	mov	r1, r2
   d6004:	6840      	ldr	r0, [r0, #4]
   d6006:	f7ff b8d7 	b.w	d51b8 <network_ready>

000d600a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d600a:	2200      	movs	r2, #0
   d600c:	4611      	mov	r1, r2
   d600e:	6840      	ldr	r0, [r0, #4]
   d6010:	f7ff b8f2 	b.w	d51f8 <network_listening>

000d6014 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6014:	2200      	movs	r2, #0
   d6016:	4611      	mov	r1, r2
   d6018:	6840      	ldr	r0, [r0, #4]
   d601a:	f7ff b8fd 	b.w	d5218 <network_get_listen_timeout>

000d601e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d601e:	2200      	movs	r2, #0
   d6020:	6840      	ldr	r0, [r0, #4]
   d6022:	f7ff b8f1 	b.w	d5208 <network_set_listen_timeout>

000d6026 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6026:	2200      	movs	r2, #0
   d6028:	f081 0101 	eor.w	r1, r1, #1
   d602c:	6840      	ldr	r0, [r0, #4]
   d602e:	f7ff b8db 	b.w	d51e8 <network_listen>

000d6032 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6032:	2300      	movs	r3, #0
   d6034:	461a      	mov	r2, r3
   d6036:	4619      	mov	r1, r3
   d6038:	6840      	ldr	r0, [r0, #4]
   d603a:	f7ff b8cd 	b.w	d51d8 <network_off>

000d603e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d603e:	2300      	movs	r3, #0
   d6040:	461a      	mov	r2, r3
   d6042:	4619      	mov	r1, r3
   d6044:	6840      	ldr	r0, [r0, #4]
   d6046:	f7ff b8bf 	b.w	d51c8 <network_on>

000d604a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d604a:	2200      	movs	r2, #0
   d604c:	4611      	mov	r1, r2
   d604e:	6840      	ldr	r0, [r0, #4]
   d6050:	f7ff b8a2 	b.w	d5198 <network_connecting>

000d6054 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6054:	2200      	movs	r2, #0
   d6056:	2102      	movs	r1, #2
   d6058:	6840      	ldr	r0, [r0, #4]
   d605a:	f7ff b8a5 	b.w	d51a8 <network_disconnect>

000d605e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d605e:	2300      	movs	r3, #0
   d6060:	461a      	mov	r2, r3
   d6062:	6840      	ldr	r0, [r0, #4]
   d6064:	f7ff b890 	b.w	d5188 <network_connect>

000d6068 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6068:	4b02      	ldr	r3, [pc, #8]	; (d6074 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d606a:	2204      	movs	r2, #4
   d606c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d606e:	4a02      	ldr	r2, [pc, #8]	; (d6078 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6070:	601a      	str	r2, [r3, #0]
   d6072:	4770      	bx	lr
   d6074:	2003e6e8 	.word	0x2003e6e8
   d6078:	000d7978 	.word	0x000d7978

000d607c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d607c:	2300      	movs	r3, #0
   d607e:	461a      	mov	r2, r3
   d6080:	6840      	ldr	r0, [r0, #4]
   d6082:	f7ff b881 	b.w	d5188 <network_connect>

000d6086 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6086:	2200      	movs	r2, #0
   d6088:	2102      	movs	r1, #2
   d608a:	6840      	ldr	r0, [r0, #4]
   d608c:	f7ff b88c 	b.w	d51a8 <network_disconnect>

000d6090 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6090:	2200      	movs	r2, #0
   d6092:	4611      	mov	r1, r2
   d6094:	6840      	ldr	r0, [r0, #4]
   d6096:	f7ff b87f 	b.w	d5198 <network_connecting>

000d609a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d609a:	2200      	movs	r2, #0
   d609c:	4611      	mov	r1, r2
   d609e:	6840      	ldr	r0, [r0, #4]
   d60a0:	f7ff b88a 	b.w	d51b8 <network_ready>

000d60a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d60a4:	2300      	movs	r3, #0
   d60a6:	461a      	mov	r2, r3
   d60a8:	4619      	mov	r1, r3
   d60aa:	6840      	ldr	r0, [r0, #4]
   d60ac:	f7ff b88c 	b.w	d51c8 <network_on>

000d60b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d60b0:	2300      	movs	r3, #0
   d60b2:	461a      	mov	r2, r3
   d60b4:	4619      	mov	r1, r3
   d60b6:	6840      	ldr	r0, [r0, #4]
   d60b8:	f7ff b88e 	b.w	d51d8 <network_off>

000d60bc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d60bc:	2200      	movs	r2, #0
   d60be:	f081 0101 	eor.w	r1, r1, #1
   d60c2:	6840      	ldr	r0, [r0, #4]
   d60c4:	f7ff b890 	b.w	d51e8 <network_listen>

000d60c8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d60c8:	2200      	movs	r2, #0
   d60ca:	6840      	ldr	r0, [r0, #4]
   d60cc:	f7ff b89c 	b.w	d5208 <network_set_listen_timeout>

000d60d0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d60d0:	2200      	movs	r2, #0
   d60d2:	4611      	mov	r1, r2
   d60d4:	6840      	ldr	r0, [r0, #4]
   d60d6:	f7ff b89f 	b.w	d5218 <network_get_listen_timeout>

000d60da <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d60da:	2200      	movs	r2, #0
   d60dc:	4611      	mov	r1, r2
   d60de:	6840      	ldr	r0, [r0, #4]
   d60e0:	f7ff b88a 	b.w	d51f8 <network_listening>

000d60e4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d60e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d60e8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d60ea:	b095      	sub	sp, #84	; 0x54
   d60ec:	4616      	mov	r6, r2
   d60ee:	460d      	mov	r5, r1
   d60f0:	4607      	mov	r7, r0
    IPAddress addr;
   d60f2:	f7ff fd15 	bl	d5b20 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d60f6:	4621      	mov	r1, r4
   d60f8:	2220      	movs	r2, #32
   d60fa:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d60fc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d60fe:	f000 fbe8 	bl	d68d2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6102:	2340      	movs	r3, #64	; 0x40
   d6104:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6106:	4621      	mov	r1, r4
   d6108:	466b      	mov	r3, sp
   d610a:	aa0c      	add	r2, sp, #48	; 0x30
   d610c:	4630      	mov	r0, r6
   d610e:	f7fe fe5f 	bl	d4dd0 <netdb_getaddrinfo>
    if (!r) {
   d6112:	4604      	mov	r4, r0
   d6114:	2800      	cmp	r0, #0
   d6116:	d144      	bne.n	d61a2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6118:	4602      	mov	r2, r0
   d611a:	2101      	movs	r1, #1
   d611c:	6868      	ldr	r0, [r5, #4]
   d611e:	f7ff f84b 	bl	d51b8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6122:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6124:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6126:	4622      	mov	r2, r4
   d6128:	6868      	ldr	r0, [r5, #4]
   d612a:	f7ff f845 	bl	d51b8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d612e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6130:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6132:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6134:	2e00      	cmp	r6, #0
   d6136:	d034      	beq.n	d61a2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6138:	2900      	cmp	r1, #0
   d613a:	d132      	bne.n	d61a2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d613c:	6873      	ldr	r3, [r6, #4]
   d613e:	2b02      	cmp	r3, #2
   d6140:	d002      	beq.n	d6148 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6142:	2b0a      	cmp	r3, #10
   d6144:	d009      	beq.n	d615a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6146:	e02a      	b.n	d619e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6148:	f1b8 0f00 	cmp.w	r8, #0
   d614c:	d027      	beq.n	d619e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d614e:	6971      	ldr	r1, [r6, #20]
   d6150:	4638      	mov	r0, r7
   d6152:	3104      	adds	r1, #4
   d6154:	f7ff fd11 	bl	d5b7a <_ZN9IPAddressaSEPKh>
   d6158:	e020      	b.n	d619c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d615a:	f1b9 0f00 	cmp.w	r9, #0
   d615e:	d01e      	beq.n	d619e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6160:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6162:	2211      	movs	r2, #17
   d6164:	a801      	add	r0, sp, #4
   d6166:	f000 fbb4 	bl	d68d2 <memset>
                    a.v = 6;
   d616a:	2306      	movs	r3, #6
   d616c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6170:	ad01      	add	r5, sp, #4
   d6172:	f104 0308 	add.w	r3, r4, #8
   d6176:	3418      	adds	r4, #24
   d6178:	6818      	ldr	r0, [r3, #0]
   d617a:	6859      	ldr	r1, [r3, #4]
   d617c:	462a      	mov	r2, r5
   d617e:	c203      	stmia	r2!, {r0, r1}
   d6180:	3308      	adds	r3, #8
   d6182:	42a3      	cmp	r3, r4
   d6184:	4615      	mov	r5, r2
   d6186:	d1f7      	bne.n	d6178 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6188:	a901      	add	r1, sp, #4
   d618a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d618c:	ad07      	add	r5, sp, #28
   d618e:	f7ff fcd5 	bl	d5b3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6194:	1d3c      	adds	r4, r7, #4
   d6196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6198:	682b      	ldr	r3, [r5, #0]
   d619a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d619c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d619e:	69f6      	ldr	r6, [r6, #28]
   d61a0:	e7c8      	b.n	d6134 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d61a2:	9800      	ldr	r0, [sp, #0]
   d61a4:	f7fe fe0c 	bl	d4dc0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d61a8:	4638      	mov	r0, r7
   d61aa:	b015      	add	sp, #84	; 0x54
   d61ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d61b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d61b0:	4b02      	ldr	r3, [pc, #8]	; (d61bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d61b2:	4a03      	ldr	r2, [pc, #12]	; (d61c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d61b4:	601a      	str	r2, [r3, #0]
   d61b6:	2200      	movs	r2, #0
   d61b8:	605a      	str	r2, [r3, #4]
   d61ba:	4770      	bx	lr
   d61bc:	2003e6f0 	.word	0x2003e6f0
   d61c0:	000d79ac 	.word	0x000d79ac

000d61c4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d61c4:	b510      	push	{r4, lr}
   d61c6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d61c8:	f000 f86c 	bl	d62a4 <_ZN8particle7globals11instanceSpiEv>
   d61cc:	f7ff f9a1 	bl	d5512 <_ZN8SPIClass9isEnabledEv>
   d61d0:	b128      	cbz	r0, d61de <pinAvailable+0x1a>
   d61d2:	f1a4 030b 	sub.w	r3, r4, #11
   d61d6:	2b02      	cmp	r3, #2
   d61d8:	d801      	bhi.n	d61de <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d61da:	2000      	movs	r0, #0
   d61dc:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d61de:	f000 f89b 	bl	d6318 <_Z19__fetch_global_Wirev>
   d61e2:	f7ff fe37 	bl	d5e54 <_ZN7TwoWire9isEnabledEv>
   d61e6:	b108      	cbz	r0, d61ec <pinAvailable+0x28>
   d61e8:	2c01      	cmp	r4, #1
   d61ea:	d9f6      	bls.n	d61da <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d61ec:	f7ff fdba 	bl	d5d64 <_Z22__fetch_global_Serial1v>
   d61f0:	f7ff fdb4 	bl	d5d5c <_ZN11USARTSerial9isEnabledEv>
   d61f4:	b118      	cbz	r0, d61fe <pinAvailable+0x3a>
   d61f6:	f1a4 0309 	sub.w	r3, r4, #9
   d61fa:	2b01      	cmp	r3, #1
   d61fc:	d9ed      	bls.n	d61da <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d61fe:	2c23      	cmp	r4, #35	; 0x23
   d6200:	bf8c      	ite	hi
   d6202:	2000      	movhi	r0, #0
   d6204:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6206:	bd10      	pop	{r4, pc}

000d6208 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6208:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d620a:	b538      	push	{r3, r4, r5, lr}
   d620c:	4604      	mov	r4, r0
   d620e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6210:	d80a      	bhi.n	d6228 <pinMode+0x20>
   d6212:	29ff      	cmp	r1, #255	; 0xff
   d6214:	d008      	beq.n	d6228 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6216:	f7ff ffd5 	bl	d61c4 <pinAvailable>
   d621a:	b128      	cbz	r0, d6228 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d621c:	4629      	mov	r1, r5
   d621e:	4620      	mov	r0, r4
}
   d6220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6224:	f7fe bde4 	b.w	d4df0 <HAL_Pin_Mode>
   d6228:	bd38      	pop	{r3, r4, r5, pc}

000d622a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d622a:	b538      	push	{r3, r4, r5, lr}
   d622c:	4604      	mov	r4, r0
   d622e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6230:	f7fe fde6 	bl	d4e00 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6234:	28ff      	cmp	r0, #255	; 0xff
   d6236:	d010      	beq.n	d625a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6238:	2806      	cmp	r0, #6
   d623a:	d804      	bhi.n	d6246 <digitalWrite+0x1c>
   d623c:	234d      	movs	r3, #77	; 0x4d
   d623e:	fa23 f000 	lsr.w	r0, r3, r0
   d6242:	07c3      	lsls	r3, r0, #31
   d6244:	d409      	bmi.n	d625a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6246:	4620      	mov	r0, r4
   d6248:	f7ff ffbc 	bl	d61c4 <pinAvailable>
   d624c:	b128      	cbz	r0, d625a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d624e:	4629      	mov	r1, r5
   d6250:	4620      	mov	r0, r4
}
   d6252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6256:	f7fe bddb 	b.w	d4e10 <HAL_GPIO_Write>
   d625a:	bd38      	pop	{r3, r4, r5, pc}

000d625c <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d625c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6260:	4690      	mov	r8, r2
   d6262:	461e      	mov	r6, r3
   d6264:	2407      	movs	r4, #7
   d6266:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d6268:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d626a:	f1b8 0f00 	cmp.w	r8, #0
   d626e:	d104      	bne.n	d627a <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d6270:	f1c4 0107 	rsb	r1, r4, #7
   d6274:	fa46 f101 	asr.w	r1, r6, r1
   d6278:	e001      	b.n	d627e <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d627a:	fa46 f104 	asr.w	r1, r6, r4
   d627e:	f001 0101 	and.w	r1, r1, #1
   d6282:	4638      	mov	r0, r7
   d6284:	f7ff ffd1 	bl	d622a <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d6288:	2101      	movs	r1, #1
   d628a:	4628      	mov	r0, r5
   d628c:	f7ff ffcd 	bl	d622a <digitalWrite>
    digitalWrite(clockPin, LOW);
   d6290:	2100      	movs	r1, #0
   d6292:	4628      	mov	r0, r5
   d6294:	f7ff ffc9 	bl	d622a <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d6298:	f114 34ff 	adds.w	r4, r4, #4294967295
   d629c:	d2e5      	bcs.n	d626a <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d629e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d62a4 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d62a4:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d62a6:	4d0b      	ldr	r5, [pc, #44]	; (d62d4 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d62a8:	6829      	ldr	r1, [r5, #0]
   d62aa:	f011 0401 	ands.w	r4, r1, #1
   d62ae:	d10f      	bne.n	d62d0 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d62b0:	4628      	mov	r0, r5
   d62b2:	f7fd feff 	bl	d40b4 <__cxa_guard_acquire>
   d62b6:	b158      	cbz	r0, d62d0 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d62b8:	4621      	mov	r1, r4
   d62ba:	4807      	ldr	r0, [pc, #28]	; (d62d8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d62bc:	f7ff f868 	bl	d5390 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d62c0:	4628      	mov	r0, r5
   d62c2:	f7fd fefc 	bl	d40be <__cxa_guard_release>
   d62c6:	4a05      	ldr	r2, [pc, #20]	; (d62dc <_ZN8particle7globals11instanceSpiEv+0x38>)
   d62c8:	4905      	ldr	r1, [pc, #20]	; (d62e0 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d62ca:	4803      	ldr	r0, [pc, #12]	; (d62d8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d62cc:	f000 f84a 	bl	d6364 <__aeabi_atexit>
    return instance;
}
   d62d0:	4801      	ldr	r0, [pc, #4]	; (d62d8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d62d2:	bd38      	pop	{r3, r4, r5, pc}
   d62d4:	2003e704 	.word	0x2003e704
   d62d8:	2003e6f8 	.word	0x2003e6f8
   d62dc:	2003e374 	.word	0x2003e374
   d62e0:	000d5375 	.word	0x000d5375

000d62e4 <_Z17acquireWireBufferv>:
   d62e4:	b570      	push	{r4, r5, r6, lr}
   d62e6:	4604      	mov	r4, r0
   d62e8:	2514      	movs	r5, #20
   d62ea:	462a      	mov	r2, r5
   d62ec:	4e09      	ldr	r6, [pc, #36]	; (d6314 <_Z17acquireWireBufferv+0x30>)
   d62ee:	2100      	movs	r1, #0
   d62f0:	f000 faef 	bl	d68d2 <memset>
   d62f4:	8025      	strh	r5, [r4, #0]
   d62f6:	2520      	movs	r5, #32
   d62f8:	4631      	mov	r1, r6
   d62fa:	60a5      	str	r5, [r4, #8]
   d62fc:	6125      	str	r5, [r4, #16]
   d62fe:	4628      	mov	r0, r5
   d6300:	f000 f840 	bl	d6384 <_ZnajRKSt9nothrow_t>
   d6304:	4631      	mov	r1, r6
   d6306:	6060      	str	r0, [r4, #4]
   d6308:	4628      	mov	r0, r5
   d630a:	f000 f83b 	bl	d6384 <_ZnajRKSt9nothrow_t>
   d630e:	60e0      	str	r0, [r4, #12]
   d6310:	4620      	mov	r0, r4
   d6312:	bd70      	pop	{r4, r5, r6, pc}
   d6314:	000d79d8 	.word	0x000d79d8

000d6318 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6318:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d631a:	4d0e      	ldr	r5, [pc, #56]	; (d6354 <_Z19__fetch_global_Wirev+0x3c>)
   d631c:	6829      	ldr	r1, [r5, #0]
   d631e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6322:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6324:	d113      	bne.n	d634e <_Z19__fetch_global_Wirev+0x36>
   d6326:	4628      	mov	r0, r5
   d6328:	f7fd fec4 	bl	d40b4 <__cxa_guard_acquire>
   d632c:	b178      	cbz	r0, d634e <_Z19__fetch_global_Wirev+0x36>
   d632e:	a801      	add	r0, sp, #4
   d6330:	f7ff ffd8 	bl	d62e4 <_Z17acquireWireBufferv>
   d6334:	aa01      	add	r2, sp, #4
   d6336:	4621      	mov	r1, r4
   d6338:	4807      	ldr	r0, [pc, #28]	; (d6358 <_Z19__fetch_global_Wirev+0x40>)
   d633a:	f7ff fd65 	bl	d5e08 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d633e:	4628      	mov	r0, r5
   d6340:	f7fd febd 	bl	d40be <__cxa_guard_release>
   d6344:	4a05      	ldr	r2, [pc, #20]	; (d635c <_Z19__fetch_global_Wirev+0x44>)
   d6346:	4906      	ldr	r1, [pc, #24]	; (d6360 <_Z19__fetch_global_Wirev+0x48>)
   d6348:	4803      	ldr	r0, [pc, #12]	; (d6358 <_Z19__fetch_global_Wirev+0x40>)
   d634a:	f000 f80b 	bl	d6364 <__aeabi_atexit>
	return wire;
}
   d634e:	4802      	ldr	r0, [pc, #8]	; (d6358 <_Z19__fetch_global_Wirev+0x40>)
   d6350:	b007      	add	sp, #28
   d6352:	bd30      	pop	{r4, r5, pc}
   d6354:	2003e70c 	.word	0x2003e70c
   d6358:	2003e710 	.word	0x2003e710
   d635c:	2003e374 	.word	0x2003e374
   d6360:	000d5db1 	.word	0x000d5db1

000d6364 <__aeabi_atexit>:
   d6364:	460b      	mov	r3, r1
   d6366:	4601      	mov	r1, r0
   d6368:	4618      	mov	r0, r3
   d636a:	f000 b9a1 	b.w	d66b0 <__cxa_atexit>
	...

000d6370 <_ZSt15get_new_handlerv>:
   d6370:	4b02      	ldr	r3, [pc, #8]	; (d637c <_ZSt15get_new_handlerv+0xc>)
   d6372:	6818      	ldr	r0, [r3, #0]
   d6374:	f3bf 8f5f 	dmb	sy
   d6378:	4770      	bx	lr
   d637a:	bf00      	nop
   d637c:	2003e724 	.word	0x2003e724

000d6380 <_ZdlPvj>:
   d6380:	f7fd be89 	b.w	d4096 <_ZdlPv>

000d6384 <_ZnajRKSt9nothrow_t>:
   d6384:	f000 b800 	b.w	d6388 <_ZnwjRKSt9nothrow_t>

000d6388 <_ZnwjRKSt9nothrow_t>:
   d6388:	b510      	push	{r4, lr}
   d638a:	2800      	cmp	r0, #0
   d638c:	bf14      	ite	ne
   d638e:	4604      	movne	r4, r0
   d6390:	2401      	moveq	r4, #1
   d6392:	4620      	mov	r0, r4
   d6394:	f7fe ff78 	bl	d5288 <malloc>
   d6398:	b920      	cbnz	r0, d63a4 <_ZnwjRKSt9nothrow_t+0x1c>
   d639a:	f7ff ffe9 	bl	d6370 <_ZSt15get_new_handlerv>
   d639e:	b108      	cbz	r0, d63a4 <_ZnwjRKSt9nothrow_t+0x1c>
   d63a0:	4780      	blx	r0
   d63a2:	e7f6      	b.n	d6392 <_ZnwjRKSt9nothrow_t+0xa>
   d63a4:	bd10      	pop	{r4, pc}
	...

000d63a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d63a8:	4b18      	ldr	r3, [pc, #96]	; (d640c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d63aa:	681a      	ldr	r2, [r3, #0]
   d63ac:	07d1      	lsls	r1, r2, #31
   d63ae:	bf5c      	itt	pl
   d63b0:	2201      	movpl	r2, #1
   d63b2:	601a      	strpl	r2, [r3, #0]
   d63b4:	4b16      	ldr	r3, [pc, #88]	; (d6410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d63b6:	681a      	ldr	r2, [r3, #0]
   d63b8:	07d2      	lsls	r2, r2, #31
   d63ba:	bf5c      	itt	pl
   d63bc:	2201      	movpl	r2, #1
   d63be:	601a      	strpl	r2, [r3, #0]
   d63c0:	4b14      	ldr	r3, [pc, #80]	; (d6414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d63c2:	681a      	ldr	r2, [r3, #0]
   d63c4:	07d0      	lsls	r0, r2, #31
   d63c6:	bf5c      	itt	pl
   d63c8:	2201      	movpl	r2, #1
   d63ca:	601a      	strpl	r2, [r3, #0]
   d63cc:	4b12      	ldr	r3, [pc, #72]	; (d6418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d63ce:	681a      	ldr	r2, [r3, #0]
   d63d0:	07d1      	lsls	r1, r2, #31
   d63d2:	bf5c      	itt	pl
   d63d4:	2201      	movpl	r2, #1
   d63d6:	601a      	strpl	r2, [r3, #0]
   d63d8:	4b10      	ldr	r3, [pc, #64]	; (d641c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d63da:	681a      	ldr	r2, [r3, #0]
   d63dc:	07d2      	lsls	r2, r2, #31
   d63de:	bf5c      	itt	pl
   d63e0:	2201      	movpl	r2, #1
   d63e2:	601a      	strpl	r2, [r3, #0]
   d63e4:	4b0e      	ldr	r3, [pc, #56]	; (d6420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63e6:	681a      	ldr	r2, [r3, #0]
   d63e8:	07d0      	lsls	r0, r2, #31
   d63ea:	bf5c      	itt	pl
   d63ec:	2201      	movpl	r2, #1
   d63ee:	601a      	strpl	r2, [r3, #0]
   d63f0:	4b0c      	ldr	r3, [pc, #48]	; (d6424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63f2:	681a      	ldr	r2, [r3, #0]
   d63f4:	07d1      	lsls	r1, r2, #31
   d63f6:	bf5c      	itt	pl
   d63f8:	2201      	movpl	r2, #1
   d63fa:	601a      	strpl	r2, [r3, #0]
   d63fc:	4b0a      	ldr	r3, [pc, #40]	; (d6428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63fe:	681a      	ldr	r2, [r3, #0]
   d6400:	07d2      	lsls	r2, r2, #31
   d6402:	bf5c      	itt	pl
   d6404:	2201      	movpl	r2, #1
   d6406:	601a      	strpl	r2, [r3, #0]
   d6408:	4770      	bx	lr
   d640a:	bf00      	nop
   d640c:	2003e744 	.word	0x2003e744
   d6410:	2003e740 	.word	0x2003e740
   d6414:	2003e73c 	.word	0x2003e73c
   d6418:	2003e738 	.word	0x2003e738
   d641c:	2003e734 	.word	0x2003e734
   d6420:	2003e730 	.word	0x2003e730
   d6424:	2003e72c 	.word	0x2003e72c
   d6428:	2003e728 	.word	0x2003e728

000d642c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d642c:	4b24      	ldr	r3, [pc, #144]	; (d64c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d642e:	681a      	ldr	r2, [r3, #0]
   d6430:	07d0      	lsls	r0, r2, #31
   d6432:	bf5c      	itt	pl
   d6434:	2201      	movpl	r2, #1
   d6436:	601a      	strpl	r2, [r3, #0]
   d6438:	4b22      	ldr	r3, [pc, #136]	; (d64c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d643a:	681a      	ldr	r2, [r3, #0]
   d643c:	07d1      	lsls	r1, r2, #31
   d643e:	bf5c      	itt	pl
   d6440:	2201      	movpl	r2, #1
   d6442:	601a      	strpl	r2, [r3, #0]
   d6444:	4b20      	ldr	r3, [pc, #128]	; (d64c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6446:	681a      	ldr	r2, [r3, #0]
   d6448:	07d2      	lsls	r2, r2, #31
   d644a:	bf5c      	itt	pl
   d644c:	2201      	movpl	r2, #1
   d644e:	601a      	strpl	r2, [r3, #0]
   d6450:	4b1e      	ldr	r3, [pc, #120]	; (d64cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6452:	681a      	ldr	r2, [r3, #0]
   d6454:	07d0      	lsls	r0, r2, #31
   d6456:	bf5c      	itt	pl
   d6458:	2201      	movpl	r2, #1
   d645a:	601a      	strpl	r2, [r3, #0]
   d645c:	4b1c      	ldr	r3, [pc, #112]	; (d64d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d645e:	681a      	ldr	r2, [r3, #0]
   d6460:	07d1      	lsls	r1, r2, #31
   d6462:	bf5c      	itt	pl
   d6464:	2201      	movpl	r2, #1
   d6466:	601a      	strpl	r2, [r3, #0]
   d6468:	4b1a      	ldr	r3, [pc, #104]	; (d64d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d646a:	681a      	ldr	r2, [r3, #0]
   d646c:	07d2      	lsls	r2, r2, #31
   d646e:	bf5c      	itt	pl
   d6470:	2201      	movpl	r2, #1
   d6472:	601a      	strpl	r2, [r3, #0]
   d6474:	4b18      	ldr	r3, [pc, #96]	; (d64d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6476:	681a      	ldr	r2, [r3, #0]
   d6478:	07d0      	lsls	r0, r2, #31
   d647a:	bf5c      	itt	pl
   d647c:	2201      	movpl	r2, #1
   d647e:	601a      	strpl	r2, [r3, #0]
   d6480:	4b16      	ldr	r3, [pc, #88]	; (d64dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6482:	681a      	ldr	r2, [r3, #0]
   d6484:	07d1      	lsls	r1, r2, #31
   d6486:	bf5c      	itt	pl
   d6488:	2201      	movpl	r2, #1
   d648a:	601a      	strpl	r2, [r3, #0]
   d648c:	4b14      	ldr	r3, [pc, #80]	; (d64e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d648e:	681a      	ldr	r2, [r3, #0]
   d6490:	07d2      	lsls	r2, r2, #31
   d6492:	bf5c      	itt	pl
   d6494:	2201      	movpl	r2, #1
   d6496:	601a      	strpl	r2, [r3, #0]
   d6498:	4b12      	ldr	r3, [pc, #72]	; (d64e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d649a:	681a      	ldr	r2, [r3, #0]
   d649c:	07d0      	lsls	r0, r2, #31
   d649e:	bf5c      	itt	pl
   d64a0:	2201      	movpl	r2, #1
   d64a2:	601a      	strpl	r2, [r3, #0]
   d64a4:	4b10      	ldr	r3, [pc, #64]	; (d64e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d64a6:	681a      	ldr	r2, [r3, #0]
   d64a8:	07d1      	lsls	r1, r2, #31
   d64aa:	bf5c      	itt	pl
   d64ac:	2201      	movpl	r2, #1
   d64ae:	601a      	strpl	r2, [r3, #0]
   d64b0:	4b0e      	ldr	r3, [pc, #56]	; (d64ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d64b2:	681a      	ldr	r2, [r3, #0]
   d64b4:	07d2      	lsls	r2, r2, #31
   d64b6:	bf5c      	itt	pl
   d64b8:	2201      	movpl	r2, #1
   d64ba:	601a      	strpl	r2, [r3, #0]
   d64bc:	4770      	bx	lr
   d64be:	bf00      	nop
   d64c0:	2003e774 	.word	0x2003e774
   d64c4:	2003e770 	.word	0x2003e770
   d64c8:	2003e76c 	.word	0x2003e76c
   d64cc:	2003e768 	.word	0x2003e768
   d64d0:	2003e764 	.word	0x2003e764
   d64d4:	2003e760 	.word	0x2003e760
   d64d8:	2003e75c 	.word	0x2003e75c
   d64dc:	2003e758 	.word	0x2003e758
   d64e0:	2003e754 	.word	0x2003e754
   d64e4:	2003e750 	.word	0x2003e750
   d64e8:	2003e74c 	.word	0x2003e74c
   d64ec:	2003e748 	.word	0x2003e748

000d64f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d64f0:	4b24      	ldr	r3, [pc, #144]	; (d6584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d64f2:	681a      	ldr	r2, [r3, #0]
   d64f4:	07d0      	lsls	r0, r2, #31
   d64f6:	bf5c      	itt	pl
   d64f8:	2201      	movpl	r2, #1
   d64fa:	601a      	strpl	r2, [r3, #0]
   d64fc:	4b22      	ldr	r3, [pc, #136]	; (d6588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d64fe:	681a      	ldr	r2, [r3, #0]
   d6500:	07d1      	lsls	r1, r2, #31
   d6502:	bf5c      	itt	pl
   d6504:	2201      	movpl	r2, #1
   d6506:	601a      	strpl	r2, [r3, #0]
   d6508:	4b20      	ldr	r3, [pc, #128]	; (d658c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d650a:	681a      	ldr	r2, [r3, #0]
   d650c:	07d2      	lsls	r2, r2, #31
   d650e:	bf5c      	itt	pl
   d6510:	2201      	movpl	r2, #1
   d6512:	601a      	strpl	r2, [r3, #0]
   d6514:	4b1e      	ldr	r3, [pc, #120]	; (d6590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6516:	681a      	ldr	r2, [r3, #0]
   d6518:	07d0      	lsls	r0, r2, #31
   d651a:	bf5c      	itt	pl
   d651c:	2201      	movpl	r2, #1
   d651e:	601a      	strpl	r2, [r3, #0]
   d6520:	4b1c      	ldr	r3, [pc, #112]	; (d6594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6522:	681a      	ldr	r2, [r3, #0]
   d6524:	07d1      	lsls	r1, r2, #31
   d6526:	bf5c      	itt	pl
   d6528:	2201      	movpl	r2, #1
   d652a:	601a      	strpl	r2, [r3, #0]
   d652c:	4b1a      	ldr	r3, [pc, #104]	; (d6598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d652e:	681a      	ldr	r2, [r3, #0]
   d6530:	07d2      	lsls	r2, r2, #31
   d6532:	bf5c      	itt	pl
   d6534:	2201      	movpl	r2, #1
   d6536:	601a      	strpl	r2, [r3, #0]
   d6538:	4b18      	ldr	r3, [pc, #96]	; (d659c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d653a:	681a      	ldr	r2, [r3, #0]
   d653c:	07d0      	lsls	r0, r2, #31
   d653e:	bf5c      	itt	pl
   d6540:	2201      	movpl	r2, #1
   d6542:	601a      	strpl	r2, [r3, #0]
   d6544:	4b16      	ldr	r3, [pc, #88]	; (d65a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6546:	681a      	ldr	r2, [r3, #0]
   d6548:	07d1      	lsls	r1, r2, #31
   d654a:	bf5c      	itt	pl
   d654c:	2201      	movpl	r2, #1
   d654e:	601a      	strpl	r2, [r3, #0]
   d6550:	4b14      	ldr	r3, [pc, #80]	; (d65a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6552:	681a      	ldr	r2, [r3, #0]
   d6554:	07d2      	lsls	r2, r2, #31
   d6556:	bf5c      	itt	pl
   d6558:	2201      	movpl	r2, #1
   d655a:	601a      	strpl	r2, [r3, #0]
   d655c:	4b12      	ldr	r3, [pc, #72]	; (d65a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d655e:	681a      	ldr	r2, [r3, #0]
   d6560:	07d0      	lsls	r0, r2, #31
   d6562:	bf5c      	itt	pl
   d6564:	2201      	movpl	r2, #1
   d6566:	601a      	strpl	r2, [r3, #0]
   d6568:	4b10      	ldr	r3, [pc, #64]	; (d65ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d656a:	681a      	ldr	r2, [r3, #0]
   d656c:	07d1      	lsls	r1, r2, #31
   d656e:	bf5c      	itt	pl
   d6570:	2201      	movpl	r2, #1
   d6572:	601a      	strpl	r2, [r3, #0]
   d6574:	4b0e      	ldr	r3, [pc, #56]	; (d65b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6576:	681a      	ldr	r2, [r3, #0]
   d6578:	07d2      	lsls	r2, r2, #31
   d657a:	bf5c      	itt	pl
   d657c:	2201      	movpl	r2, #1
   d657e:	601a      	strpl	r2, [r3, #0]
   d6580:	4770      	bx	lr
   d6582:	bf00      	nop
   d6584:	2003e7a4 	.word	0x2003e7a4
   d6588:	2003e7a0 	.word	0x2003e7a0
   d658c:	2003e79c 	.word	0x2003e79c
   d6590:	2003e798 	.word	0x2003e798
   d6594:	2003e794 	.word	0x2003e794
   d6598:	2003e790 	.word	0x2003e790
   d659c:	2003e78c 	.word	0x2003e78c
   d65a0:	2003e788 	.word	0x2003e788
   d65a4:	2003e784 	.word	0x2003e784
   d65a8:	2003e780 	.word	0x2003e780
   d65ac:	2003e77c 	.word	0x2003e77c
   d65b0:	2003e778 	.word	0x2003e778

000d65b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d65b4:	4b18      	ldr	r3, [pc, #96]	; (d6618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d65b6:	681a      	ldr	r2, [r3, #0]
   d65b8:	07d1      	lsls	r1, r2, #31
   d65ba:	bf5c      	itt	pl
   d65bc:	2201      	movpl	r2, #1
   d65be:	601a      	strpl	r2, [r3, #0]
   d65c0:	4b16      	ldr	r3, [pc, #88]	; (d661c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d65c2:	681a      	ldr	r2, [r3, #0]
   d65c4:	07d2      	lsls	r2, r2, #31
   d65c6:	bf5c      	itt	pl
   d65c8:	2201      	movpl	r2, #1
   d65ca:	601a      	strpl	r2, [r3, #0]
   d65cc:	4b14      	ldr	r3, [pc, #80]	; (d6620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d65ce:	681a      	ldr	r2, [r3, #0]
   d65d0:	07d0      	lsls	r0, r2, #31
   d65d2:	bf5c      	itt	pl
   d65d4:	2201      	movpl	r2, #1
   d65d6:	601a      	strpl	r2, [r3, #0]
   d65d8:	4b12      	ldr	r3, [pc, #72]	; (d6624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d65da:	681a      	ldr	r2, [r3, #0]
   d65dc:	07d1      	lsls	r1, r2, #31
   d65de:	bf5c      	itt	pl
   d65e0:	2201      	movpl	r2, #1
   d65e2:	601a      	strpl	r2, [r3, #0]
   d65e4:	4b10      	ldr	r3, [pc, #64]	; (d6628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d65e6:	681a      	ldr	r2, [r3, #0]
   d65e8:	07d2      	lsls	r2, r2, #31
   d65ea:	bf5c      	itt	pl
   d65ec:	2201      	movpl	r2, #1
   d65ee:	601a      	strpl	r2, [r3, #0]
   d65f0:	4b0e      	ldr	r3, [pc, #56]	; (d662c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d65f2:	681a      	ldr	r2, [r3, #0]
   d65f4:	07d0      	lsls	r0, r2, #31
   d65f6:	bf5c      	itt	pl
   d65f8:	2201      	movpl	r2, #1
   d65fa:	601a      	strpl	r2, [r3, #0]
   d65fc:	4b0c      	ldr	r3, [pc, #48]	; (d6630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d65fe:	681a      	ldr	r2, [r3, #0]
   d6600:	07d1      	lsls	r1, r2, #31
   d6602:	bf5c      	itt	pl
   d6604:	2201      	movpl	r2, #1
   d6606:	601a      	strpl	r2, [r3, #0]
   d6608:	4b0a      	ldr	r3, [pc, #40]	; (d6634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d660a:	681a      	ldr	r2, [r3, #0]
   d660c:	07d2      	lsls	r2, r2, #31
   d660e:	bf5c      	itt	pl
   d6610:	2201      	movpl	r2, #1
   d6612:	601a      	strpl	r2, [r3, #0]
   d6614:	4770      	bx	lr
   d6616:	bf00      	nop
   d6618:	2003e7c4 	.word	0x2003e7c4
   d661c:	2003e7c0 	.word	0x2003e7c0
   d6620:	2003e7bc 	.word	0x2003e7bc
   d6624:	2003e7b8 	.word	0x2003e7b8
   d6628:	2003e7b4 	.word	0x2003e7b4
   d662c:	2003e7b0 	.word	0x2003e7b0
   d6630:	2003e7ac 	.word	0x2003e7ac
   d6634:	2003e7a8 	.word	0x2003e7a8

000d6638 <asctime>:
   d6638:	4b09      	ldr	r3, [pc, #36]	; (d6660 <asctime+0x28>)
   d663a:	b570      	push	{r4, r5, r6, lr}
   d663c:	681c      	ldr	r4, [r3, #0]
   d663e:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d6640:	4606      	mov	r6, r0
   d6642:	b93d      	cbnz	r5, d6654 <asctime+0x1c>
   d6644:	201a      	movs	r0, #26
   d6646:	f7fe fe1f 	bl	d5288 <malloc>
   d664a:	221a      	movs	r2, #26
   d664c:	6420      	str	r0, [r4, #64]	; 0x40
   d664e:	4629      	mov	r1, r5
   d6650:	f000 f93f 	bl	d68d2 <memset>
   d6654:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d6656:	4630      	mov	r0, r6
   d6658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d665c:	f000 b802 	b.w	d6664 <asctime_r>
   d6660:	2003e324 	.word	0x2003e324

000d6664 <asctime_r>:
   d6664:	b510      	push	{r4, lr}
   d6666:	460c      	mov	r4, r1
   d6668:	6941      	ldr	r1, [r0, #20]
   d666a:	6903      	ldr	r3, [r0, #16]
   d666c:	6982      	ldr	r2, [r0, #24]
   d666e:	b086      	sub	sp, #24
   d6670:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d6674:	9104      	str	r1, [sp, #16]
   d6676:	6801      	ldr	r1, [r0, #0]
   d6678:	9103      	str	r1, [sp, #12]
   d667a:	6841      	ldr	r1, [r0, #4]
   d667c:	9102      	str	r1, [sp, #8]
   d667e:	6881      	ldr	r1, [r0, #8]
   d6680:	9101      	str	r1, [sp, #4]
   d6682:	68c1      	ldr	r1, [r0, #12]
   d6684:	9100      	str	r1, [sp, #0]
   d6686:	4907      	ldr	r1, [pc, #28]	; (d66a4 <asctime_r+0x40>)
   d6688:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d668c:	440b      	add	r3, r1
   d668e:	4906      	ldr	r1, [pc, #24]	; (d66a8 <asctime_r+0x44>)
   d6690:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d6694:	440a      	add	r2, r1
   d6696:	4620      	mov	r0, r4
   d6698:	4904      	ldr	r1, [pc, #16]	; (d66ac <asctime_r+0x48>)
   d669a:	f7fe fe0d 	bl	d52b8 <siprintf>
   d669e:	4620      	mov	r0, r4
   d66a0:	b006      	add	sp, #24
   d66a2:	bd10      	pop	{r4, pc}
   d66a4:	000d79ee 	.word	0x000d79ee
   d66a8:	000d79d9 	.word	0x000d79d9
   d66ac:	000d7a12 	.word	0x000d7a12

000d66b0 <__cxa_atexit>:
   d66b0:	b510      	push	{r4, lr}
   d66b2:	4c05      	ldr	r4, [pc, #20]	; (d66c8 <__cxa_atexit+0x18>)
   d66b4:	4613      	mov	r3, r2
   d66b6:	b12c      	cbz	r4, d66c4 <__cxa_atexit+0x14>
   d66b8:	460a      	mov	r2, r1
   d66ba:	4601      	mov	r1, r0
   d66bc:	2002      	movs	r0, #2
   d66be:	f3af 8000 	nop.w
   d66c2:	bd10      	pop	{r4, pc}
   d66c4:	4620      	mov	r0, r4
   d66c6:	bd10      	pop	{r4, pc}
   d66c8:	00000000 	.word	0x00000000

000d66cc <localtime>:
   d66cc:	b538      	push	{r3, r4, r5, lr}
   d66ce:	4b07      	ldr	r3, [pc, #28]	; (d66ec <localtime+0x20>)
   d66d0:	681c      	ldr	r4, [r3, #0]
   d66d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d66d4:	4605      	mov	r5, r0
   d66d6:	b91b      	cbnz	r3, d66e0 <localtime+0x14>
   d66d8:	2024      	movs	r0, #36	; 0x24
   d66da:	f7fe fdd5 	bl	d5288 <malloc>
   d66de:	63e0      	str	r0, [r4, #60]	; 0x3c
   d66e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d66e2:	4628      	mov	r0, r5
   d66e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d66e8:	f000 b802 	b.w	d66f0 <localtime_r>
   d66ec:	2003e324 	.word	0x2003e324

000d66f0 <localtime_r>:
   d66f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d66f4:	460c      	mov	r4, r1
   d66f6:	4680      	mov	r8, r0
   d66f8:	f000 fc94 	bl	d7024 <__gettzinfo>
   d66fc:	4621      	mov	r1, r4
   d66fe:	4607      	mov	r7, r0
   d6700:	4640      	mov	r0, r8
   d6702:	f000 fc93 	bl	d702c <gmtime_r>
   d6706:	6946      	ldr	r6, [r0, #20]
   d6708:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d670c:	07b3      	lsls	r3, r6, #30
   d670e:	4604      	mov	r4, r0
   d6710:	d105      	bne.n	d671e <localtime_r+0x2e>
   d6712:	2264      	movs	r2, #100	; 0x64
   d6714:	fb96 f3f2 	sdiv	r3, r6, r2
   d6718:	fb02 6313 	mls	r3, r2, r3, r6
   d671c:	b94b      	cbnz	r3, d6732 <localtime_r+0x42>
   d671e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d6722:	fb96 f3f5 	sdiv	r3, r6, r5
   d6726:	fb05 6513 	mls	r5, r5, r3, r6
   d672a:	fab5 f385 	clz	r3, r5
   d672e:	095b      	lsrs	r3, r3, #5
   d6730:	e000      	b.n	d6734 <localtime_r+0x44>
   d6732:	2301      	movs	r3, #1
   d6734:	4a5f      	ldr	r2, [pc, #380]	; (d68b4 <localtime_r+0x1c4>)
   d6736:	2530      	movs	r5, #48	; 0x30
   d6738:	fb05 2503 	mla	r5, r5, r3, r2
   d673c:	f000 faa6 	bl	d6c8c <__tz_lock>
   d6740:	f000 faa6 	bl	d6c90 <_tzset_unlocked>
   d6744:	4b5c      	ldr	r3, [pc, #368]	; (d68b8 <localtime_r+0x1c8>)
   d6746:	681b      	ldr	r3, [r3, #0]
   d6748:	b1f3      	cbz	r3, d6788 <localtime_r+0x98>
   d674a:	687b      	ldr	r3, [r7, #4]
   d674c:	429e      	cmp	r6, r3
   d674e:	d105      	bne.n	d675c <localtime_r+0x6c>
   d6750:	6839      	ldr	r1, [r7, #0]
   d6752:	f8d8 3000 	ldr.w	r3, [r8]
   d6756:	69fa      	ldr	r2, [r7, #28]
   d6758:	b941      	cbnz	r1, d676c <localtime_r+0x7c>
   d675a:	e00a      	b.n	d6772 <localtime_r+0x82>
   d675c:	4630      	mov	r0, r6
   d675e:	f000 f9ed 	bl	d6b3c <__tzcalc_limits>
   d6762:	2800      	cmp	r0, #0
   d6764:	d1f4      	bne.n	d6750 <localtime_r+0x60>
   d6766:	f04f 33ff 	mov.w	r3, #4294967295
   d676a:	e00d      	b.n	d6788 <localtime_r+0x98>
   d676c:	4293      	cmp	r3, r2
   d676e:	db08      	blt.n	d6782 <localtime_r+0x92>
   d6770:	e001      	b.n	d6776 <localtime_r+0x86>
   d6772:	4293      	cmp	r3, r2
   d6774:	da07      	bge.n	d6786 <localtime_r+0x96>
   d6776:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6778:	4293      	cmp	r3, r2
   d677a:	bfac      	ite	ge
   d677c:	2300      	movge	r3, #0
   d677e:	2301      	movlt	r3, #1
   d6780:	e002      	b.n	d6788 <localtime_r+0x98>
   d6782:	2300      	movs	r3, #0
   d6784:	e000      	b.n	d6788 <localtime_r+0x98>
   d6786:	2301      	movs	r3, #1
   d6788:	6223      	str	r3, [r4, #32]
   d678a:	6a23      	ldr	r3, [r4, #32]
   d678c:	2b01      	cmp	r3, #1
   d678e:	bf0c      	ite	eq
   d6790:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d6792:	6a39      	ldrne	r1, [r7, #32]
   d6794:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d6798:	203c      	movs	r0, #60	; 0x3c
   d679a:	fb91 f6f3 	sdiv	r6, r1, r3
   d679e:	fb03 1316 	mls	r3, r3, r6, r1
   d67a2:	6861      	ldr	r1, [r4, #4]
   d67a4:	fb93 f2f0 	sdiv	r2, r3, r0
   d67a8:	fb00 3012 	mls	r0, r0, r2, r3
   d67ac:	6823      	ldr	r3, [r4, #0]
   d67ae:	1a89      	subs	r1, r1, r2
   d67b0:	68a2      	ldr	r2, [r4, #8]
   d67b2:	6061      	str	r1, [r4, #4]
   d67b4:	1a1b      	subs	r3, r3, r0
   d67b6:	1b92      	subs	r2, r2, r6
   d67b8:	2b3b      	cmp	r3, #59	; 0x3b
   d67ba:	6023      	str	r3, [r4, #0]
   d67bc:	60a2      	str	r2, [r4, #8]
   d67be:	dd03      	ble.n	d67c8 <localtime_r+0xd8>
   d67c0:	3101      	adds	r1, #1
   d67c2:	6061      	str	r1, [r4, #4]
   d67c4:	3b3c      	subs	r3, #60	; 0x3c
   d67c6:	e004      	b.n	d67d2 <localtime_r+0xe2>
   d67c8:	2b00      	cmp	r3, #0
   d67ca:	da03      	bge.n	d67d4 <localtime_r+0xe4>
   d67cc:	3901      	subs	r1, #1
   d67ce:	6061      	str	r1, [r4, #4]
   d67d0:	333c      	adds	r3, #60	; 0x3c
   d67d2:	6023      	str	r3, [r4, #0]
   d67d4:	6863      	ldr	r3, [r4, #4]
   d67d6:	2b3b      	cmp	r3, #59	; 0x3b
   d67d8:	dd03      	ble.n	d67e2 <localtime_r+0xf2>
   d67da:	3201      	adds	r2, #1
   d67dc:	60a2      	str	r2, [r4, #8]
   d67de:	3b3c      	subs	r3, #60	; 0x3c
   d67e0:	e004      	b.n	d67ec <localtime_r+0xfc>
   d67e2:	2b00      	cmp	r3, #0
   d67e4:	da03      	bge.n	d67ee <localtime_r+0xfe>
   d67e6:	3a01      	subs	r2, #1
   d67e8:	60a2      	str	r2, [r4, #8]
   d67ea:	333c      	adds	r3, #60	; 0x3c
   d67ec:	6063      	str	r3, [r4, #4]
   d67ee:	68a3      	ldr	r3, [r4, #8]
   d67f0:	2b17      	cmp	r3, #23
   d67f2:	dd22      	ble.n	d683a <localtime_r+0x14a>
   d67f4:	69e2      	ldr	r2, [r4, #28]
   d67f6:	3201      	adds	r2, #1
   d67f8:	61e2      	str	r2, [r4, #28]
   d67fa:	69a2      	ldr	r2, [r4, #24]
   d67fc:	3201      	adds	r2, #1
   d67fe:	2a06      	cmp	r2, #6
   d6800:	bfc8      	it	gt
   d6802:	2200      	movgt	r2, #0
   d6804:	61a2      	str	r2, [r4, #24]
   d6806:	68e2      	ldr	r2, [r4, #12]
   d6808:	3b18      	subs	r3, #24
   d680a:	3201      	adds	r2, #1
   d680c:	60a3      	str	r3, [r4, #8]
   d680e:	6923      	ldr	r3, [r4, #16]
   d6810:	60e2      	str	r2, [r4, #12]
   d6812:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d6816:	428a      	cmp	r2, r1
   d6818:	dd46      	ble.n	d68a8 <localtime_r+0x1b8>
   d681a:	3301      	adds	r3, #1
   d681c:	2b0c      	cmp	r3, #12
   d681e:	bf0c      	ite	eq
   d6820:	6963      	ldreq	r3, [r4, #20]
   d6822:	6123      	strne	r3, [r4, #16]
   d6824:	eba2 0201 	sub.w	r2, r2, r1
   d6828:	60e2      	str	r2, [r4, #12]
   d682a:	bf01      	itttt	eq
   d682c:	3301      	addeq	r3, #1
   d682e:	2200      	moveq	r2, #0
   d6830:	6122      	streq	r2, [r4, #16]
   d6832:	6163      	streq	r3, [r4, #20]
   d6834:	bf08      	it	eq
   d6836:	61e2      	streq	r2, [r4, #28]
   d6838:	e036      	b.n	d68a8 <localtime_r+0x1b8>
   d683a:	2b00      	cmp	r3, #0
   d683c:	da34      	bge.n	d68a8 <localtime_r+0x1b8>
   d683e:	69e2      	ldr	r2, [r4, #28]
   d6840:	3a01      	subs	r2, #1
   d6842:	61e2      	str	r2, [r4, #28]
   d6844:	69a2      	ldr	r2, [r4, #24]
   d6846:	3a01      	subs	r2, #1
   d6848:	bf48      	it	mi
   d684a:	2206      	movmi	r2, #6
   d684c:	61a2      	str	r2, [r4, #24]
   d684e:	68e2      	ldr	r2, [r4, #12]
   d6850:	3318      	adds	r3, #24
   d6852:	3a01      	subs	r2, #1
   d6854:	60e2      	str	r2, [r4, #12]
   d6856:	60a3      	str	r3, [r4, #8]
   d6858:	bb32      	cbnz	r2, d68a8 <localtime_r+0x1b8>
   d685a:	6923      	ldr	r3, [r4, #16]
   d685c:	3b01      	subs	r3, #1
   d685e:	d401      	bmi.n	d6864 <localtime_r+0x174>
   d6860:	6123      	str	r3, [r4, #16]
   d6862:	e01d      	b.n	d68a0 <localtime_r+0x1b0>
   d6864:	230b      	movs	r3, #11
   d6866:	6123      	str	r3, [r4, #16]
   d6868:	6963      	ldr	r3, [r4, #20]
   d686a:	1e5a      	subs	r2, r3, #1
   d686c:	f012 0f03 	tst.w	r2, #3
   d6870:	6162      	str	r2, [r4, #20]
   d6872:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d6876:	d105      	bne.n	d6884 <localtime_r+0x194>
   d6878:	2164      	movs	r1, #100	; 0x64
   d687a:	fb93 f2f1 	sdiv	r2, r3, r1
   d687e:	fb01 3212 	mls	r2, r1, r2, r3
   d6882:	b94a      	cbnz	r2, d6898 <localtime_r+0x1a8>
   d6884:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6888:	fb93 f2f1 	sdiv	r2, r3, r1
   d688c:	fb01 3312 	mls	r3, r1, r2, r3
   d6890:	fab3 f383 	clz	r3, r3
   d6894:	095b      	lsrs	r3, r3, #5
   d6896:	e000      	b.n	d689a <localtime_r+0x1aa>
   d6898:	2301      	movs	r3, #1
   d689a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d689e:	61e3      	str	r3, [r4, #28]
   d68a0:	6923      	ldr	r3, [r4, #16]
   d68a2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d68a6:	60e3      	str	r3, [r4, #12]
   d68a8:	f000 f9f1 	bl	d6c8e <__tz_unlock>
   d68ac:	4620      	mov	r0, r4
   d68ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d68b2:	bf00      	nop
   d68b4:	000d7b98 	.word	0x000d7b98
   d68b8:	2003e7e4 	.word	0x2003e7e4

000d68bc <memcpy>:
   d68bc:	b510      	push	{r4, lr}
   d68be:	1e43      	subs	r3, r0, #1
   d68c0:	440a      	add	r2, r1
   d68c2:	4291      	cmp	r1, r2
   d68c4:	d004      	beq.n	d68d0 <memcpy+0x14>
   d68c6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d68ca:	f803 4f01 	strb.w	r4, [r3, #1]!
   d68ce:	e7f8      	b.n	d68c2 <memcpy+0x6>
   d68d0:	bd10      	pop	{r4, pc}

000d68d2 <memset>:
   d68d2:	4402      	add	r2, r0
   d68d4:	4603      	mov	r3, r0
   d68d6:	4293      	cmp	r3, r2
   d68d8:	d002      	beq.n	d68e0 <memset+0xe>
   d68da:	f803 1b01 	strb.w	r1, [r3], #1
   d68de:	e7fa      	b.n	d68d6 <memset+0x4>
   d68e0:	4770      	bx	lr
	...

000d68e4 <srand>:
   d68e4:	b538      	push	{r3, r4, r5, lr}
   d68e6:	4b12      	ldr	r3, [pc, #72]	; (d6930 <srand+0x4c>)
   d68e8:	681c      	ldr	r4, [r3, #0]
   d68ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d68ec:	4605      	mov	r5, r0
   d68ee:	b9d3      	cbnz	r3, d6926 <srand+0x42>
   d68f0:	2018      	movs	r0, #24
   d68f2:	f7fe fcc9 	bl	d5288 <malloc>
   d68f6:	f243 330e 	movw	r3, #13070	; 0x330e
   d68fa:	63a0      	str	r0, [r4, #56]	; 0x38
   d68fc:	8003      	strh	r3, [r0, #0]
   d68fe:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6902:	8043      	strh	r3, [r0, #2]
   d6904:	f241 2334 	movw	r3, #4660	; 0x1234
   d6908:	8083      	strh	r3, [r0, #4]
   d690a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d690e:	80c3      	strh	r3, [r0, #6]
   d6910:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6914:	8103      	strh	r3, [r0, #8]
   d6916:	2305      	movs	r3, #5
   d6918:	8143      	strh	r3, [r0, #10]
   d691a:	230b      	movs	r3, #11
   d691c:	8183      	strh	r3, [r0, #12]
   d691e:	2201      	movs	r2, #1
   d6920:	2300      	movs	r3, #0
   d6922:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6926:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6928:	2200      	movs	r2, #0
   d692a:	611d      	str	r5, [r3, #16]
   d692c:	615a      	str	r2, [r3, #20]
   d692e:	bd38      	pop	{r3, r4, r5, pc}
   d6930:	2003e324 	.word	0x2003e324

000d6934 <rand>:
   d6934:	4b19      	ldr	r3, [pc, #100]	; (d699c <rand+0x68>)
   d6936:	b510      	push	{r4, lr}
   d6938:	681c      	ldr	r4, [r3, #0]
   d693a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d693c:	b9d3      	cbnz	r3, d6974 <rand+0x40>
   d693e:	2018      	movs	r0, #24
   d6940:	f7fe fca2 	bl	d5288 <malloc>
   d6944:	f243 330e 	movw	r3, #13070	; 0x330e
   d6948:	63a0      	str	r0, [r4, #56]	; 0x38
   d694a:	8003      	strh	r3, [r0, #0]
   d694c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6950:	8043      	strh	r3, [r0, #2]
   d6952:	f241 2334 	movw	r3, #4660	; 0x1234
   d6956:	8083      	strh	r3, [r0, #4]
   d6958:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d695c:	80c3      	strh	r3, [r0, #6]
   d695e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6962:	8103      	strh	r3, [r0, #8]
   d6964:	2305      	movs	r3, #5
   d6966:	8143      	strh	r3, [r0, #10]
   d6968:	230b      	movs	r3, #11
   d696a:	8183      	strh	r3, [r0, #12]
   d696c:	2201      	movs	r2, #1
   d696e:	2300      	movs	r3, #0
   d6970:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6974:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d6976:	4c0a      	ldr	r4, [pc, #40]	; (d69a0 <rand+0x6c>)
   d6978:	690b      	ldr	r3, [r1, #16]
   d697a:	6948      	ldr	r0, [r1, #20]
   d697c:	4a09      	ldr	r2, [pc, #36]	; (d69a4 <rand+0x70>)
   d697e:	435c      	muls	r4, r3
   d6980:	fb02 4000 	mla	r0, r2, r0, r4
   d6984:	fba3 2302 	umull	r2, r3, r3, r2
   d6988:	3201      	adds	r2, #1
   d698a:	4403      	add	r3, r0
   d698c:	f143 0300 	adc.w	r3, r3, #0
   d6990:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d6994:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d6998:	bd10      	pop	{r4, pc}
   d699a:	bf00      	nop
   d699c:	2003e324 	.word	0x2003e324
   d69a0:	5851f42d 	.word	0x5851f42d
   d69a4:	4c957f2d 	.word	0x4c957f2d

000d69a8 <strcmp>:
   d69a8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d69ac:	f811 3b01 	ldrb.w	r3, [r1], #1
   d69b0:	2a01      	cmp	r2, #1
   d69b2:	bf28      	it	cs
   d69b4:	429a      	cmpcs	r2, r3
   d69b6:	d0f7      	beq.n	d69a8 <strcmp>
   d69b8:	1ad0      	subs	r0, r2, r3
   d69ba:	4770      	bx	lr

000d69bc <strcpy>:
   d69bc:	4603      	mov	r3, r0
   d69be:	f811 2b01 	ldrb.w	r2, [r1], #1
   d69c2:	f803 2b01 	strb.w	r2, [r3], #1
   d69c6:	2a00      	cmp	r2, #0
   d69c8:	d1f9      	bne.n	d69be <strcpy+0x2>
   d69ca:	4770      	bx	lr

000d69cc <strlen>:
   d69cc:	4603      	mov	r3, r0
   d69ce:	f813 2b01 	ldrb.w	r2, [r3], #1
   d69d2:	2a00      	cmp	r2, #0
   d69d4:	d1fb      	bne.n	d69ce <strlen+0x2>
   d69d6:	1a18      	subs	r0, r3, r0
   d69d8:	3801      	subs	r0, #1
   d69da:	4770      	bx	lr

000d69dc <strncmp>:
   d69dc:	b530      	push	{r4, r5, lr}
   d69de:	b182      	cbz	r2, d6a02 <strncmp+0x26>
   d69e0:	1e45      	subs	r5, r0, #1
   d69e2:	3901      	subs	r1, #1
   d69e4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d69e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d69ec:	42a3      	cmp	r3, r4
   d69ee:	d106      	bne.n	d69fe <strncmp+0x22>
   d69f0:	43ec      	mvns	r4, r5
   d69f2:	4414      	add	r4, r2
   d69f4:	42e0      	cmn	r0, r4
   d69f6:	d001      	beq.n	d69fc <strncmp+0x20>
   d69f8:	2b00      	cmp	r3, #0
   d69fa:	d1f3      	bne.n	d69e4 <strncmp+0x8>
   d69fc:	461c      	mov	r4, r3
   d69fe:	1b18      	subs	r0, r3, r4
   d6a00:	bd30      	pop	{r4, r5, pc}
   d6a02:	4610      	mov	r0, r2
   d6a04:	bd30      	pop	{r4, r5, pc}

000d6a06 <strncpy>:
   d6a06:	b510      	push	{r4, lr}
   d6a08:	4603      	mov	r3, r0
   d6a0a:	b142      	cbz	r2, d6a1e <strncpy+0x18>
   d6a0c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6a10:	f803 4b01 	strb.w	r4, [r3], #1
   d6a14:	3a01      	subs	r2, #1
   d6a16:	2c00      	cmp	r4, #0
   d6a18:	d1f7      	bne.n	d6a0a <strncpy+0x4>
   d6a1a:	441a      	add	r2, r3
   d6a1c:	e000      	b.n	d6a20 <strncpy+0x1a>
   d6a1e:	bd10      	pop	{r4, pc}
   d6a20:	4293      	cmp	r3, r2
   d6a22:	d002      	beq.n	d6a2a <strncpy+0x24>
   d6a24:	f803 4b01 	strb.w	r4, [r3], #1
   d6a28:	e7fa      	b.n	d6a20 <strncpy+0x1a>
   d6a2a:	bd10      	pop	{r4, pc}

000d6a2c <_strtoul_r>:
   d6a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6a30:	4680      	mov	r8, r0
   d6a32:	483c      	ldr	r0, [pc, #240]	; (d6b24 <_strtoul_r+0xf8>)
   d6a34:	f8d0 9000 	ldr.w	r9, [r0]
   d6a38:	460e      	mov	r6, r1
   d6a3a:	4635      	mov	r5, r6
   d6a3c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6a40:	eb09 0004 	add.w	r0, r9, r4
   d6a44:	7840      	ldrb	r0, [r0, #1]
   d6a46:	f000 0008 	and.w	r0, r0, #8
   d6a4a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d6a4e:	b108      	cbz	r0, d6a54 <_strtoul_r+0x28>
   d6a50:	462e      	mov	r6, r5
   d6a52:	e7f2      	b.n	d6a3a <_strtoul_r+0xe>
   d6a54:	2c2d      	cmp	r4, #45	; 0x2d
   d6a56:	d103      	bne.n	d6a60 <_strtoul_r+0x34>
   d6a58:	1cb5      	adds	r5, r6, #2
   d6a5a:	7874      	ldrb	r4, [r6, #1]
   d6a5c:	2701      	movs	r7, #1
   d6a5e:	e003      	b.n	d6a68 <_strtoul_r+0x3c>
   d6a60:	2c2b      	cmp	r4, #43	; 0x2b
   d6a62:	bf04      	itt	eq
   d6a64:	7874      	ldrbeq	r4, [r6, #1]
   d6a66:	1cb5      	addeq	r5, r6, #2
   d6a68:	b113      	cbz	r3, d6a70 <_strtoul_r+0x44>
   d6a6a:	2b10      	cmp	r3, #16
   d6a6c:	d10a      	bne.n	d6a84 <_strtoul_r+0x58>
   d6a6e:	e053      	b.n	d6b18 <_strtoul_r+0xec>
   d6a70:	2c30      	cmp	r4, #48	; 0x30
   d6a72:	d14f      	bne.n	d6b14 <_strtoul_r+0xe8>
   d6a74:	7828      	ldrb	r0, [r5, #0]
   d6a76:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6a7a:	2858      	cmp	r0, #88	; 0x58
   d6a7c:	d145      	bne.n	d6b0a <_strtoul_r+0xde>
   d6a7e:	786c      	ldrb	r4, [r5, #1]
   d6a80:	2310      	movs	r3, #16
   d6a82:	3502      	adds	r5, #2
   d6a84:	f04f 3cff 	mov.w	ip, #4294967295
   d6a88:	2600      	movs	r6, #0
   d6a8a:	fbbc fcf3 	udiv	ip, ip, r3
   d6a8e:	fb03 fa0c 	mul.w	sl, r3, ip
   d6a92:	ea6f 0a0a 	mvn.w	sl, sl
   d6a96:	4630      	mov	r0, r6
   d6a98:	eb09 0e04 	add.w	lr, r9, r4
   d6a9c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6aa0:	f01e 0f04 	tst.w	lr, #4
   d6aa4:	d001      	beq.n	d6aaa <_strtoul_r+0x7e>
   d6aa6:	3c30      	subs	r4, #48	; 0x30
   d6aa8:	e00b      	b.n	d6ac2 <_strtoul_r+0x96>
   d6aaa:	f01e 0e03 	ands.w	lr, lr, #3
   d6aae:	d01a      	beq.n	d6ae6 <_strtoul_r+0xba>
   d6ab0:	f1be 0f01 	cmp.w	lr, #1
   d6ab4:	bf0c      	ite	eq
   d6ab6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d6aba:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6abe:	ebce 0404 	rsb	r4, lr, r4
   d6ac2:	42a3      	cmp	r3, r4
   d6ac4:	dd0f      	ble.n	d6ae6 <_strtoul_r+0xba>
   d6ac6:	2e00      	cmp	r6, #0
   d6ac8:	db08      	blt.n	d6adc <_strtoul_r+0xb0>
   d6aca:	4560      	cmp	r0, ip
   d6acc:	d806      	bhi.n	d6adc <_strtoul_r+0xb0>
   d6ace:	d101      	bne.n	d6ad4 <_strtoul_r+0xa8>
   d6ad0:	4554      	cmp	r4, sl
   d6ad2:	dc03      	bgt.n	d6adc <_strtoul_r+0xb0>
   d6ad4:	fb03 4000 	mla	r0, r3, r0, r4
   d6ad8:	2601      	movs	r6, #1
   d6ada:	e001      	b.n	d6ae0 <_strtoul_r+0xb4>
   d6adc:	f04f 36ff 	mov.w	r6, #4294967295
   d6ae0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6ae4:	e7d8      	b.n	d6a98 <_strtoul_r+0x6c>
   d6ae6:	2e00      	cmp	r6, #0
   d6ae8:	da07      	bge.n	d6afa <_strtoul_r+0xce>
   d6aea:	2322      	movs	r3, #34	; 0x22
   d6aec:	f8c8 3000 	str.w	r3, [r8]
   d6af0:	f04f 30ff 	mov.w	r0, #4294967295
   d6af4:	b92a      	cbnz	r2, d6b02 <_strtoul_r+0xd6>
   d6af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6afa:	b107      	cbz	r7, d6afe <_strtoul_r+0xd2>
   d6afc:	4240      	negs	r0, r0
   d6afe:	b172      	cbz	r2, d6b1e <_strtoul_r+0xf2>
   d6b00:	b106      	cbz	r6, d6b04 <_strtoul_r+0xd8>
   d6b02:	1e69      	subs	r1, r5, #1
   d6b04:	6011      	str	r1, [r2, #0]
   d6b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b0a:	2430      	movs	r4, #48	; 0x30
   d6b0c:	2b00      	cmp	r3, #0
   d6b0e:	d1b9      	bne.n	d6a84 <_strtoul_r+0x58>
   d6b10:	2308      	movs	r3, #8
   d6b12:	e7b7      	b.n	d6a84 <_strtoul_r+0x58>
   d6b14:	230a      	movs	r3, #10
   d6b16:	e7b5      	b.n	d6a84 <_strtoul_r+0x58>
   d6b18:	2c30      	cmp	r4, #48	; 0x30
   d6b1a:	d0ab      	beq.n	d6a74 <_strtoul_r+0x48>
   d6b1c:	e7b2      	b.n	d6a84 <_strtoul_r+0x58>
   d6b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b22:	bf00      	nop
   d6b24:	2003e2c0 	.word	0x2003e2c0

000d6b28 <strtoul>:
   d6b28:	4613      	mov	r3, r2
   d6b2a:	460a      	mov	r2, r1
   d6b2c:	4601      	mov	r1, r0
   d6b2e:	4802      	ldr	r0, [pc, #8]	; (d6b38 <strtoul+0x10>)
   d6b30:	6800      	ldr	r0, [r0, #0]
   d6b32:	f7ff bf7b 	b.w	d6a2c <_strtoul_r>
   d6b36:	bf00      	nop
   d6b38:	2003e324 	.word	0x2003e324

000d6b3c <__tzcalc_limits>:
   d6b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b40:	4604      	mov	r4, r0
   d6b42:	f000 fa6f 	bl	d7024 <__gettzinfo>
   d6b46:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d6b4a:	429c      	cmp	r4, r3
   d6b4c:	f340 8096 	ble.w	d6c7c <__tzcalc_limits+0x140>
   d6b50:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d6b54:	18e3      	adds	r3, r4, r3
   d6b56:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d6b5a:	109b      	asrs	r3, r3, #2
   d6b5c:	f240 156d 	movw	r5, #365	; 0x16d
   d6b60:	fb05 3502 	mla	r5, r5, r2, r3
   d6b64:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d6b68:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d6b6c:	fb92 f3f3 	sdiv	r3, r2, r3
   d6b70:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d6b74:	442b      	add	r3, r5
   d6b76:	18a5      	adds	r5, r4, r2
   d6b78:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6b7c:	fb95 f5f2 	sdiv	r5, r5, r2
   d6b80:	441d      	add	r5, r3
   d6b82:	2364      	movs	r3, #100	; 0x64
   d6b84:	fb94 f7f2 	sdiv	r7, r4, r2
   d6b88:	fb94 f6f3 	sdiv	r6, r4, r3
   d6b8c:	fb02 4717 	mls	r7, r2, r7, r4
   d6b90:	fb03 4616 	mls	r6, r3, r6, r4
   d6b94:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d6b98:	fab7 fe87 	clz	lr, r7
   d6b9c:	9301      	str	r3, [sp, #4]
   d6b9e:	f004 0303 	and.w	r3, r4, #3
   d6ba2:	6044      	str	r4, [r0, #4]
   d6ba4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d6ba8:	4601      	mov	r1, r0
   d6baa:	9300      	str	r3, [sp, #0]
   d6bac:	f04f 0c07 	mov.w	ip, #7
   d6bb0:	7a0b      	ldrb	r3, [r1, #8]
   d6bb2:	2b4a      	cmp	r3, #74	; 0x4a
   d6bb4:	d10e      	bne.n	d6bd4 <__tzcalc_limits+0x98>
   d6bb6:	694b      	ldr	r3, [r1, #20]
   d6bb8:	9a00      	ldr	r2, [sp, #0]
   d6bba:	18ec      	adds	r4, r5, r3
   d6bbc:	b902      	cbnz	r2, d6bc0 <__tzcalc_limits+0x84>
   d6bbe:	b906      	cbnz	r6, d6bc2 <__tzcalc_limits+0x86>
   d6bc0:	b927      	cbnz	r7, d6bcc <__tzcalc_limits+0x90>
   d6bc2:	2b3b      	cmp	r3, #59	; 0x3b
   d6bc4:	bfd4      	ite	le
   d6bc6:	2300      	movle	r3, #0
   d6bc8:	2301      	movgt	r3, #1
   d6bca:	e000      	b.n	d6bce <__tzcalc_limits+0x92>
   d6bcc:	2300      	movs	r3, #0
   d6bce:	4423      	add	r3, r4
   d6bd0:	3b01      	subs	r3, #1
   d6bd2:	e03f      	b.n	d6c54 <__tzcalc_limits+0x118>
   d6bd4:	2b44      	cmp	r3, #68	; 0x44
   d6bd6:	d102      	bne.n	d6bde <__tzcalc_limits+0xa2>
   d6bd8:	694b      	ldr	r3, [r1, #20]
   d6bda:	442b      	add	r3, r5
   d6bdc:	e03a      	b.n	d6c54 <__tzcalc_limits+0x118>
   d6bde:	9b00      	ldr	r3, [sp, #0]
   d6be0:	b92b      	cbnz	r3, d6bee <__tzcalc_limits+0xb2>
   d6be2:	2e00      	cmp	r6, #0
   d6be4:	bf0c      	ite	eq
   d6be6:	46f0      	moveq	r8, lr
   d6be8:	f04f 0801 	movne.w	r8, #1
   d6bec:	e000      	b.n	d6bf0 <__tzcalc_limits+0xb4>
   d6bee:	46f0      	mov	r8, lr
   d6bf0:	4b24      	ldr	r3, [pc, #144]	; (d6c84 <__tzcalc_limits+0x148>)
   d6bf2:	68cc      	ldr	r4, [r1, #12]
   d6bf4:	2230      	movs	r2, #48	; 0x30
   d6bf6:	fb02 3808 	mla	r8, r2, r8, r3
   d6bfa:	f1a8 0a04 	sub.w	sl, r8, #4
   d6bfe:	46a9      	mov	r9, r5
   d6c00:	2301      	movs	r3, #1
   d6c02:	42a3      	cmp	r3, r4
   d6c04:	da04      	bge.n	d6c10 <__tzcalc_limits+0xd4>
   d6c06:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d6c0a:	3301      	adds	r3, #1
   d6c0c:	44d9      	add	r9, fp
   d6c0e:	e7f8      	b.n	d6c02 <__tzcalc_limits+0xc6>
   d6c10:	f109 0304 	add.w	r3, r9, #4
   d6c14:	fb93 fbfc 	sdiv	fp, r3, ip
   d6c18:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d6c1c:	2c01      	cmp	r4, #1
   d6c1e:	ebca 0a03 	rsb	sl, sl, r3
   d6c22:	694b      	ldr	r3, [r1, #20]
   d6c24:	bfb8      	it	lt
   d6c26:	2401      	movlt	r4, #1
   d6c28:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d6c2c:	ebb3 0a0a 	subs.w	sl, r3, sl
   d6c30:	690b      	ldr	r3, [r1, #16]
   d6c32:	f104 34ff 	add.w	r4, r4, #4294967295
   d6c36:	f103 33ff 	add.w	r3, r3, #4294967295
   d6c3a:	bf48      	it	mi
   d6c3c:	f10a 0a07 	addmi.w	sl, sl, #7
   d6c40:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d6c44:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d6c48:	4453      	add	r3, sl
   d6c4a:	42a3      	cmp	r3, r4
   d6c4c:	db01      	blt.n	d6c52 <__tzcalc_limits+0x116>
   d6c4e:	3b07      	subs	r3, #7
   d6c50:	e7fb      	b.n	d6c4a <__tzcalc_limits+0x10e>
   d6c52:	444b      	add	r3, r9
   d6c54:	698c      	ldr	r4, [r1, #24]
   d6c56:	4a0c      	ldr	r2, [pc, #48]	; (d6c88 <__tzcalc_limits+0x14c>)
   d6c58:	fb02 4303 	mla	r3, r2, r3, r4
   d6c5c:	6a0c      	ldr	r4, [r1, #32]
   d6c5e:	4423      	add	r3, r4
   d6c60:	f841 3f1c 	str.w	r3, [r1, #28]!
   d6c64:	9b01      	ldr	r3, [sp, #4]
   d6c66:	4299      	cmp	r1, r3
   d6c68:	d1a2      	bne.n	d6bb0 <__tzcalc_limits+0x74>
   d6c6a:	69c3      	ldr	r3, [r0, #28]
   d6c6c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d6c6e:	4293      	cmp	r3, r2
   d6c70:	bfac      	ite	ge
   d6c72:	2300      	movge	r3, #0
   d6c74:	2301      	movlt	r3, #1
   d6c76:	6003      	str	r3, [r0, #0]
   d6c78:	2001      	movs	r0, #1
   d6c7a:	e000      	b.n	d6c7e <__tzcalc_limits+0x142>
   d6c7c:	2000      	movs	r0, #0
   d6c7e:	b003      	add	sp, #12
   d6c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c84:	000d7b98 	.word	0x000d7b98
   d6c88:	00015180 	.word	0x00015180

000d6c8c <__tz_lock>:
   d6c8c:	4770      	bx	lr

000d6c8e <__tz_unlock>:
   d6c8e:	4770      	bx	lr

000d6c90 <_tzset_unlocked>:
   d6c90:	4b01      	ldr	r3, [pc, #4]	; (d6c98 <_tzset_unlocked+0x8>)
   d6c92:	6818      	ldr	r0, [r3, #0]
   d6c94:	f000 b802 	b.w	d6c9c <_tzset_unlocked_r>
   d6c98:	2003e324 	.word	0x2003e324

000d6c9c <_tzset_unlocked_r>:
   d6c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ca0:	b08d      	sub	sp, #52	; 0x34
   d6ca2:	4607      	mov	r7, r0
   d6ca4:	f000 f9be 	bl	d7024 <__gettzinfo>
   d6ca8:	49b0      	ldr	r1, [pc, #704]	; (d6f6c <_tzset_unlocked_r+0x2d0>)
   d6caa:	4eb1      	ldr	r6, [pc, #708]	; (d6f70 <_tzset_unlocked_r+0x2d4>)
   d6cac:	4604      	mov	r4, r0
   d6cae:	4638      	mov	r0, r7
   d6cb0:	f000 f9b0 	bl	d7014 <_getenv_r>
   d6cb4:	4605      	mov	r5, r0
   d6cb6:	b960      	cbnz	r0, d6cd2 <_tzset_unlocked_r+0x36>
   d6cb8:	4bae      	ldr	r3, [pc, #696]	; (d6f74 <_tzset_unlocked_r+0x2d8>)
   d6cba:	4aaf      	ldr	r2, [pc, #700]	; (d6f78 <_tzset_unlocked_r+0x2dc>)
   d6cbc:	6018      	str	r0, [r3, #0]
   d6cbe:	4baf      	ldr	r3, [pc, #700]	; (d6f7c <_tzset_unlocked_r+0x2e0>)
   d6cc0:	6018      	str	r0, [r3, #0]
   d6cc2:	4baf      	ldr	r3, [pc, #700]	; (d6f80 <_tzset_unlocked_r+0x2e4>)
   d6cc4:	6830      	ldr	r0, [r6, #0]
   d6cc6:	601a      	str	r2, [r3, #0]
   d6cc8:	605a      	str	r2, [r3, #4]
   d6cca:	f7fe fae5 	bl	d5298 <free>
   d6cce:	6035      	str	r5, [r6, #0]
   d6cd0:	e148      	b.n	d6f64 <_tzset_unlocked_r+0x2c8>
   d6cd2:	6831      	ldr	r1, [r6, #0]
   d6cd4:	b979      	cbnz	r1, d6cf6 <_tzset_unlocked_r+0x5a>
   d6cd6:	6830      	ldr	r0, [r6, #0]
   d6cd8:	f7fe fade 	bl	d5298 <free>
   d6cdc:	4628      	mov	r0, r5
   d6cde:	f7ff fe75 	bl	d69cc <strlen>
   d6ce2:	1c41      	adds	r1, r0, #1
   d6ce4:	4638      	mov	r0, r7
   d6ce6:	f7fe faff 	bl	d52e8 <_malloc_r>
   d6cea:	6030      	str	r0, [r6, #0]
   d6cec:	b148      	cbz	r0, d6d02 <_tzset_unlocked_r+0x66>
   d6cee:	4629      	mov	r1, r5
   d6cf0:	f7ff fe64 	bl	d69bc <strcpy>
   d6cf4:	e005      	b.n	d6d02 <_tzset_unlocked_r+0x66>
   d6cf6:	f7ff fe57 	bl	d69a8 <strcmp>
   d6cfa:	2800      	cmp	r0, #0
   d6cfc:	f000 8132 	beq.w	d6f64 <_tzset_unlocked_r+0x2c8>
   d6d00:	e7e9      	b.n	d6cd6 <_tzset_unlocked_r+0x3a>
   d6d02:	782b      	ldrb	r3, [r5, #0]
   d6d04:	4a9f      	ldr	r2, [pc, #636]	; (d6f84 <_tzset_unlocked_r+0x2e8>)
   d6d06:	49a0      	ldr	r1, [pc, #640]	; (d6f88 <_tzset_unlocked_r+0x2ec>)
   d6d08:	2b3a      	cmp	r3, #58	; 0x3a
   d6d0a:	bf08      	it	eq
   d6d0c:	3501      	addeq	r5, #1
   d6d0e:	ae0a      	add	r6, sp, #40	; 0x28
   d6d10:	4633      	mov	r3, r6
   d6d12:	4628      	mov	r0, r5
   d6d14:	f7fe fad8 	bl	d52c8 <siscanf>
   d6d18:	2800      	cmp	r0, #0
   d6d1a:	f340 8123 	ble.w	d6f64 <_tzset_unlocked_r+0x2c8>
   d6d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6d20:	18ef      	adds	r7, r5, r3
   d6d22:	5ceb      	ldrb	r3, [r5, r3]
   d6d24:	2b2d      	cmp	r3, #45	; 0x2d
   d6d26:	d103      	bne.n	d6d30 <_tzset_unlocked_r+0x94>
   d6d28:	3701      	adds	r7, #1
   d6d2a:	f04f 35ff 	mov.w	r5, #4294967295
   d6d2e:	e003      	b.n	d6d38 <_tzset_unlocked_r+0x9c>
   d6d30:	2b2b      	cmp	r3, #43	; 0x2b
   d6d32:	bf08      	it	eq
   d6d34:	3701      	addeq	r7, #1
   d6d36:	2501      	movs	r5, #1
   d6d38:	f10d 0a20 	add.w	sl, sp, #32
   d6d3c:	f10d 0b1e 	add.w	fp, sp, #30
   d6d40:	f04f 0800 	mov.w	r8, #0
   d6d44:	9603      	str	r6, [sp, #12]
   d6d46:	f8cd a008 	str.w	sl, [sp, #8]
   d6d4a:	9601      	str	r6, [sp, #4]
   d6d4c:	f8cd b000 	str.w	fp, [sp]
   d6d50:	4633      	mov	r3, r6
   d6d52:	aa07      	add	r2, sp, #28
   d6d54:	498d      	ldr	r1, [pc, #564]	; (d6f8c <_tzset_unlocked_r+0x2f0>)
   d6d56:	f8ad 801e 	strh.w	r8, [sp, #30]
   d6d5a:	4638      	mov	r0, r7
   d6d5c:	f8ad 8020 	strh.w	r8, [sp, #32]
   d6d60:	f7fe fab2 	bl	d52c8 <siscanf>
   d6d64:	4540      	cmp	r0, r8
   d6d66:	f340 80fd 	ble.w	d6f64 <_tzset_unlocked_r+0x2c8>
   d6d6a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6d6e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6d72:	f8df 9224 	ldr.w	r9, [pc, #548]	; d6f98 <_tzset_unlocked_r+0x2fc>
   d6d76:	213c      	movs	r1, #60	; 0x3c
   d6d78:	fb01 3302 	mla	r3, r1, r2, r3
   d6d7c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6d80:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6d84:	fb01 3302 	mla	r3, r1, r2, r3
   d6d88:	435d      	muls	r5, r3
   d6d8a:	6225      	str	r5, [r4, #32]
   d6d8c:	4d7c      	ldr	r5, [pc, #496]	; (d6f80 <_tzset_unlocked_r+0x2e4>)
   d6d8e:	4b7d      	ldr	r3, [pc, #500]	; (d6f84 <_tzset_unlocked_r+0x2e8>)
   d6d90:	602b      	str	r3, [r5, #0]
   d6d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6d94:	497c      	ldr	r1, [pc, #496]	; (d6f88 <_tzset_unlocked_r+0x2ec>)
   d6d96:	441f      	add	r7, r3
   d6d98:	464a      	mov	r2, r9
   d6d9a:	4633      	mov	r3, r6
   d6d9c:	4638      	mov	r0, r7
   d6d9e:	f7fe fa93 	bl	d52c8 <siscanf>
   d6da2:	4540      	cmp	r0, r8
   d6da4:	dc08      	bgt.n	d6db8 <_tzset_unlocked_r+0x11c>
   d6da6:	682b      	ldr	r3, [r5, #0]
   d6da8:	606b      	str	r3, [r5, #4]
   d6daa:	4b72      	ldr	r3, [pc, #456]	; (d6f74 <_tzset_unlocked_r+0x2d8>)
   d6dac:	6a22      	ldr	r2, [r4, #32]
   d6dae:	601a      	str	r2, [r3, #0]
   d6db0:	4b72      	ldr	r3, [pc, #456]	; (d6f7c <_tzset_unlocked_r+0x2e0>)
   d6db2:	f8c3 8000 	str.w	r8, [r3]
   d6db6:	e0d5      	b.n	d6f64 <_tzset_unlocked_r+0x2c8>
   d6db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6dba:	f8c5 9004 	str.w	r9, [r5, #4]
   d6dbe:	18fd      	adds	r5, r7, r3
   d6dc0:	5cfb      	ldrb	r3, [r7, r3]
   d6dc2:	2b2d      	cmp	r3, #45	; 0x2d
   d6dc4:	d103      	bne.n	d6dce <_tzset_unlocked_r+0x132>
   d6dc6:	3501      	adds	r5, #1
   d6dc8:	f04f 37ff 	mov.w	r7, #4294967295
   d6dcc:	e003      	b.n	d6dd6 <_tzset_unlocked_r+0x13a>
   d6dce:	2b2b      	cmp	r3, #43	; 0x2b
   d6dd0:	bf08      	it	eq
   d6dd2:	3501      	addeq	r5, #1
   d6dd4:	2701      	movs	r7, #1
   d6dd6:	2300      	movs	r3, #0
   d6dd8:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6ddc:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6de0:	f8ad 3020 	strh.w	r3, [sp, #32]
   d6de4:	930a      	str	r3, [sp, #40]	; 0x28
   d6de6:	9603      	str	r6, [sp, #12]
   d6de8:	f8cd a008 	str.w	sl, [sp, #8]
   d6dec:	9601      	str	r6, [sp, #4]
   d6dee:	f8cd b000 	str.w	fp, [sp]
   d6df2:	4633      	mov	r3, r6
   d6df4:	aa07      	add	r2, sp, #28
   d6df6:	4965      	ldr	r1, [pc, #404]	; (d6f8c <_tzset_unlocked_r+0x2f0>)
   d6df8:	4628      	mov	r0, r5
   d6dfa:	f7fe fa65 	bl	d52c8 <siscanf>
   d6dfe:	2800      	cmp	r0, #0
   d6e00:	dc04      	bgt.n	d6e0c <_tzset_unlocked_r+0x170>
   d6e02:	6a23      	ldr	r3, [r4, #32]
   d6e04:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d6e08:	63e3      	str	r3, [r4, #60]	; 0x3c
   d6e0a:	e00e      	b.n	d6e2a <_tzset_unlocked_r+0x18e>
   d6e0c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6e10:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6e14:	213c      	movs	r1, #60	; 0x3c
   d6e16:	fb01 3302 	mla	r3, r1, r2, r3
   d6e1a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6e1e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6e22:	fb01 3302 	mla	r3, r1, r2, r3
   d6e26:	435f      	muls	r7, r3
   d6e28:	63e7      	str	r7, [r4, #60]	; 0x3c
   d6e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6e2c:	4627      	mov	r7, r4
   d6e2e:	441d      	add	r5, r3
   d6e30:	f04f 0900 	mov.w	r9, #0
   d6e34:	782b      	ldrb	r3, [r5, #0]
   d6e36:	2b2c      	cmp	r3, #44	; 0x2c
   d6e38:	bf08      	it	eq
   d6e3a:	3501      	addeq	r5, #1
   d6e3c:	f895 8000 	ldrb.w	r8, [r5]
   d6e40:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d6e44:	d126      	bne.n	d6e94 <_tzset_unlocked_r+0x1f8>
   d6e46:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d6e4a:	9302      	str	r3, [sp, #8]
   d6e4c:	ab09      	add	r3, sp, #36	; 0x24
   d6e4e:	9300      	str	r3, [sp, #0]
   d6e50:	9603      	str	r6, [sp, #12]
   d6e52:	9601      	str	r6, [sp, #4]
   d6e54:	4633      	mov	r3, r6
   d6e56:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d6e5a:	494d      	ldr	r1, [pc, #308]	; (d6f90 <_tzset_unlocked_r+0x2f4>)
   d6e5c:	4628      	mov	r0, r5
   d6e5e:	f7fe fa33 	bl	d52c8 <siscanf>
   d6e62:	2803      	cmp	r0, #3
   d6e64:	d17e      	bne.n	d6f64 <_tzset_unlocked_r+0x2c8>
   d6e66:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d6e6a:	1e4b      	subs	r3, r1, #1
   d6e6c:	2b0b      	cmp	r3, #11
   d6e6e:	d879      	bhi.n	d6f64 <_tzset_unlocked_r+0x2c8>
   d6e70:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d6e74:	1e53      	subs	r3, r2, #1
   d6e76:	2b04      	cmp	r3, #4
   d6e78:	d874      	bhi.n	d6f64 <_tzset_unlocked_r+0x2c8>
   d6e7a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d6e7e:	2b06      	cmp	r3, #6
   d6e80:	d870      	bhi.n	d6f64 <_tzset_unlocked_r+0x2c8>
   d6e82:	f887 8008 	strb.w	r8, [r7, #8]
   d6e86:	60f9      	str	r1, [r7, #12]
   d6e88:	613a      	str	r2, [r7, #16]
   d6e8a:	617b      	str	r3, [r7, #20]
   d6e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6e8e:	eb05 0803 	add.w	r8, r5, r3
   d6e92:	e02a      	b.n	d6eea <_tzset_unlocked_r+0x24e>
   d6e94:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d6e98:	bf06      	itte	eq
   d6e9a:	3501      	addeq	r5, #1
   d6e9c:	4643      	moveq	r3, r8
   d6e9e:	2344      	movne	r3, #68	; 0x44
   d6ea0:	220a      	movs	r2, #10
   d6ea2:	a90b      	add	r1, sp, #44	; 0x2c
   d6ea4:	4628      	mov	r0, r5
   d6ea6:	9305      	str	r3, [sp, #20]
   d6ea8:	f7ff fe3e 	bl	d6b28 <strtoul>
   d6eac:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d6eb0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d6eb4:	4545      	cmp	r5, r8
   d6eb6:	9b05      	ldr	r3, [sp, #20]
   d6eb8:	d114      	bne.n	d6ee4 <_tzset_unlocked_r+0x248>
   d6eba:	234d      	movs	r3, #77	; 0x4d
   d6ebc:	f1b9 0f00 	cmp.w	r9, #0
   d6ec0:	d107      	bne.n	d6ed2 <_tzset_unlocked_r+0x236>
   d6ec2:	7223      	strb	r3, [r4, #8]
   d6ec4:	2303      	movs	r3, #3
   d6ec6:	60e3      	str	r3, [r4, #12]
   d6ec8:	2302      	movs	r3, #2
   d6eca:	6123      	str	r3, [r4, #16]
   d6ecc:	f8c4 9014 	str.w	r9, [r4, #20]
   d6ed0:	e00b      	b.n	d6eea <_tzset_unlocked_r+0x24e>
   d6ed2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d6ed6:	230b      	movs	r3, #11
   d6ed8:	62a3      	str	r3, [r4, #40]	; 0x28
   d6eda:	2301      	movs	r3, #1
   d6edc:	62e3      	str	r3, [r4, #44]	; 0x2c
   d6ede:	2300      	movs	r3, #0
   d6ee0:	6323      	str	r3, [r4, #48]	; 0x30
   d6ee2:	e002      	b.n	d6eea <_tzset_unlocked_r+0x24e>
   d6ee4:	b280      	uxth	r0, r0
   d6ee6:	723b      	strb	r3, [r7, #8]
   d6ee8:	6178      	str	r0, [r7, #20]
   d6eea:	2302      	movs	r3, #2
   d6eec:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6ef0:	2300      	movs	r3, #0
   d6ef2:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6ef6:	f8ad 3020 	strh.w	r3, [sp, #32]
   d6efa:	930a      	str	r3, [sp, #40]	; 0x28
   d6efc:	f898 3000 	ldrb.w	r3, [r8]
   d6f00:	2b2f      	cmp	r3, #47	; 0x2f
   d6f02:	d10b      	bne.n	d6f1c <_tzset_unlocked_r+0x280>
   d6f04:	9603      	str	r6, [sp, #12]
   d6f06:	f8cd a008 	str.w	sl, [sp, #8]
   d6f0a:	9601      	str	r6, [sp, #4]
   d6f0c:	f8cd b000 	str.w	fp, [sp]
   d6f10:	4633      	mov	r3, r6
   d6f12:	aa07      	add	r2, sp, #28
   d6f14:	491f      	ldr	r1, [pc, #124]	; (d6f94 <_tzset_unlocked_r+0x2f8>)
   d6f16:	4640      	mov	r0, r8
   d6f18:	f7fe f9d6 	bl	d52c8 <siscanf>
   d6f1c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6f20:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6f24:	213c      	movs	r1, #60	; 0x3c
   d6f26:	fb01 3302 	mla	r3, r1, r2, r3
   d6f2a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6f2e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6f32:	fb01 3302 	mla	r3, r1, r2, r3
   d6f36:	61bb      	str	r3, [r7, #24]
   d6f38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d6f3a:	f109 0901 	add.w	r9, r9, #1
   d6f3e:	f1b9 0f02 	cmp.w	r9, #2
   d6f42:	4445      	add	r5, r8
   d6f44:	f107 071c 	add.w	r7, r7, #28
   d6f48:	f47f af74 	bne.w	d6e34 <_tzset_unlocked_r+0x198>
   d6f4c:	6860      	ldr	r0, [r4, #4]
   d6f4e:	f7ff fdf5 	bl	d6b3c <__tzcalc_limits>
   d6f52:	4b08      	ldr	r3, [pc, #32]	; (d6f74 <_tzset_unlocked_r+0x2d8>)
   d6f54:	6a22      	ldr	r2, [r4, #32]
   d6f56:	601a      	str	r2, [r3, #0]
   d6f58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6f5a:	1a9b      	subs	r3, r3, r2
   d6f5c:	4a07      	ldr	r2, [pc, #28]	; (d6f7c <_tzset_unlocked_r+0x2e0>)
   d6f5e:	bf18      	it	ne
   d6f60:	2301      	movne	r3, #1
   d6f62:	6013      	str	r3, [r2, #0]
   d6f64:	b00d      	add	sp, #52	; 0x34
   d6f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f6a:	bf00      	nop
   d6f6c:	000d7bf8 	.word	0x000d7bf8
   d6f70:	2003e7e0 	.word	0x2003e7e0
   d6f74:	2003e7e8 	.word	0x2003e7e8
   d6f78:	000d7bfb 	.word	0x000d7bfb
   d6f7c:	2003e7e4 	.word	0x2003e7e4
   d6f80:	2003e328 	.word	0x2003e328
   d6f84:	2003e7d3 	.word	0x2003e7d3
   d6f88:	000d7bff 	.word	0x000d7bff
   d6f8c:	000d7c22 	.word	0x000d7c22
   d6f90:	000d7c0e 	.word	0x000d7c0e
   d6f94:	000d7c21 	.word	0x000d7c21
   d6f98:	2003e7c8 	.word	0x2003e7c8

000d6f9c <_findenv_r>:
   d6f9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6fa0:	4607      	mov	r7, r0
   d6fa2:	468b      	mov	fp, r1
   d6fa4:	4690      	mov	r8, r2
   d6fa6:	f000 f8d9 	bl	d715c <__env_lock>
   d6faa:	4b19      	ldr	r3, [pc, #100]	; (d7010 <_findenv_r+0x74>)
   d6fac:	681d      	ldr	r5, [r3, #0]
   d6fae:	469a      	mov	sl, r3
   d6fb0:	b13d      	cbz	r5, d6fc2 <_findenv_r+0x26>
   d6fb2:	465c      	mov	r4, fp
   d6fb4:	4623      	mov	r3, r4
   d6fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6fba:	b142      	cbz	r2, d6fce <_findenv_r+0x32>
   d6fbc:	2a3d      	cmp	r2, #61	; 0x3d
   d6fbe:	461c      	mov	r4, r3
   d6fc0:	d1f8      	bne.n	d6fb4 <_findenv_r+0x18>
   d6fc2:	4638      	mov	r0, r7
   d6fc4:	f000 f8cb 	bl	d715e <__env_unlock>
   d6fc8:	2000      	movs	r0, #0
   d6fca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6fce:	ebcb 0404 	rsb	r4, fp, r4
   d6fd2:	46a9      	mov	r9, r5
   d6fd4:	f859 0b04 	ldr.w	r0, [r9], #4
   d6fd8:	2800      	cmp	r0, #0
   d6fda:	d0f2      	beq.n	d6fc2 <_findenv_r+0x26>
   d6fdc:	4622      	mov	r2, r4
   d6fde:	4659      	mov	r1, fp
   d6fe0:	f7ff fcfc 	bl	d69dc <strncmp>
   d6fe4:	b988      	cbnz	r0, d700a <_findenv_r+0x6e>
   d6fe6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d6fea:	191e      	adds	r6, r3, r4
   d6fec:	5d1b      	ldrb	r3, [r3, r4]
   d6fee:	2b3d      	cmp	r3, #61	; 0x3d
   d6ff0:	d10b      	bne.n	d700a <_findenv_r+0x6e>
   d6ff2:	f8da 3000 	ldr.w	r3, [sl]
   d6ff6:	1aed      	subs	r5, r5, r3
   d6ff8:	10ad      	asrs	r5, r5, #2
   d6ffa:	4638      	mov	r0, r7
   d6ffc:	f8c8 5000 	str.w	r5, [r8]
   d7000:	f000 f8ad 	bl	d715e <__env_unlock>
   d7004:	1c70      	adds	r0, r6, #1
   d7006:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d700a:	464d      	mov	r5, r9
   d700c:	e7e1      	b.n	d6fd2 <_findenv_r+0x36>
   d700e:	bf00      	nop
   d7010:	2003e370 	.word	0x2003e370

000d7014 <_getenv_r>:
   d7014:	b507      	push	{r0, r1, r2, lr}
   d7016:	aa01      	add	r2, sp, #4
   d7018:	f7ff ffc0 	bl	d6f9c <_findenv_r>
   d701c:	b003      	add	sp, #12
   d701e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7024 <__gettzinfo>:
   d7024:	4800      	ldr	r0, [pc, #0]	; (d7028 <__gettzinfo+0x4>)
   d7026:	4770      	bx	lr
   d7028:	2003e330 	.word	0x2003e330

000d702c <gmtime_r>:
   d702c:	6802      	ldr	r2, [r0, #0]
   d702e:	4b47      	ldr	r3, [pc, #284]	; (d714c <gmtime_r+0x120>)
   d7030:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7032:	fb92 f4f3 	sdiv	r4, r2, r3
   d7036:	fb03 2214 	mls	r2, r3, r4, r2
   d703a:	2a00      	cmp	r2, #0
   d703c:	bfbc      	itt	lt
   d703e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d7042:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d7046:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d704a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d704e:	fb92 f3f0 	sdiv	r3, r2, r0
   d7052:	fb00 2213 	mls	r2, r0, r3, r2
   d7056:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d705a:	bfac      	ite	ge
   d705c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d7060:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d7064:	608b      	str	r3, [r1, #8]
   d7066:	fb92 f3f0 	sdiv	r3, r2, r0
   d706a:	fb00 2213 	mls	r2, r0, r3, r2
   d706e:	604b      	str	r3, [r1, #4]
   d7070:	600a      	str	r2, [r1, #0]
   d7072:	2307      	movs	r3, #7
   d7074:	1ce2      	adds	r2, r4, #3
   d7076:	fb92 f3f3 	sdiv	r3, r2, r3
   d707a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d707e:	1ad3      	subs	r3, r2, r3
   d7080:	618b      	str	r3, [r1, #24]
   d7082:	4b33      	ldr	r3, [pc, #204]	; (d7150 <gmtime_r+0x124>)
   d7084:	4d33      	ldr	r5, [pc, #204]	; (d7154 <gmtime_r+0x128>)
   d7086:	fb94 f5f5 	sdiv	r5, r4, r5
   d708a:	fb03 4405 	mla	r4, r3, r5, r4
   d708e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d7092:	fbb4 f2f2 	udiv	r2, r4, r2
   d7096:	4422      	add	r2, r4
   d7098:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d709c:	fbb4 f3f7 	udiv	r3, r4, r7
   d70a0:	1ad2      	subs	r2, r2, r3
   d70a2:	482d      	ldr	r0, [pc, #180]	; (d7158 <gmtime_r+0x12c>)
   d70a4:	fbb4 f0f0 	udiv	r0, r4, r0
   d70a8:	f648 6694 	movw	r6, #36500	; 0x8e94
   d70ac:	1a13      	subs	r3, r2, r0
   d70ae:	fbb3 f6f6 	udiv	r6, r3, r6
   d70b2:	4434      	add	r4, r6
   d70b4:	f240 126d 	movw	r2, #365	; 0x16d
   d70b8:	fbb3 f0f2 	udiv	r0, r3, r2
   d70bc:	fbb3 f3f7 	udiv	r3, r3, r7
   d70c0:	1ae3      	subs	r3, r4, r3
   d70c2:	fb02 3310 	mls	r3, r2, r0, r3
   d70c6:	2499      	movs	r4, #153	; 0x99
   d70c8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d70cc:	3202      	adds	r2, #2
   d70ce:	fbb2 f2f4 	udiv	r2, r2, r4
   d70d2:	2a0a      	cmp	r2, #10
   d70d4:	fb04 f402 	mul.w	r4, r4, r2
   d70d8:	f104 0602 	add.w	r6, r4, #2
   d70dc:	f04f 0405 	mov.w	r4, #5
   d70e0:	fbb6 f4f4 	udiv	r4, r6, r4
   d70e4:	bf34      	ite	cc
   d70e6:	2602      	movcc	r6, #2
   d70e8:	f06f 0609 	mvncs.w	r6, #9
   d70ec:	4416      	add	r6, r2
   d70ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d70f2:	fb02 0505 	mla	r5, r2, r5, r0
   d70f6:	1c5f      	adds	r7, r3, #1
   d70f8:	2e01      	cmp	r6, #1
   d70fa:	bf98      	it	ls
   d70fc:	3501      	addls	r5, #1
   d70fe:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d7102:	eba7 0704 	sub.w	r7, r7, r4
   d7106:	d302      	bcc.n	d710e <gmtime_r+0xe2>
   d7108:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d710c:	e014      	b.n	d7138 <gmtime_r+0x10c>
   d710e:	0782      	lsls	r2, r0, #30
   d7110:	d105      	bne.n	d711e <gmtime_r+0xf2>
   d7112:	2464      	movs	r4, #100	; 0x64
   d7114:	fbb0 f2f4 	udiv	r2, r0, r4
   d7118:	fb04 0212 	mls	r2, r4, r2, r0
   d711c:	b94a      	cbnz	r2, d7132 <gmtime_r+0x106>
   d711e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7122:	fbb0 f4f2 	udiv	r4, r0, r2
   d7126:	fb02 0014 	mls	r0, r2, r4, r0
   d712a:	fab0 f280 	clz	r2, r0
   d712e:	0952      	lsrs	r2, r2, #5
   d7130:	e000      	b.n	d7134 <gmtime_r+0x108>
   d7132:	2201      	movs	r2, #1
   d7134:	333b      	adds	r3, #59	; 0x3b
   d7136:	441a      	add	r2, r3
   d7138:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d713c:	2300      	movs	r3, #0
   d713e:	61ca      	str	r2, [r1, #28]
   d7140:	614d      	str	r5, [r1, #20]
   d7142:	610e      	str	r6, [r1, #16]
   d7144:	60cf      	str	r7, [r1, #12]
   d7146:	620b      	str	r3, [r1, #32]
   d7148:	4608      	mov	r0, r1
   d714a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d714c:	00015180 	.word	0x00015180
   d7150:	fffdc54f 	.word	0xfffdc54f
   d7154:	00023ab1 	.word	0x00023ab1
   d7158:	00023ab0 	.word	0x00023ab0

000d715c <__env_lock>:
   d715c:	4770      	bx	lr

000d715e <__env_unlock>:
   d715e:	4770      	bx	lr

000d7160 <dynalib_user>:
   d7160:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7170:	0000 0000 6542 6967 6c6e 6e69 7953 636e     ....BeginlinSync
   d7180:	5400 6568 6320 7275 6572 746e 6420 7461     .The current dat
   d7190:	2065 6e61 2064 6974 656d 6920 2073 7325     e and time is %s
   d71a0:	0a20 5400 6568 6320 7275 6572 746e 7420      ..The current t
   d71b0:	6d69 2065 7369 2520 2073 000a 7543 7272     ime is %s ..Curr
   d71c0:	6e65 2074 6974 656d 6920 2073 7325 6300     ent time is %s.c
   d71d0:	7275 6572 746e 6144 6574 6954 656d 0000     urrentDateTime..

000d71e0 <_ZTV16Adafruit_SSD1306>:
	...
   d71e8:	40c5 000d 4303 000d 4d2d 000d 5715 000d     .@...C..-M...W..
   d71f8:	4629 000d 4a2d 000d 44b1 000d 433d 000d     )F..-J...D..=C..
   d7208:	4aed 000d 4b83 000d 4bbb 000d 4bd7 000d     .J...K...K...K..

000d7218 <_ZTV12Adafruit_GFX>:
	...
   d7228:	4d2d 000d 5715 000d 40a1 000d 4a2d 000d     -M...W...@..-J..
   d7238:	4b4d 000d 4b69 000d 4aed 000d 4b83 000d     MK..iK...J...K..
   d7248:	4bbb 000d 4bd7 000d                         .K...K..

000d7250 <_ZL4font>:
   d7250:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d7260:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d7270:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d7280:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d7290:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d72a0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d72b0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d72c0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d72d0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d72e0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d72f0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d7300:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d7310:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d7320:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d7330:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d7340:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d7350:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d7360:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d7370:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d7380:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d7390:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d73a0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d73b0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d73c0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d73d0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d73e0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d73f0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d7400:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d7410:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d7420:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d7430:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d7440:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d7450:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d7460:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d7470:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d7480:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d7490:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d74a0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d74b0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d74c0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d74d0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d74e0:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d74f0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d7500:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d7510:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d7520:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d7530:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d7540:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d7550:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d7560:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d7570:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d7580:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d7590:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d75a0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d75b0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d75c0:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d75d0:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d75e0:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d75f0:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d7600:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d7610:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d7620:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d7630:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d7640:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d7650:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d7660:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d7670:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d7680:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d7690:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d76a0:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d76b0:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d76c0:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d76d0:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d76e0:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d76f0:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d7700:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d7710:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d7720:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d7730:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d7740:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d774c <_ZTVN5spark13EthernetClassE>:
	...
   d7754:	5357 000d 534d 000d 5343 000d 5339 000d     WS..MS..CS..9S..
   d7764:	532d 000d 5321 000d 5315 000d 530d 000d     -S..!S...S...S..
   d7774:	5303 000d 52f9 000d 60e5 000d               .S...R...`..

000d7780 <_ZTV8SPIClass>:
	...
   d7788:	5375 000d 5377 000d                         uS..wS..

000d7790 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7790:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d77a0:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d77b0:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d77c0:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d77d0:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d77e0:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d77f0:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d7800:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d7810:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d7820:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d7830:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d7840:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d7850:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d7860:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d7870:	6e61 6369 6100 6c6c 2500 302b 6433 253a     anic.all.%+03d:%
   d7880:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d7890:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d78a0 <_ZTV9IPAddress>:
	...
   d78a8:	5abd 000d 5aad 000d 5aaf 000d               .Z...Z...Z..

000d78b4 <_ZTV9USBSerial>:
	...
   d78bc:	5b95 000d 5be5 000d 5bf3 000d 5715 000d     .[...[...[...W..
   d78cc:	5bd1 000d 5b97 000d 5bad 000d 5bdf 000d     .[...[...[...[..
   d78dc:	5bc3 000d 5b91 000d                         .[...[..

000d78e4 <_ZTV11USARTSerial>:
	...
   d78ec:	5cad 000d 5cfd 000d 5d0b 000d 5715 000d     .\...\...]...W..
   d78fc:	5cc1 000d 5ce3 000d 5ccf 000d 5cf7 000d     .\...\...\...\..
   d790c:	5caf 000d 5cb3 000d                         .\...\..

000d7914 <_ZTV7TwoWire>:
	...
   d791c:	5db1 000d 5dfb 000d 5dd3 000d 5db3 000d     .]...]...]...]..
   d792c:	5ddb 000d 5de3 000d 5deb 000d 5df3 000d     .]...]...]...]..

000d793c <_ZTVN5spark9MeshClassE>:
	...
   d7944:	5ee5 000d 5edb 000d 5ed1 000d 5ec7 000d     .^...^...^...^..
   d7954:	5ebb 000d 5eaf 000d 5ea3 000d 5e9b 000d     .^...^...^...^..
   d7964:	5e91 000d 5e87 000d 60e5 000d               .^...^...`..

000d7970 <_ZTVN5spark9WiFiClassE>:
	...
   d7978:	605f 000d 6055 000d 604b 000d 6001 000d     _`..U`..K`...`..
   d7988:	603f 000d 6033 000d 6027 000d 601f 000d     ?`..3`..'`...`..
   d7998:	6015 000d 600b 000d 60e5 000d               .`...`...`..

000d79a4 <_ZTVN5spark12NetworkClassE>:
	...
   d79ac:	607d 000d 6087 000d 6091 000d 609b 000d     }`...`...`...`..
   d79bc:	60a5 000d 60b1 000d 60bd 000d 60c9 000d     .`...`...`...`..
   d79cc:	60d1 000d 60db 000d 60e5 000d               .`...`...`..

000d79d8 <_ZSt7nothrow>:
	...

000d79d9 <day_name.4725>:
   d79d9:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d79e9:	6972 6153 4a74                                   riSat

000d79ee <mon_name.4726>:
   d79ee:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d79fe:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d7a0e:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d7a1e:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d7a2e:	6425 000a                                   %d..

000d7a32 <_ctype_>:
   d7a32:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d7a42:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d7a52:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d7a62:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d7a72:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d7a82:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7a92:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7aa2:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7ab2:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d7b34 <__sf_fake_stdin>:
	...

000d7b54 <__sf_fake_stdout>:
	...

000d7b74 <__sf_fake_stderr>:
	...
   d7b94:	0043 0000                                   C...

000d7b98 <__month_lengths>:
   d7b98:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d7ba8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d7bb8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d7bc8:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d7bd8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d7be8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d7bf8:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d7c08:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d7c18:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d7c28:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d7c34 <link_const_variable_data_end>:
   d7c34:	000d4311 	.word	0x000d4311
   d7c38:	000d4a29 	.word	0x000d4a29
   d7c3c:	000d4dbd 	.word	0x000d4dbd
   d7c40:	000d5361 	.word	0x000d5361
   d7c44:	000d5539 	.word	0x000d5539
   d7c48:	000d56ed 	.word	0x000d56ed
   d7c4c:	000d5851 	.word	0x000d5851
   d7c50:	000d5949 	.word	0x000d5949
   d7c54:	000d5981 	.word	0x000d5981
   d7c58:	000d5fb1 	.word	0x000d5fb1
   d7c5c:	000d6069 	.word	0x000d6069
   d7c60:	000d61b1 	.word	0x000d61b1
   d7c64:	000d63a9 	.word	0x000d63a9
   d7c68:	000d642d 	.word	0x000d642d
   d7c6c:	000d64f1 	.word	0x000d64f1
   d7c70:	000d65b5 	.word	0x000d65b5

000d7c74 <link_constructors_end>:
	...
