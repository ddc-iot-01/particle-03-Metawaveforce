
c:/Users/217fa/Documents/CloudTime/CLOUDTIME/target/1.1.0/argon/CLOUDTIME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002608  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016704  2**0
                  CONTENTS
  3 .data         000000b8  2003e2e4  000d6620  0000e2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000454  2003e39c  2003e39c  0001e39c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d66d8  000d66d8  000166d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6700  000d6700  00016700  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000996fb  00000000  00000000  00016704  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000db41  00000000  00000000  000afdff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011784  00000000  00000000  000bd940  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001c20  00000000  00000000  000cf0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002c78  00000000  00000000  000d0ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002f3e9  00000000  00000000  000d395c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001fe8d  00000000  00000000  00102d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d26f2  00000000  00000000  00122bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b174  00000000  00000000  001f52c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	a8 60 0d 00                                         .`..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fbe9 	bl	d5804 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fbee 	bl	d581a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2e4 	.word	0x2003e2e4
   d4048:	000d6620 	.word	0x000d6620
   d404c:	2003e39c 	.word	0x2003e39c
   d4050:	2003e39c 	.word	0x2003e39c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fdb3 	bl	d4bc4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d661c 	.word	0x000d661c
   d4080:	000d65e4 	.word	0x000d65e4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b820 	b.w	d40c8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8ab 	bl	d41e4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bd65 	b.w	d4b60 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 ba91 	b.w	d45bc <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 ba8f 	b.w	d45bc <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN10CloudClass12syncTimeDoneEv.isra.5>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d40ae:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d40b0:	2000      	movs	r0, #0
   d40b2:	f000 fa63 	bl	d457c <spark_sync_time_pending>
   d40b6:	b128      	cbz	r0, d40c4 <_ZN10CloudClass12syncTimeDoneEv.isra.5+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40b8:	f000 fa50 	bl	d455c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d40bc:	f080 0001 	eor.w	r0, r0, #1
   d40c0:	b2c0      	uxtb	r0, r0
   d40c2:	bd08      	pop	{r3, pc}
   d40c4:	2001      	movs	r0, #1
    }
   d40c6:	bd08      	pop	{r3, pc}

000d40c8 <setup>:
 * Author:
 * Date:
 */

// setup() runs once, when the device is first turned on.
void setup() {
   d40c8:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
 Serial.begin(9600);
   d40ca:	f000 fe57 	bl	d4d7c <_Z16_fetch_usbserialv>
   d40ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40d2:	f000 fe41 	bl	d4d58 <_ZN9USBSerial5beginEl>
   Wire.begin();
   d40d6:	f001 f8e5 	bl	d52a4 <_Z19__fetch_global_Wirev>
   d40da:	f000 ff19 	bl	d4f10 <_ZN7TwoWire5beginEv>
   while(!Serial);
   d40de:	f000 fe4d 	bl	d4d7c <_Z16_fetch_usbserialv>
   d40e2:	f000 fe40 	bl	d4d66 <_ZN9USBSerialcvbEv>
   d40e6:	2800      	cmp	r0, #0
   d40e8:	d0f9      	beq.n	d40de <setup+0x16>
   Serial.println("BeginlinSync");
   d40ea:	f000 fe47 	bl	d4d7c <_Z16_fetch_usbserialv>
   d40ee:	4902      	ldr	r1, [pc, #8]	; (d40f8 <setup+0x30>)
}
   d40f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setup() {
  // Put initialization like pinMode and begin functions here.
 Serial.begin(9600);
   Wire.begin();
   while(!Serial);
   Serial.println("BeginlinSync");
   d40f4:	f000 bbfd 	b.w	d48f2 <_ZN5Print7printlnEPKc>
   d40f8:	000d60bc 	.word	0x000d60bc

000d40fc <_Z12sync_my_timev>:
void loop() {
  // The core of your code will likely live here.
  sync_my_time();
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
}
void sync_my_time() {
   d40fc:	b570      	push	{r4, r5, r6, lr}
   d40fe:	b092      	sub	sp, #72	; 0x48
  String DateTime;
   d4100:	4935      	ldr	r1, [pc, #212]	; (d41d8 <_Z12sync_my_timev+0xdc>)
   d4102:	a803      	add	r0, sp, #12
   d4104:	f000 fb37 	bl	d4776 <_ZN6StringC1EPK19__FlashStringHelper>
  String TimeOnly;
   d4108:	4933      	ldr	r1, [pc, #204]	; (d41d8 <_Z12sync_my_timev+0xdc>)
   d410a:	a807      	add	r0, sp, #28
   d410c:	f000 fb33 	bl	d4776 <_ZN6StringC1EPK19__FlashStringHelper>
  char currentDateTime[25];
  char currentTime[9];
  Time.zone(-6); // Set Time Zone to MDT (UTC - 7)
   d4110:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d4114:	f000 fc76 	bl	d4a04 <_ZN9TimeClass4zoneEf>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4118:	f000 f89c 	bl	d4254 <HAL_Timer_Get_Milli_Seconds>
   d411c:	4606      	mov	r6, r0
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
   d411e:	2000      	movs	r0, #0
   d4120:	f000 fa24 	bl	d456c <spark_sync_time>
  unsigned long cur=millis();
  // Request time synch from Particle Device Cloud and wait for data to come back
  Particle.syncTime();
  waitUntil(Particle.syncTimeDone);
   d4124:	f7ff ffc3 	bl	d40ae <_ZN10CloudClass12syncTimeDoneEv.isra.5>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4128:	2800      	cmp	r0, #0
   d412a:	d051      	beq.n	d41d0 <_Z12sync_my_timev+0xd4>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d412c:	ac12      	add	r4, sp, #72	; 0x48
   d412e:	2500      	movs	r5, #0
   d4130:	f7ff ffbd 	bl	d40ae <_ZN10CloudClass12syncTimeDoneEv.isra.5>
   d4134:	f844 5d1c 	str.w	r5, [r4, #-28]!
        return CLOUD_FN(spark_sync_time_last(&tm, nullptr), 0);
   d4138:	4629      	mov	r1, r5
   d413a:	4620      	mov	r0, r4
   d413c:	f000 fa26 	bl	d458c <spark_sync_time_last>
  // Check if synchronized successfully
  if(Particle.timeSyncedLast() >= cur) {
   d4140:	4286      	cmp	r6, r0
   d4142:	d83d      	bhi.n	d41c0 <_Z12sync_my_timev+0xc4>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d4144:	f000 fcbd 	bl	d4ac2 <_ZN9TimeClass3nowEv>
   d4148:	4601      	mov	r1, r0
   d414a:	4620      	mov	r0, r4
   d414c:	f000 fc76 	bl	d4a3c <_ZN9TimeClass7timeStrEl>
    DateTime = Time.timeStr();
   d4150:	4621      	mov	r1, r4
   d4152:	a803      	add	r0, sp, #12
   d4154:	f000 fb3f 	bl	d47d6 <_ZN6StringaSEOS_>
   d4158:	4620      	mov	r0, r4
   d415a:	f000 fac5 	bl	d46e8 <_ZN6StringD1Ev>
    TimeOnly = DateTime.substring(11,19);       // pull out only Time from DateTime String
   d415e:	2313      	movs	r3, #19
   d4160:	220b      	movs	r2, #11
   d4162:	a903      	add	r1, sp, #12
   d4164:	4620      	mov	r0, r4
   d4166:	f000 fb67 	bl	d4838 <_ZNK6String9substringEjj>
   d416a:	4621      	mov	r1, r4
   d416c:	a807      	add	r0, sp, #28
   d416e:	f000 fb32 	bl	d47d6 <_ZN6StringaSEOS_>
   d4172:	4620      	mov	r0, r4
   d4174:	f000 fab8 	bl	d46e8 <_ZN6StringD1Ev>
    Serial.println(DateTime);
   d4178:	f000 fe00 	bl	d4d7c <_Z16_fetch_usbserialv>
   d417c:	9903      	ldr	r1, [sp, #12]
   d417e:	f000 fbb8 	bl	d48f2 <_ZN5Print7printlnEPKc>
    Serial.println(TimeOnly);
   d4182:	f000 fdfb 	bl	d4d7c <_Z16_fetch_usbserialv>
   d4186:	9907      	ldr	r1, [sp, #28]
   d4188:	f000 fbb3 	bl	d48f2 <_ZN5Print7printlnEPKc>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d418c:	462b      	mov	r3, r5
   d418e:	2219      	movs	r2, #25
   d4190:	4621      	mov	r1, r4
   d4192:	a803      	add	r0, sp, #12
   d4194:	f000 fb38 	bl	d4808 <_ZNK6String8getBytesEPhjj>
   d4198:	462b      	mov	r3, r5
   d419a:	2209      	movs	r2, #9
   d419c:	4669      	mov	r1, sp
   d419e:	a807      	add	r0, sp, #28
   d41a0:	f000 fb32 	bl	d4808 <_ZNK6String8getBytesEPhjj>
    // Using Time with Formatted Print Statements
    DateTime.toCharArray(currentDateTime,25);   // convert DateTime in to an array of char for printf()
    TimeOnly.toCharArray(currentTime,9);        // convert TImeOnly to an array of char for printf()
    Serial.printf("The current date and time is %s \n",currentDateTime);
   d41a4:	f000 fdea 	bl	d4d7c <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d41a8:	4623      	mov	r3, r4
   d41aa:	4a0c      	ldr	r2, [pc, #48]	; (d41dc <_Z12sync_my_timev+0xe0>)
   d41ac:	4629      	mov	r1, r5
   d41ae:	f000 fbd9 	bl	d4964 <_ZN5Print11printf_implEbPKcz>
    Serial.printf("The current time is %s \n",currentTime);
   d41b2:	f000 fde3 	bl	d4d7c <_Z16_fetch_usbserialv>
   d41b6:	466b      	mov	r3, sp
   d41b8:	4a09      	ldr	r2, [pc, #36]	; (d41e0 <_Z12sync_my_timev+0xe4>)
   d41ba:	4629      	mov	r1, r5
   d41bc:	f000 fbd2 	bl	d4964 <_ZN5Print11printf_implEbPKcz>
  sync_my_time();
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
}
void sync_my_time() {
  String DateTime;
  String TimeOnly;
   d41c0:	a807      	add	r0, sp, #28
   d41c2:	f000 fa91 	bl	d46e8 <_ZN6StringD1Ev>
  // The core of your code will likely live here.
  sync_my_time();
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
}
void sync_my_time() {
  String DateTime;
   d41c6:	a803      	add	r0, sp, #12
   d41c8:	f000 fa8e 	bl	d46e8 <_ZN6StringD1Ev>
    DateTime.toCharArray(currentDateTime,25);   // convert DateTime in to an array of char for printf()
    TimeOnly.toCharArray(currentTime,9);        // convert TImeOnly to an array of char for printf()
    Serial.printf("The current date and time is %s \n",currentDateTime);
    Serial.printf("The current time is %s \n",currentTime);
  }
   d41cc:	b012      	add	sp, #72	; 0x48
   d41ce:	bd70      	pop	{r4, r5, r6, pc}
            spark_process();
   d41d0:	f000 f9bc 	bl	d454c <spark_process>
   d41d4:	e7a6      	b.n	d4124 <_Z12sync_my_timev+0x28>
   d41d6:	bf00      	nop
   d41d8:	000d615e 	.word	0x000d615e
   d41dc:	000d60c9 	.word	0x000d60c9
   d41e0:	000d60eb 	.word	0x000d60eb

000d41e4 <loop>:
   while(!Serial);
   Serial.println("BeginlinSync");
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d41e4:	b508      	push	{r3, lr}
  // The core of your code will likely live here.
  sync_my_time();
   d41e6:	f7ff ff89 	bl	d40fc <_Z12sync_my_timev>
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
   d41ea:	f64e 2160 	movw	r1, #60000	; 0xea60
   d41ee:	f242 7010 	movw	r0, #10000	; 0x2710
   d41f2:	f000 fe9e 	bl	d4f32 <_Z6randomii>
}
   d41f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  sync_my_time();
  delay(random(10000,60000));   // just a random delay so that we can see this work (edited) 
   d41fa:	f000 bc73 	b.w	d4ae4 <delay>

000d41fe <_GLOBAL__sub_I_setup>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41fe:	f000 b811 	b.w	d4224 <HAL_Pin_Map>
	...

000d4204 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4204:	b508      	push	{r3, lr}
   d4206:	4b02      	ldr	r3, [pc, #8]	; (d4210 <netdb_freeaddrinfo+0xc>)
   d4208:	681b      	ldr	r3, [r3, #0]
   d420a:	689b      	ldr	r3, [r3, #8]
   d420c:	9301      	str	r3, [sp, #4]
   d420e:	bd08      	pop	{r3, pc}
   d4210:	00030268 	.word	0x00030268

000d4214 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4214:	b508      	push	{r3, lr}
   d4216:	4b02      	ldr	r3, [pc, #8]	; (d4220 <netdb_getaddrinfo+0xc>)
   d4218:	681b      	ldr	r3, [r3, #0]
   d421a:	68db      	ldr	r3, [r3, #12]
   d421c:	9301      	str	r3, [sp, #4]
   d421e:	bd08      	pop	{r3, pc}
   d4220:	00030268 	.word	0x00030268

000d4224 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4224:	b508      	push	{r3, lr}
   d4226:	4b02      	ldr	r3, [pc, #8]	; (d4230 <HAL_Pin_Map+0xc>)
   d4228:	681b      	ldr	r3, [r3, #0]
   d422a:	681b      	ldr	r3, [r3, #0]
   d422c:	9301      	str	r3, [sp, #4]
   d422e:	bd08      	pop	{r3, pc}
   d4230:	0003022c 	.word	0x0003022c

000d4234 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4234:	b508      	push	{r3, lr}
   d4236:	4b02      	ldr	r3, [pc, #8]	; (d4240 <HAL_SPI_Init+0xc>)
   d4238:	681b      	ldr	r3, [r3, #0]
   d423a:	69db      	ldr	r3, [r3, #28]
   d423c:	9301      	str	r3, [sp, #4]
   d423e:	bd08      	pop	{r3, pc}
   d4240:	00030230 	.word	0x00030230

000d4244 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4244:	b508      	push	{r3, lr}
   d4246:	4b02      	ldr	r3, [pc, #8]	; (d4250 <HAL_RNG_GetRandomNumber+0xc>)
   d4248:	681b      	ldr	r3, [r3, #0]
   d424a:	685b      	ldr	r3, [r3, #4]
   d424c:	9301      	str	r3, [sp, #4]
   d424e:	bd08      	pop	{r3, pc}
   d4250:	00030218 	.word	0x00030218

000d4254 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4254:	b508      	push	{r3, lr}
   d4256:	4b02      	ldr	r3, [pc, #8]	; (d4260 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4258:	681b      	ldr	r3, [r3, #0]
   d425a:	695b      	ldr	r3, [r3, #20]
   d425c:	9301      	str	r3, [sp, #4]
   d425e:	bd08      	pop	{r3, pc}
   d4260:	00030218 	.word	0x00030218

000d4264 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4264:	b508      	push	{r3, lr}
   d4266:	4b02      	ldr	r3, [pc, #8]	; (d4270 <HAL_RTC_Get_UnixTime+0xc>)
   d4268:	681b      	ldr	r3, [r3, #0]
   d426a:	69db      	ldr	r3, [r3, #28]
   d426c:	9301      	str	r3, [sp, #4]
   d426e:	bd08      	pop	{r3, pc}
   d4270:	00030218 	.word	0x00030218

000d4274 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4274:	b508      	push	{r3, lr}
   d4276:	4b02      	ldr	r3, [pc, #8]	; (d4280 <HAL_RTC_Time_Is_Valid+0xc>)
   d4278:	681b      	ldr	r3, [r3, #0]
   d427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d427c:	9301      	str	r3, [sp, #4]
   d427e:	bd08      	pop	{r3, pc}
   d4280:	00030218 	.word	0x00030218

000d4284 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4284:	b508      	push	{r3, lr}
   d4286:	4b02      	ldr	r3, [pc, #8]	; (d4290 <os_thread_is_current+0xc>)
   d4288:	681b      	ldr	r3, [r3, #0]
   d428a:	689b      	ldr	r3, [r3, #8]
   d428c:	9301      	str	r3, [sp, #4]
   d428e:	bd08      	pop	{r3, pc}
   d4290:	00030248 	.word	0x00030248

000d4294 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4294:	b508      	push	{r3, lr}
   d4296:	4b02      	ldr	r3, [pc, #8]	; (d42a0 <os_thread_join+0xc>)
   d4298:	681b      	ldr	r3, [r3, #0]
   d429a:	691b      	ldr	r3, [r3, #16]
   d429c:	9301      	str	r3, [sp, #4]
   d429e:	bd08      	pop	{r3, pc}
   d42a0:	00030248 	.word	0x00030248

000d42a4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d42a4:	b508      	push	{r3, lr}
   d42a6:	4b02      	ldr	r3, [pc, #8]	; (d42b0 <os_thread_cleanup+0xc>)
   d42a8:	681b      	ldr	r3, [r3, #0]
   d42aa:	695b      	ldr	r3, [r3, #20]
   d42ac:	9301      	str	r3, [sp, #4]
   d42ae:	bd08      	pop	{r3, pc}
   d42b0:	00030248 	.word	0x00030248

000d42b4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d42b4:	b508      	push	{r3, lr}
   d42b6:	4b02      	ldr	r3, [pc, #8]	; (d42c0 <os_mutex_create+0xc>)
   d42b8:	681b      	ldr	r3, [r3, #0]
   d42ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d42bc:	9301      	str	r3, [sp, #4]
   d42be:	bd08      	pop	{r3, pc}
   d42c0:	00030248 	.word	0x00030248

000d42c4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42c4:	b508      	push	{r3, lr}
   d42c6:	4b02      	ldr	r3, [pc, #8]	; (d42d0 <os_mutex_recursive_create+0xc>)
   d42c8:	681b      	ldr	r3, [r3, #0]
   d42ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42cc:	9301      	str	r3, [sp, #4]
   d42ce:	bd08      	pop	{r3, pc}
   d42d0:	00030248 	.word	0x00030248

000d42d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d42d4:	b508      	push	{r3, lr}
   d42d6:	4b02      	ldr	r3, [pc, #8]	; (d42e0 <inet_inet_ntop+0xc>)
   d42d8:	681b      	ldr	r3, [r3, #0]
   d42da:	695b      	ldr	r3, [r3, #20]
   d42dc:	9301      	str	r3, [sp, #4]
   d42de:	bd08      	pop	{r3, pc}
   d42e0:	00030264 	.word	0x00030264

000d42e4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d42e4:	b508      	push	{r3, lr}
   d42e6:	4b02      	ldr	r3, [pc, #8]	; (d42f0 <HAL_USART_Init+0xc>)
   d42e8:	681b      	ldr	r3, [r3, #0]
   d42ea:	681b      	ldr	r3, [r3, #0]
   d42ec:	9301      	str	r3, [sp, #4]
   d42ee:	bd08      	pop	{r3, pc}
   d42f0:	0003023c 	.word	0x0003023c

000d42f4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d42f4:	b508      	push	{r3, lr}
   d42f6:	4b02      	ldr	r3, [pc, #8]	; (d4300 <HAL_USART_Write_Data+0xc>)
   d42f8:	681b      	ldr	r3, [r3, #0]
   d42fa:	68db      	ldr	r3, [r3, #12]
   d42fc:	9301      	str	r3, [sp, #4]
   d42fe:	bd08      	pop	{r3, pc}
   d4300:	0003023c 	.word	0x0003023c

000d4304 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <HAL_USART_Available_Data+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	691b      	ldr	r3, [r3, #16]
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	0003023c 	.word	0x0003023c

000d4314 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <HAL_USART_Read_Data+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	695b      	ldr	r3, [r3, #20]
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	0003023c 	.word	0x0003023c

000d4324 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <HAL_USART_Peek_Data+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	699b      	ldr	r3, [r3, #24]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	0003023c 	.word	0x0003023c

000d4334 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <HAL_USART_Flush_Data+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	69db      	ldr	r3, [r3, #28]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	0003023c 	.word	0x0003023c

000d4344 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <HAL_USART_Available_Data_For_Write+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	0003023c 	.word	0x0003023c

000d4354 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <HAL_I2C_Begin+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	68db      	ldr	r3, [r3, #12]
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	00030228 	.word	0x00030228

000d4364 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <HAL_I2C_Write_Data+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	6a1b      	ldr	r3, [r3, #32]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030228 	.word	0x00030228

000d4374 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <HAL_I2C_Available_Data+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030228 	.word	0x00030228

000d4384 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <HAL_I2C_Read_Data+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	00030228 	.word	0x00030228

000d4394 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <HAL_I2C_Peek_Data+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030228 	.word	0x00030228

000d43a4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <HAL_I2C_Flush_Data+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	00030228 	.word	0x00030228

000d43b4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <HAL_I2C_Init+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	00030228 	.word	0x00030228

000d43c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <HAL_USB_USART_Init+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	681b      	ldr	r3, [r3, #0]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	0003024c 	.word	0x0003024c

000d43d4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_USB_USART_Begin+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	685b      	ldr	r3, [r3, #4]
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	0003024c 	.word	0x0003024c

000d43e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <HAL_USB_USART_Available_Data+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	691b      	ldr	r3, [r3, #16]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	0003024c 	.word	0x0003024c

000d43f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	695b      	ldr	r3, [r3, #20]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	0003024c 	.word	0x0003024c

000d4404 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <HAL_USB_USART_Receive_Data+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	699b      	ldr	r3, [r3, #24]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	0003024c 	.word	0x0003024c

000d4414 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <HAL_USB_USART_Send_Data+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	69db      	ldr	r3, [r3, #28]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	0003024c 	.word	0x0003024c

000d4424 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_USB_USART_Flush_Data+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	6a1b      	ldr	r3, [r3, #32]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003024c 	.word	0x0003024c

000d4434 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_USB_USART_Is_Enabled+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	0003024c 	.word	0x0003024c

000d4444 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <system_mode+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	681b      	ldr	r3, [r3, #0]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	00030220 	.word	0x00030220

000d4454 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <set_system_mode+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	685b      	ldr	r3, [r3, #4]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030220 	.word	0x00030220

000d4464 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <system_delay_ms+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	695b      	ldr	r3, [r3, #20]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030220 	.word	0x00030220

000d4474 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <system_thread_get_state+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030220 	.word	0x00030220

000d4484 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b03      	ldr	r3, [pc, #12]	; (d4494 <system_ctrl_set_app_request_handler+0x10>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d448e:	9301      	str	r3, [sp, #4]
   d4490:	bd08      	pop	{r3, pc}
   d4492:	0000      	.short	0x0000
   d4494:	00030220 	.word	0x00030220

000d4498 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b03      	ldr	r3, [pc, #12]	; (d44a8 <system_ctrl_set_result+0x10>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d44a2:	9301      	str	r3, [sp, #4]
   d44a4:	bd08      	pop	{r3, pc}
   d44a6:	0000      	.short	0x0000
   d44a8:	00030220 	.word	0x00030220

000d44ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <network_connect+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	685b      	ldr	r3, [r3, #4]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	00030240 	.word	0x00030240

000d44bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <network_connecting+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	689b      	ldr	r3, [r3, #8]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	00030240 	.word	0x00030240

000d44cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <network_disconnect+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	68db      	ldr	r3, [r3, #12]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	00030240 	.word	0x00030240

000d44dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <network_ready+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	691b      	ldr	r3, [r3, #16]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	00030240 	.word	0x00030240

000d44ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <network_on+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	695b      	ldr	r3, [r3, #20]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	00030240 	.word	0x00030240

000d44fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <network_off+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	699b      	ldr	r3, [r3, #24]
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	00030240 	.word	0x00030240

000d450c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <network_listen+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	69db      	ldr	r3, [r3, #28]
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	00030240 	.word	0x00030240

000d451c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <network_listening+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	6a1b      	ldr	r3, [r3, #32]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	00030240 	.word	0x00030240

000d452c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <network_set_listen_timeout+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030240 	.word	0x00030240

000d453c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <network_get_listen_timeout+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030240 	.word	0x00030240

000d454c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <spark_process+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	689b      	ldr	r3, [r3, #8]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	00030244 	.word	0x00030244

000d455c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <spark_cloud_flag_connected+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	695b      	ldr	r3, [r3, #20]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030244 	.word	0x00030244

000d456c <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <spark_sync_time+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030244 	.word	0x00030244

000d457c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <spark_sync_time_pending+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030244 	.word	0x00030244

000d458c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <spark_sync_time_last+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030244 	.word	0x00030244

000d459c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030244 	.word	0x00030244

000d45ac <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <malloc+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	681b      	ldr	r3, [r3, #0]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	0003021c 	.word	0x0003021c

000d45bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <free+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	685b      	ldr	r3, [r3, #4]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	0003021c 	.word	0x0003021c

000d45cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <realloc+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	689b      	ldr	r3, [r3, #8]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	0003021c 	.word	0x0003021c

000d45dc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <siprintf+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	691b      	ldr	r3, [r3, #16]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	0003021c 	.word	0x0003021c

000d45ec <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <siscanf+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	699b      	ldr	r3, [r3, #24]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	0003021c 	.word	0x0003021c

000d45fc <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <vsnprintf+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	0003021c 	.word	0x0003021c

000d460c <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <_malloc_r+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	0003021c 	.word	0x0003021c

000d461c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d461c:	2200      	movs	r2, #0
   d461e:	4611      	mov	r1, r2
   d4620:	6840      	ldr	r0, [r0, #4]
   d4622:	f7ff bf7b 	b.w	d451c <network_listening>

000d4626 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4626:	2200      	movs	r2, #0
   d4628:	4611      	mov	r1, r2
   d462a:	6840      	ldr	r0, [r0, #4]
   d462c:	f7ff bf86 	b.w	d453c <network_get_listen_timeout>

000d4630 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4630:	2200      	movs	r2, #0
   d4632:	6840      	ldr	r0, [r0, #4]
   d4634:	f7ff bf7a 	b.w	d452c <network_set_listen_timeout>

000d4638 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4638:	2200      	movs	r2, #0
   d463a:	f081 0101 	eor.w	r1, r1, #1
   d463e:	6840      	ldr	r0, [r0, #4]
   d4640:	f7ff bf64 	b.w	d450c <network_listen>

000d4644 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4644:	2300      	movs	r3, #0
   d4646:	461a      	mov	r2, r3
   d4648:	4619      	mov	r1, r3
   d464a:	6840      	ldr	r0, [r0, #4]
   d464c:	f7ff bf56 	b.w	d44fc <network_off>

000d4650 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4650:	2300      	movs	r3, #0
   d4652:	461a      	mov	r2, r3
   d4654:	4619      	mov	r1, r3
   d4656:	6840      	ldr	r0, [r0, #4]
   d4658:	f7ff bf48 	b.w	d44ec <network_on>

000d465c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d465c:	2200      	movs	r2, #0
   d465e:	4611      	mov	r1, r2
   d4660:	6840      	ldr	r0, [r0, #4]
   d4662:	f7ff bf3b 	b.w	d44dc <network_ready>

000d4666 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4666:	2200      	movs	r2, #0
   d4668:	4611      	mov	r1, r2
   d466a:	6840      	ldr	r0, [r0, #4]
   d466c:	f7ff bf26 	b.w	d44bc <network_connecting>

000d4670 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4670:	2200      	movs	r2, #0
   d4672:	2102      	movs	r1, #2
   d4674:	6840      	ldr	r0, [r0, #4]
   d4676:	f7ff bf29 	b.w	d44cc <network_disconnect>

000d467a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d467a:	2300      	movs	r3, #0
   d467c:	461a      	mov	r2, r3
   d467e:	6840      	ldr	r0, [r0, #4]
   d4680:	f7ff bf14 	b.w	d44ac <network_connect>

000d4684 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4684:	4b02      	ldr	r3, [pc, #8]	; (d4690 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4686:	2203      	movs	r2, #3
   d4688:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d468a:	4a02      	ldr	r2, [pc, #8]	; (d4694 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d468c:	601a      	str	r2, [r3, #0]
   d468e:	4770      	bx	lr
   d4690:	2003e3a0 	.word	0x2003e3a0
   d4694:	000d610c 	.word	0x000d610c

000d4698 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4698:	4770      	bx	lr

000d469a <_ZN8SPIClassD0Ev>:
   d469a:	b510      	push	{r4, lr}
   d469c:	4604      	mov	r4, r0
   d469e:	f7ff fcfa 	bl	d4096 <_ZdlPv>
   d46a2:	4620      	mov	r0, r4
   d46a4:	bd10      	pop	{r4, pc}
	...

000d46a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d46a8:	b570      	push	{r4, r5, r6, lr}
   d46aa:	4b08      	ldr	r3, [pc, #32]	; (d46cc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d46ac:	6003      	str	r3, [r0, #0]
   d46ae:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d46b0:	2500      	movs	r5, #0
   d46b2:	460e      	mov	r6, r1
   d46b4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d46b8:	f7ff fdfc 	bl	d42b4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d46bc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d46be:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d46c0:	f7ff fdb8 	bl	d4234 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d46c4:	60a5      	str	r5, [r4, #8]
}
   d46c6:	4620      	mov	r0, r4
   d46c8:	bd70      	pop	{r4, r5, r6, pc}
   d46ca:	bf00      	nop
   d46cc:	000d6140 	.word	0x000d6140

000d46d0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d46d0:	4b04      	ldr	r3, [pc, #16]	; (d46e4 <_GLOBAL__sub_I_System+0x14>)
   d46d2:	2000      	movs	r0, #0
   d46d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d46d8:	7018      	strb	r0, [r3, #0]
   d46da:	8058      	strh	r0, [r3, #2]
   d46dc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d46de:	f7ff beb9 	b.w	d4454 <set_system_mode>
   d46e2:	bf00      	nop
   d46e4:	2003e3a8 	.word	0x2003e3a8

000d46e8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d46e8:	b510      	push	{r4, lr}
   d46ea:	4604      	mov	r4, r0
{
	free(buffer);
   d46ec:	6800      	ldr	r0, [r0, #0]
   d46ee:	f7ff ff65 	bl	d45bc <free>
}
   d46f2:	4620      	mov	r0, r4
   d46f4:	bd10      	pop	{r4, pc}

000d46f6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d46f6:	b510      	push	{r4, lr}
   d46f8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d46fa:	6800      	ldr	r0, [r0, #0]
   d46fc:	b108      	cbz	r0, d4702 <_ZN6String10invalidateEv+0xc>
   d46fe:	f7ff ff5d 	bl	d45bc <free>
	buffer = NULL;
   d4702:	2300      	movs	r3, #0
   d4704:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4706:	60a3      	str	r3, [r4, #8]
   d4708:	6063      	str	r3, [r4, #4]
   d470a:	bd10      	pop	{r4, pc}

000d470c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d470c:	b538      	push	{r3, r4, r5, lr}
   d470e:	4604      	mov	r4, r0
   d4710:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4712:	6800      	ldr	r0, [r0, #0]
   d4714:	3101      	adds	r1, #1
   d4716:	f7ff ff59 	bl	d45cc <realloc>
	if (newbuffer) {
   d471a:	b110      	cbz	r0, d4722 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d471c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4720:	2001      	movs	r0, #1
	}
	return 0;
}
   d4722:	bd38      	pop	{r3, r4, r5, pc}

000d4724 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4724:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4726:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4728:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d472a:	b113      	cbz	r3, d4732 <_ZN6String7reserveEj+0xe>
   d472c:	6843      	ldr	r3, [r0, #4]
   d472e:	428b      	cmp	r3, r1
   d4730:	d207      	bcs.n	d4742 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4732:	4620      	mov	r0, r4
   d4734:	f7ff ffea 	bl	d470c <_ZN6String12changeBufferEj>
   d4738:	b120      	cbz	r0, d4744 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d473a:	68a3      	ldr	r3, [r4, #8]
   d473c:	b90b      	cbnz	r3, d4742 <_ZN6String7reserveEj+0x1e>
   d473e:	6822      	ldr	r2, [r4, #0]
   d4740:	7013      	strb	r3, [r2, #0]
   d4742:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4744:	bd10      	pop	{r4, pc}

000d4746 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4746:	b570      	push	{r4, r5, r6, lr}
   d4748:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d474a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d474c:	4604      	mov	r4, r0
   d474e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4750:	f7ff ffe8 	bl	d4724 <_ZN6String7reserveEj>
   d4754:	b918      	cbnz	r0, d475e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4756:	4620      	mov	r0, r4
   d4758:	f7ff ffcd 	bl	d46f6 <_ZN6String10invalidateEv>
		return *this;
   d475c:	e009      	b.n	d4772 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d475e:	462a      	mov	r2, r5
   d4760:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4762:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4764:	6820      	ldr	r0, [r4, #0]
   d4766:	f001 f84d 	bl	d5804 <memcpy>
	buffer[len] = 0;
   d476a:	6822      	ldr	r2, [r4, #0]
   d476c:	68a3      	ldr	r3, [r4, #8]
   d476e:	2100      	movs	r1, #0
   d4770:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4772:	4620      	mov	r0, r4
   d4774:	bd70      	pop	{r4, r5, r6, pc}

000d4776 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4776:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4778:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d477a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d477c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d477e:	6043      	str	r3, [r0, #4]
	len = 0;
   d4780:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4782:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4784:	460d      	mov	r5, r1
   d4786:	b139      	cbz	r1, d4798 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4788:	4608      	mov	r0, r1
   d478a:	f001 f8c3 	bl	d5914 <strlen>
   d478e:	4629      	mov	r1, r5
   d4790:	4602      	mov	r2, r0
   d4792:	4620      	mov	r0, r4
   d4794:	f7ff ffd7 	bl	d4746 <_ZN6String4copyEPKcj>
}
   d4798:	4620      	mov	r0, r4
   d479a:	bd38      	pop	{r3, r4, r5, pc}

000d479c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d479c:	b538      	push	{r3, r4, r5, lr}
   d479e:	4605      	mov	r5, r0
	if (buffer) {
   d47a0:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d47a2:	460c      	mov	r4, r1
	if (buffer) {
   d47a4:	b160      	cbz	r0, d47c0 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d47a6:	686a      	ldr	r2, [r5, #4]
   d47a8:	688b      	ldr	r3, [r1, #8]
   d47aa:	429a      	cmp	r2, r3
   d47ac:	d306      	bcc.n	d47bc <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d47ae:	6809      	ldr	r1, [r1, #0]
   d47b0:	f001 f8a8 	bl	d5904 <strcpy>
			len = rhs.len;
   d47b4:	68a3      	ldr	r3, [r4, #8]
   d47b6:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d47b8:	2300      	movs	r3, #0
   d47ba:	e00a      	b.n	d47d2 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d47bc:	f7ff fefe 	bl	d45bc <free>
		}
	}
	buffer = rhs.buffer;
   d47c0:	6823      	ldr	r3, [r4, #0]
   d47c2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d47c4:	6863      	ldr	r3, [r4, #4]
   d47c6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d47c8:	68a3      	ldr	r3, [r4, #8]
   d47ca:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d47cc:	2300      	movs	r3, #0
   d47ce:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d47d0:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d47d2:	60a3      	str	r3, [r4, #8]
   d47d4:	bd38      	pop	{r3, r4, r5, pc}

000d47d6 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d47d6:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d47d8:	b510      	push	{r4, lr}
   d47da:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d47dc:	d001      	beq.n	d47e2 <_ZN6StringaSEOS_+0xc>
   d47de:	f7ff ffdd 	bl	d479c <_ZN6String4moveERS_>
	return *this;
}
   d47e2:	4620      	mov	r0, r4
   d47e4:	bd10      	pop	{r4, pc}

000d47e6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d47e6:	b538      	push	{r3, r4, r5, lr}
   d47e8:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d47ea:	460c      	mov	r4, r1
   d47ec:	b141      	cbz	r1, d4800 <_ZN6StringaSEPKc+0x1a>
   d47ee:	4608      	mov	r0, r1
   d47f0:	f001 f890 	bl	d5914 <strlen>
   d47f4:	4621      	mov	r1, r4
   d47f6:	4602      	mov	r2, r0
   d47f8:	4628      	mov	r0, r5
   d47fa:	f7ff ffa4 	bl	d4746 <_ZN6String4copyEPKcj>
   d47fe:	e001      	b.n	d4804 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4800:	f7ff ff79 	bl	d46f6 <_ZN6String10invalidateEv>

	return *this;
}
   d4804:	4628      	mov	r0, r5
   d4806:	bd38      	pop	{r3, r4, r5, pc}

000d4808 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d4808:	b570      	push	{r4, r5, r6, lr}
   d480a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d480c:	b19a      	cbz	r2, d4836 <_ZNK6String8getBytesEPhjj+0x2e>
   d480e:	b191      	cbz	r1, d4836 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d4810:	6885      	ldr	r5, [r0, #8]
   d4812:	429d      	cmp	r5, r3
   d4814:	d802      	bhi.n	d481c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d4816:	2300      	movs	r3, #0
   d4818:	700b      	strb	r3, [r1, #0]
		return;
   d481a:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d481c:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d481e:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d4820:	6801      	ldr	r1, [r0, #0]
   d4822:	42ac      	cmp	r4, r5
   d4824:	bf28      	it	cs
   d4826:	462c      	movcs	r4, r5
   d4828:	4419      	add	r1, r3
   d482a:	4622      	mov	r2, r4
   d482c:	4630      	mov	r0, r6
   d482e:	f001 f88e 	bl	d594e <strncpy>
	buf[n] = 0;
   d4832:	2300      	movs	r3, #0
   d4834:	5533      	strb	r3, [r6, r4]
   d4836:	bd70      	pop	{r4, r5, r6, pc}

000d4838 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d4838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   d483c:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d483e:	460e      	mov	r6, r1
   d4840:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d4842:	4910      	ldr	r1, [pc, #64]	; (d4884 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d4844:	bf88      	it	hi
   d4846:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d4848:	4615      	mov	r5, r2
   d484a:	4607      	mov	r7, r0
	if (left > right) {
   d484c:	bf84      	itt	hi
   d484e:	4625      	movhi	r5, r4
   d4850:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d4852:	f7ff ff90 	bl	d4776 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d4856:	68b1      	ldr	r1, [r6, #8]
   d4858:	428d      	cmp	r5, r1
   d485a:	d80f      	bhi.n	d487c <_ZNK6String9substringEjj+0x44>
   d485c:	428c      	cmp	r4, r1
   d485e:	bf28      	it	cs
   d4860:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d4862:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   d4864:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d4866:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   d486a:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   d486c:	6831      	ldr	r1, [r6, #0]
   d486e:	4638      	mov	r0, r7
   d4870:	4429      	add	r1, r5
   d4872:	f7ff ffb8 	bl	d47e6 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   d4876:	6833      	ldr	r3, [r6, #0]
   d4878:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   d487c:	4638      	mov	r0, r7
   d487e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4882:	bf00      	nop
   d4884:	000d615e 	.word	0x000d615e

000d4888 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d488a:	4606      	mov	r6, r0
   d488c:	460d      	mov	r5, r1
   d488e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4890:	2400      	movs	r4, #0
  while (size--) {
   d4892:	42bd      	cmp	r5, r7
   d4894:	d00c      	beq.n	d48b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4896:	6833      	ldr	r3, [r6, #0]
   d4898:	f815 1b01 	ldrb.w	r1, [r5], #1
   d489c:	689b      	ldr	r3, [r3, #8]
   d489e:	4630      	mov	r0, r6
   d48a0:	4798      	blx	r3
     if (chunk>=0)
   d48a2:	2800      	cmp	r0, #0
   d48a4:	db01      	blt.n	d48aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d48a6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d48a8:	e7f3      	b.n	d4892 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d48aa:	2c00      	cmp	r4, #0
   d48ac:	bf08      	it	eq
   d48ae:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d48b0:	4620      	mov	r0, r4
   d48b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d48b4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d48b4:	b570      	push	{r4, r5, r6, lr}
   d48b6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d48b8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d48ba:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d48bc:	b149      	cbz	r1, d48d2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d48be:	f001 f829 	bl	d5914 <strlen>
   d48c2:	682b      	ldr	r3, [r5, #0]
   d48c4:	4602      	mov	r2, r0
   d48c6:	4621      	mov	r1, r4
   d48c8:	4628      	mov	r0, r5
   d48ca:	68db      	ldr	r3, [r3, #12]
    }
   d48cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d48d0:	4718      	bx	r3
    }
   d48d2:	bd70      	pop	{r4, r5, r6, pc}

000d48d4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d48d4:	6803      	ldr	r3, [r0, #0]
   d48d6:	689b      	ldr	r3, [r3, #8]
   d48d8:	4718      	bx	r3

000d48da <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d48da:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d48dc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d48de:	4605      	mov	r5, r0
  size_t n = print('\r');
   d48e0:	f7ff fff8 	bl	d48d4 <_ZN5Print5printEc>
  n += print('\n');
   d48e4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d48e6:	4604      	mov	r4, r0
  n += print('\n');
   d48e8:	4628      	mov	r0, r5
   d48ea:	f7ff fff3 	bl	d48d4 <_ZN5Print5printEc>
  return n;
}
   d48ee:	4420      	add	r0, r4
   d48f0:	bd38      	pop	{r3, r4, r5, pc}

000d48f2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d48f2:	b538      	push	{r3, r4, r5, lr}
   d48f4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d48f6:	f7ff ffdd 	bl	d48b4 <_ZN5Print5writeEPKc>
   d48fa:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d48fc:	4628      	mov	r0, r5
   d48fe:	f7ff ffec 	bl	d48da <_ZN5Print7printlnEv>
  return n;
}
   d4902:	4420      	add	r0, r4
   d4904:	bd38      	pop	{r3, r4, r5, pc}

000d4906 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4906:	b530      	push	{r4, r5, lr}
   d4908:	b08b      	sub	sp, #44	; 0x2c
   d490a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d490c:	2100      	movs	r1, #0
   d490e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4912:	2a01      	cmp	r2, #1
   d4914:	bf98      	it	ls
   d4916:	220a      	movls	r2, #10
   d4918:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d491c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4920:	fb05 3312 	mls	r3, r5, r2, r3
   d4924:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4928:	2b09      	cmp	r3, #9
   d492a:	bf94      	ite	ls
   d492c:	3330      	addls	r3, #48	; 0x30
   d492e:	3337      	addhi	r3, #55	; 0x37
   d4930:	b2db      	uxtb	r3, r3
   d4932:	4621      	mov	r1, r4
   d4934:	f804 3901 	strb.w	r3, [r4], #-1
   d4938:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d493a:	2d00      	cmp	r5, #0
   d493c:	d1ee      	bne.n	d491c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d493e:	f7ff ffb9 	bl	d48b4 <_ZN5Print5writeEPKc>
}
   d4942:	b00b      	add	sp, #44	; 0x2c
   d4944:	bd30      	pop	{r4, r5, pc}

000d4946 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4946:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4948:	b92a      	cbnz	r2, d4956 <_ZN5Print5printEmi+0x10>
   d494a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d494c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4950:	689b      	ldr	r3, [r3, #8]
   d4952:	b2c9      	uxtb	r1, r1
   d4954:	4718      	bx	r3
  else return printNumber(n, base);
   d4956:	b2d2      	uxtb	r2, r2
}
   d4958:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d495c:	f7ff bfd3 	b.w	d4906 <_ZN5Print11printNumberEmh>

000d4960 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4960:	f7ff bff1 	b.w	d4946 <_ZN5Print5printEmi>

000d4964 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4964:	b40c      	push	{r2, r3}
   d4966:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d496a:	b087      	sub	sp, #28
   d496c:	af00      	add	r7, sp, #0
   d496e:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4972:	4605      	mov	r5, r0
   d4974:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4978:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d497a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d497c:	4623      	mov	r3, r4
   d497e:	464a      	mov	r2, r9
   d4980:	2114      	movs	r1, #20
   d4982:	1d38      	adds	r0, r7, #4
   d4984:	f7ff fe3a 	bl	d45fc <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4988:	2813      	cmp	r0, #19
   d498a:	d805      	bhi.n	d4998 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d498c:	1d39      	adds	r1, r7, #4
   d498e:	4628      	mov	r0, r5
   d4990:	f7ff ff90 	bl	d48b4 <_ZN5Print5writeEPKc>
   d4994:	4604      	mov	r4, r0
   d4996:	e013      	b.n	d49c0 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4998:	f100 0308 	add.w	r3, r0, #8
   d499c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d49a0:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d49a2:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d49a6:	1c41      	adds	r1, r0, #1
   d49a8:	4623      	mov	r3, r4
   d49aa:	464a      	mov	r2, r9
   d49ac:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d49ae:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d49b0:	f7ff fe24 	bl	d45fc <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d49b4:	4669      	mov	r1, sp
   d49b6:	4628      	mov	r0, r5
   d49b8:	f7ff ff7c 	bl	d48b4 <_ZN5Print5writeEPKc>
   d49bc:	4604      	mov	r4, r0
   d49be:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d49c0:	b11e      	cbz	r6, d49ca <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d49c2:	4628      	mov	r0, r5
   d49c4:	f7ff ff89 	bl	d48da <_ZN5Print7printlnEv>
   d49c8:	4404      	add	r4, r0
    return n;
}
   d49ca:	4620      	mov	r0, r4
   d49cc:	371c      	adds	r7, #28
   d49ce:	46bd      	mov	sp, r7
   d49d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d49d4:	b002      	add	sp, #8
   d49d6:	4770      	bx	lr

000d49d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d49d8:	4b01      	ldr	r3, [pc, #4]	; (d49e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d49da:	4a02      	ldr	r2, [pc, #8]	; (d49e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d49dc:	601a      	str	r2, [r3, #0]
   d49de:	4770      	bx	lr
   d49e0:	2003e3b0 	.word	0x2003e3b0
   d49e4:	000d6200 	.word	0x000d6200

000d49e8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d49e8:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d49ea:	2000      	movs	r0, #0
   d49ec:	f7ff fdc6 	bl	d457c <spark_sync_time_pending>
   d49f0:	b128      	cbz	r0, d49fe <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49f2:	f7ff fdb3 	bl	d455c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d49f6:	f080 0001 	eor.w	r0, r0, #1
   d49fa:	b2c0      	uxtb	r0, r0
   d49fc:	bd08      	pop	{r3, pc}
   d49fe:	2001      	movs	r0, #1
    }
   d4a00:	bd08      	pop	{r3, pc}
	...

000d4a04 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d4a04:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d4a08:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a10:	d40f      	bmi.n	d4a32 <_ZN9TimeClass4zoneEf+0x2e>
   d4a12:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d4a16:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a1e:	dc08      	bgt.n	d4a32 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d4a20:	eddf 7a04 	vldr	s15, [pc, #16]	; d4a34 <_ZN9TimeClass4zoneEf+0x30>
   d4a24:	4b04      	ldr	r3, [pc, #16]	; (d4a38 <_ZN9TimeClass4zoneEf+0x34>)
   d4a26:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4a2a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4a2e:	ed83 0a00 	vstr	s0, [r3]
   d4a32:	4770      	bx	lr
   d4a34:	45610000 	.word	0x45610000
   d4a38:	2003e3bc 	.word	0x2003e3bc

000d4a3c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d4a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d4a3e:	4b0e      	ldr	r3, [pc, #56]	; (d4a78 <_ZN9TimeClass7timeStrEl+0x3c>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	4419      	add	r1, r3
   d4a44:	4b0d      	ldr	r3, [pc, #52]	; (d4a7c <_ZN9TimeClass7timeStrEl+0x40>)
   d4a46:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d4a48:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d4a4a:	a802      	add	r0, sp, #8
   d4a4c:	4419      	add	r1, r3
   d4a4e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d4a52:	f000 fddf 	bl	d5614 <localtime>
        char* ascstr = asctime(calendar_time);
   d4a56:	f000 fd93 	bl	d5580 <asctime>
   d4a5a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d4a5c:	f000 ff5a 	bl	d5914 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d4a60:	4428      	add	r0, r5
   d4a62:	2300      	movs	r3, #0
   d4a64:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d4a68:	4629      	mov	r1, r5
   d4a6a:	4620      	mov	r0, r4
   d4a6c:	f7ff fe83 	bl	d4776 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d4a70:	4620      	mov	r0, r4
   d4a72:	b003      	add	sp, #12
   d4a74:	bd30      	pop	{r4, r5, pc}
   d4a76:	bf00      	nop
   d4a78:	2003e3bc 	.word	0x2003e3bc
   d4a7c:	2003e3b8 	.word	0x2003e3b8

000d4a80 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d4a80:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d4a82:	2000      	movs	r0, #0
   d4a84:	f7ff fbf6 	bl	d4274 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d4a88:	4604      	mov	r4, r0
   d4a8a:	b968      	cbnz	r0, d4aa8 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d4a8c:	f7ff fcda 	bl	d4444 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d4a90:	2801      	cmp	r0, #1
   d4a92:	d10b      	bne.n	d4aac <_ZN9TimeClass7isValidEv+0x2c>
   d4a94:	4620      	mov	r0, r4
   d4a96:	f7ff fced 	bl	d4474 <system_thread_get_state>
   d4a9a:	b938      	cbnz	r0, d4aac <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d4a9c:	f7ff ffa4 	bl	d49e8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4aa0:	b930      	cbnz	r0, d4ab0 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d4aa2:	f7ff fd53 	bl	d454c <spark_process>
   d4aa6:	e7f9      	b.n	d4a9c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d4aa8:	2001      	movs	r0, #1
   d4aaa:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d4aac:	2000      	movs	r0, #0
   d4aae:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d4ab0:	f7ff ff9a 	bl	d49e8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d4ab4:	2000      	movs	r0, #0
   d4ab6:	f7ff fbdd 	bl	d4274 <HAL_RTC_Time_Is_Valid>
   d4aba:	3000      	adds	r0, #0
   d4abc:	bf18      	it	ne
   d4abe:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d4ac0:	bd10      	pop	{r4, pc}

000d4ac2 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d4ac2:	b508      	push	{r3, lr}
    (void)isValid();
   d4ac4:	f7ff ffdc 	bl	d4a80 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d4ac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d4acc:	f7ff bbca 	b.w	d4264 <HAL_RTC_Get_UnixTime>

000d4ad0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4ad0:	4b02      	ldr	r3, [pc, #8]	; (d4adc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4ad2:	681a      	ldr	r2, [r3, #0]
   d4ad4:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4ad6:	601a      	str	r2, [r3, #0]
   d4ad8:	4770      	bx	lr
   d4ada:	bf00      	nop
   d4adc:	2003e2e4 	.word	0x2003e2e4
   d4ae0:	2003e3b4 	.word	0x2003e3b4

000d4ae4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4ae4:	2100      	movs	r1, #0
   d4ae6:	f7ff bcbd 	b.w	d4464 <system_delay_ms>

000d4aea <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4aea:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4aec:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4aee:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4af0:	b113      	cbz	r3, d4af8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4af2:	2203      	movs	r2, #3
   d4af4:	4601      	mov	r1, r0
   d4af6:	4798      	blx	r3
    }
   d4af8:	4620      	mov	r0, r4
   d4afa:	bd10      	pop	{r4, pc}

000d4afc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4afc:	b510      	push	{r4, lr}
   d4afe:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4b00:	f7ff fff3 	bl	d4aea <_ZNSt14_Function_baseD1Ev>
   d4b04:	4620      	mov	r0, r4
   d4b06:	bd10      	pop	{r4, pc}

000d4b08 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b08:	4803      	ldr	r0, [pc, #12]	; (d4b18 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4b0a:	4a04      	ldr	r2, [pc, #16]	; (d4b1c <_GLOBAL__sub_I_RGB+0x14>)
   d4b0c:	4904      	ldr	r1, [pc, #16]	; (d4b20 <_GLOBAL__sub_I_RGB+0x18>)
   d4b0e:	2300      	movs	r3, #0
   d4b10:	6083      	str	r3, [r0, #8]
   d4b12:	f000 bbe7 	b.w	d52e4 <__aeabi_atexit>
   d4b16:	bf00      	nop
   d4b18:	2003e3c0 	.word	0x2003e3c0
   d4b1c:	2003e39c 	.word	0x2003e39c
   d4b20:	000d4afd 	.word	0x000d4afd

000d4b24 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4b24:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4b26:	4b0c      	ldr	r3, [pc, #48]	; (d4b58 <serialEventRun+0x34>)
   d4b28:	b133      	cbz	r3, d4b38 <serialEventRun+0x14>
   d4b2a:	f000 f927 	bl	d4d7c <_Z16_fetch_usbserialv>
   d4b2e:	6803      	ldr	r3, [r0, #0]
   d4b30:	691b      	ldr	r3, [r3, #16]
   d4b32:	4798      	blx	r3
   d4b34:	2800      	cmp	r0, #0
   d4b36:	dc09      	bgt.n	d4b4c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4b38:	4b08      	ldr	r3, [pc, #32]	; (d4b5c <serialEventRun+0x38>)
   d4b3a:	b163      	cbz	r3, d4b56 <serialEventRun+0x32>
   d4b3c:	f000 f984 	bl	d4e48 <_Z22__fetch_global_Serial1v>
   d4b40:	6803      	ldr	r3, [r0, #0]
   d4b42:	691b      	ldr	r3, [r3, #16]
   d4b44:	4798      	blx	r3
   d4b46:	2800      	cmp	r0, #0
   d4b48:	dc03      	bgt.n	d4b52 <serialEventRun+0x2e>
   d4b4a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4b4c:	f3af 8000 	nop.w
   d4b50:	e7f2      	b.n	d4b38 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4b52:	f3af 8000 	nop.w
   d4b56:	bd08      	pop	{r3, pc}
	...

000d4b60 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4b60:	b508      	push	{r3, lr}
	serialEventRun();
   d4b62:	f7ff ffdf 	bl	d4b24 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4b66:	f7ff fb75 	bl	d4254 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4b6a:	4b01      	ldr	r3, [pc, #4]	; (d4b70 <_post_loop+0x10>)
   d4b6c:	6018      	str	r0, [r3, #0]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	2003e70c 	.word	0x2003e70c

000d4b74 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4b74:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4b76:	2300      	movs	r3, #0
   d4b78:	9300      	str	r3, [sp, #0]
   d4b7a:	461a      	mov	r2, r3
   d4b7c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4b80:	f7ff fc8a 	bl	d4498 <system_ctrl_set_result>
}
   d4b84:	b003      	add	sp, #12
   d4b86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4b8c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4b8c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4b8e:	8843      	ldrh	r3, [r0, #2]
   d4b90:	2b0a      	cmp	r3, #10
   d4b92:	d008      	beq.n	d4ba6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4b94:	2b50      	cmp	r3, #80	; 0x50
   d4b96:	d109      	bne.n	d4bac <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4b98:	4b09      	ldr	r3, [pc, #36]	; (d4bc0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4b9a:	681b      	ldr	r3, [r3, #0]
   d4b9c:	b13b      	cbz	r3, d4bae <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4b9e:	b003      	add	sp, #12
   d4ba0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4ba4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4ba6:	f7ff ffe5 	bl	d4b74 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4baa:	e006      	b.n	d4bba <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4bac:	2300      	movs	r3, #0
   d4bae:	9300      	str	r3, [sp, #0]
   d4bb0:	461a      	mov	r2, r3
   d4bb2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4bb6:	f7ff fc6f 	bl	d4498 <system_ctrl_set_result>
        break;
    }
}
   d4bba:	b003      	add	sp, #12
   d4bbc:	f85d fb04 	ldr.w	pc, [sp], #4
   d4bc0:	2003e3d0 	.word	0x2003e3d0

000d4bc4 <module_user_init_hook>:

void module_user_init_hook()
{
   d4bc4:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4bc6:	f7ff fb3d 	bl	d4244 <HAL_RNG_GetRandomNumber>
   d4bca:	4604      	mov	r4, r0
    srand(seed);
   d4bcc:	f000 fe2e 	bl	d582c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4bd0:	4b07      	ldr	r3, [pc, #28]	; (d4bf0 <module_user_init_hook+0x2c>)
   d4bd2:	b113      	cbz	r3, d4bda <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4bda:	2100      	movs	r1, #0
   d4bdc:	4804      	ldr	r0, [pc, #16]	; (d4bf0 <module_user_init_hook+0x2c>)
   d4bde:	f7ff fcdd 	bl	d459c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4be2:	2100      	movs	r1, #0
   d4be4:	4803      	ldr	r0, [pc, #12]	; (d4bf4 <module_user_init_hook+0x30>)
}
   d4be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4bea:	f7ff bc4b 	b.w	d4484 <system_ctrl_set_app_request_handler>
   d4bee:	bf00      	nop
   d4bf0:	00000000 	.word	0x00000000
   d4bf4:	000d4b8d 	.word	0x000d4b8d

000d4bf8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4bf8:	4770      	bx	lr

000d4bfa <_ZN9IPAddressD0Ev>:
   d4bfa:	b510      	push	{r4, lr}
   d4bfc:	4604      	mov	r4, r0
   d4bfe:	f7ff fa4a 	bl	d4096 <_ZdlPv>
   d4c02:	4620      	mov	r0, r4
   d4c04:	bd10      	pop	{r4, pc}

000d4c06 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c06:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c08:	7d03      	ldrb	r3, [r0, #20]
   d4c0a:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c0c:	b08d      	sub	sp, #52	; 0x34
   d4c0e:	460e      	mov	r6, r1
   d4c10:	f100 0704 	add.w	r7, r0, #4
   d4c14:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c18:	d002      	beq.n	d4c20 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4c1a:	f100 0508 	add.w	r5, r0, #8
   d4c1e:	e018      	b.n	d4c52 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c20:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c22:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c24:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c28:	232f      	movs	r3, #47	; 0x2f
   d4c2a:	462a      	mov	r2, r5
   d4c2c:	200a      	movs	r0, #10
   d4c2e:	f7ff fb51 	bl	d42d4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c32:	4628      	mov	r0, r5
   d4c34:	f000 fe6e 	bl	d5914 <strlen>
   d4c38:	6833      	ldr	r3, [r6, #0]
   d4c3a:	4602      	mov	r2, r0
   d4c3c:	68db      	ldr	r3, [r3, #12]
   d4c3e:	4629      	mov	r1, r5
   d4c40:	4630      	mov	r0, r6
   d4c42:	4798      	blx	r3
   d4c44:	e00f      	b.n	d4c66 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4c46:	b124      	cbz	r4, d4c52 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4c48:	212e      	movs	r1, #46	; 0x2e
   d4c4a:	4630      	mov	r0, r6
   d4c4c:	f7ff fe42 	bl	d48d4 <_ZN5Print5printEc>
   d4c50:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4c52:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4c56:	220a      	movs	r2, #10
   d4c58:	4630      	mov	r0, r6
   d4c5a:	f7ff fe81 	bl	d4960 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c5e:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c60:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c62:	d1f0      	bne.n	d4c46 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c64:	4620      	mov	r0, r4
    }
    return n;
}
   d4c66:	b00d      	add	sp, #52	; 0x34
   d4c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4c6c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4c6c:	b510      	push	{r4, lr}
   d4c6e:	4b05      	ldr	r3, [pc, #20]	; (d4c84 <_ZN9IPAddressC1Ev+0x18>)
   d4c70:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4c72:	2211      	movs	r2, #17
   d4c74:	f840 3b04 	str.w	r3, [r0], #4
   d4c78:	2100      	movs	r1, #0
   d4c7a:	f000 fdce 	bl	d581a <memset>
{
    clear();
}
   d4c7e:	4620      	mov	r0, r4
   d4c80:	bd10      	pop	{r4, pc}
   d4c82:	bf00      	nop
   d4c84:	000d6258 	.word	0x000d6258

000d4c88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4c88:	4603      	mov	r3, r0
   d4c8a:	4a07      	ldr	r2, [pc, #28]	; (d4ca8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4c8c:	b510      	push	{r4, lr}
   d4c8e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4c92:	f101 0210 	add.w	r2, r1, #16
   d4c96:	f851 4b04 	ldr.w	r4, [r1], #4
   d4c9a:	f843 4b04 	str.w	r4, [r3], #4
   d4c9e:	4291      	cmp	r1, r2
   d4ca0:	d1f9      	bne.n	d4c96 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4ca2:	780a      	ldrb	r2, [r1, #0]
   d4ca4:	701a      	strb	r2, [r3, #0]
}
   d4ca6:	bd10      	pop	{r4, pc}
   d4ca8:	000d6258 	.word	0x000d6258

000d4cac <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4cac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4cae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4cb2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4cb6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4cba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4cbe:	2304      	movs	r3, #4
   d4cc0:	6041      	str	r1, [r0, #4]
   d4cc2:	7503      	strb	r3, [r0, #20]
   d4cc4:	bd10      	pop	{r4, pc}

000d4cc6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4cc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4cc8:	780d      	ldrb	r5, [r1, #0]
   d4cca:	788b      	ldrb	r3, [r1, #2]
   d4ccc:	784a      	ldrb	r2, [r1, #1]
   d4cce:	78c9      	ldrb	r1, [r1, #3]
   d4cd0:	9100      	str	r1, [sp, #0]
   d4cd2:	4629      	mov	r1, r5
   d4cd4:	f7ff ffea 	bl	d4cac <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4cd8:	b003      	add	sp, #12
   d4cda:	bd30      	pop	{r4, r5, pc}

000d4cdc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4cdc:	7441      	strb	r1, [r0, #17]
   d4cde:	4770      	bx	lr

000d4ce0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4ce0:	4770      	bx	lr

000d4ce2 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d4ce2:	2100      	movs	r1, #0
   d4ce4:	7c00      	ldrb	r0, [r0, #16]
   d4ce6:	f7ff bb8d 	b.w	d4404 <HAL_USB_USART_Receive_Data>

000d4cea <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d4cea:	2101      	movs	r1, #1
   d4cec:	7c00      	ldrb	r0, [r0, #16]
   d4cee:	f7ff bb89 	b.w	d4404 <HAL_USB_USART_Receive_Data>

000d4cf2 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d4cf2:	7c00      	ldrb	r0, [r0, #16]
   d4cf4:	f7ff bb7e 	b.w	d43f4 <HAL_USB_USART_Available_Data_For_Write>

000d4cf8 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d4cf8:	7c00      	ldrb	r0, [r0, #16]
   d4cfa:	f7ff bb73 	b.w	d43e4 <HAL_USB_USART_Available_Data>

000d4cfe <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d4cfe:	b538      	push	{r3, r4, r5, lr}
   d4d00:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4d02:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d4d04:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4d06:	f7ff fb75 	bl	d43f4 <HAL_USB_USART_Available_Data_For_Write>
   d4d0a:	2800      	cmp	r0, #0
   d4d0c:	dc01      	bgt.n	d4d12 <_ZN9USBSerial5writeEh+0x14>
   d4d0e:	7c60      	ldrb	r0, [r4, #17]
   d4d10:	b120      	cbz	r0, d4d1c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d4d12:	4629      	mov	r1, r5
   d4d14:	7c20      	ldrb	r0, [r4, #16]
   d4d16:	f7ff fb7d 	bl	d4414 <HAL_USB_USART_Send_Data>
    return 1;
   d4d1a:	2001      	movs	r0, #1
  }
  return 0;
}
   d4d1c:	bd38      	pop	{r3, r4, r5, pc}

000d4d1e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4d1e:	7c00      	ldrb	r0, [r0, #16]
   d4d20:	f7ff bb80 	b.w	d4424 <HAL_USB_USART_Flush_Data>

000d4d24 <_ZN9USBSerialD0Ev>:
   d4d24:	b510      	push	{r4, lr}
   d4d26:	4604      	mov	r4, r0
   d4d28:	f7ff f9b5 	bl	d4096 <_ZdlPv>
   d4d2c:	4620      	mov	r0, r4
   d4d2e:	bd10      	pop	{r4, pc}

000d4d30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4d30:	b510      	push	{r4, lr}
   d4d32:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4d34:	2300      	movs	r3, #0
   d4d36:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d3c:	60a3      	str	r3, [r4, #8]
   d4d3e:	4b05      	ldr	r3, [pc, #20]	; (d4d54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4d40:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4d42:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4d44:	4608      	mov	r0, r1
{
  _serial = serial;
   d4d46:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4d48:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4d4a:	4611      	mov	r1, r2
   d4d4c:	f7ff fb3a 	bl	d43c4 <HAL_USB_USART_Init>
}
   d4d50:	4620      	mov	r0, r4
   d4d52:	bd10      	pop	{r4, pc}
   d4d54:	000d626c 	.word	0x000d626c

000d4d58 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4d58:	2200      	movs	r2, #0
   d4d5a:	7c00      	ldrb	r0, [r0, #16]
   d4d5c:	f7ff bb3a 	b.w	d43d4 <HAL_USB_USART_Begin>

000d4d60 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d4d60:	7c00      	ldrb	r0, [r0, #16]
   d4d62:	f7ff bb67 	b.w	d4434 <HAL_USB_USART_Is_Enabled>

000d4d66 <_ZN9USBSerialcvbEv>:
{
	return HAL_USB_USART_Receive_Data(_serial, true);
}

USBSerial::operator bool() {
  return isEnabled();
   d4d66:	f7ff bffb 	b.w	d4d60 <_ZN9USBSerial9isEnabledEv>

000d4d6a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4d6a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4d6c:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4d6e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4d70:	2100      	movs	r1, #0
   d4d72:	f000 fd52 	bl	d581a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4d76:	4620      	mov	r0, r4
   d4d78:	bd10      	pop	{r4, pc}
	...

000d4d7c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4d7c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4d7e:	4d0e      	ldr	r5, [pc, #56]	; (d4db8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4d80:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4d82:	a801      	add	r0, sp, #4
   d4d84:	f7ff fff1 	bl	d4d6a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4d88:	6829      	ldr	r1, [r5, #0]
   d4d8a:	f011 0401 	ands.w	r4, r1, #1
   d4d8e:	d110      	bne.n	d4db2 <_Z16_fetch_usbserialv+0x36>
   d4d90:	4628      	mov	r0, r5
   d4d92:	f7ff f984 	bl	d409e <__cxa_guard_acquire>
   d4d96:	b160      	cbz	r0, d4db2 <_Z16_fetch_usbserialv+0x36>
   d4d98:	aa01      	add	r2, sp, #4
   d4d9a:	4621      	mov	r1, r4
   d4d9c:	4807      	ldr	r0, [pc, #28]	; (d4dbc <_Z16_fetch_usbserialv+0x40>)
   d4d9e:	f7ff ffc7 	bl	d4d30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4da2:	4628      	mov	r0, r5
   d4da4:	f7ff f980 	bl	d40a8 <__cxa_guard_release>
   d4da8:	4a05      	ldr	r2, [pc, #20]	; (d4dc0 <_Z16_fetch_usbserialv+0x44>)
   d4daa:	4906      	ldr	r1, [pc, #24]	; (d4dc4 <_Z16_fetch_usbserialv+0x48>)
   d4dac:	4803      	ldr	r0, [pc, #12]	; (d4dbc <_Z16_fetch_usbserialv+0x40>)
   d4dae:	f000 fa99 	bl	d52e4 <__aeabi_atexit>
	return _usbserial;
}
   d4db2:	4802      	ldr	r0, [pc, #8]	; (d4dbc <_Z16_fetch_usbserialv+0x40>)
   d4db4:	b007      	add	sp, #28
   d4db6:	bd30      	pop	{r4, r5, pc}
   d4db8:	2003e3d4 	.word	0x2003e3d4
   d4dbc:	2003e3d8 	.word	0x2003e3d8
   d4dc0:	2003e39c 	.word	0x2003e39c
   d4dc4:	000d4ce1 	.word	0x000d4ce1

000d4dc8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4dc8:	4770      	bx	lr

000d4dca <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4dca:	7441      	strb	r1, [r0, #17]
   d4dcc:	4770      	bx	lr

000d4dce <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d4dce:	7c00      	ldrb	r0, [r0, #16]
   d4dd0:	f7ff bab8 	b.w	d4344 <HAL_USART_Available_Data_For_Write>

000d4dd4 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d4dd4:	7c00      	ldrb	r0, [r0, #16]
   d4dd6:	f7ff ba95 	b.w	d4304 <HAL_USART_Available_Data>

000d4dda <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d4dda:	7c00      	ldrb	r0, [r0, #16]
   d4ddc:	f7ff baa2 	b.w	d4324 <HAL_USART_Peek_Data>

000d4de0 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d4de0:	7c00      	ldrb	r0, [r0, #16]
   d4de2:	f7ff ba97 	b.w	d4314 <HAL_USART_Read_Data>

000d4de6 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4de6:	7c00      	ldrb	r0, [r0, #16]
   d4de8:	f7ff baa4 	b.w	d4334 <HAL_USART_Flush_Data>

000d4dec <_ZN11USARTSerialD0Ev>:
   d4dec:	b510      	push	{r4, lr}
   d4dee:	4604      	mov	r4, r0
   d4df0:	f7ff f951 	bl	d4096 <_ZdlPv>
   d4df4:	4620      	mov	r0, r4
   d4df6:	bd10      	pop	{r4, pc}

000d4df8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4df8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4dfa:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4dfc:	4604      	mov	r4, r0
   d4dfe:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4e00:	b925      	cbnz	r5, d4e0c <_ZN11USARTSerial5writeEh+0x14>
   d4e02:	7c00      	ldrb	r0, [r0, #16]
   d4e04:	f7ff fa9e 	bl	d4344 <HAL_USART_Available_Data_For_Write>
   d4e08:	2800      	cmp	r0, #0
   d4e0a:	dd05      	ble.n	d4e18 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4e0c:	4631      	mov	r1, r6
   d4e0e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4e10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4e14:	f7ff ba6e 	b.w	d42f4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4e18:	4628      	mov	r0, r5
   d4e1a:	bd70      	pop	{r4, r5, r6, pc}

000d4e1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4e1c:	b510      	push	{r4, lr}
   d4e1e:	4604      	mov	r4, r0
   d4e20:	4608      	mov	r0, r1
   d4e22:	4611      	mov	r1, r2
   d4e24:	2200      	movs	r2, #0
   d4e26:	6062      	str	r2, [r4, #4]
   d4e28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e2c:	60a2      	str	r2, [r4, #8]
   d4e2e:	4a05      	ldr	r2, [pc, #20]	; (d4e44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4e30:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4e32:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4e34:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4e36:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4e38:	461a      	mov	r2, r3
   d4e3a:	f7ff fa53 	bl	d42e4 <HAL_USART_Init>
}
   d4e3e:	4620      	mov	r0, r4
   d4e40:	bd10      	pop	{r4, pc}
   d4e42:	bf00      	nop
   d4e44:	000d629c 	.word	0x000d629c

000d4e48 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4e48:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4e4a:	4d0c      	ldr	r5, [pc, #48]	; (d4e7c <_Z22__fetch_global_Serial1v+0x34>)
   d4e4c:	6829      	ldr	r1, [r5, #0]
   d4e4e:	f011 0401 	ands.w	r4, r1, #1
   d4e52:	d111      	bne.n	d4e78 <_Z22__fetch_global_Serial1v+0x30>
   d4e54:	4628      	mov	r0, r5
   d4e56:	f7ff f922 	bl	d409e <__cxa_guard_acquire>
   d4e5a:	b168      	cbz	r0, d4e78 <_Z22__fetch_global_Serial1v+0x30>
   d4e5c:	4a08      	ldr	r2, [pc, #32]	; (d4e80 <_Z22__fetch_global_Serial1v+0x38>)
   d4e5e:	4b09      	ldr	r3, [pc, #36]	; (d4e84 <_Z22__fetch_global_Serial1v+0x3c>)
   d4e60:	4809      	ldr	r0, [pc, #36]	; (d4e88 <_Z22__fetch_global_Serial1v+0x40>)
   d4e62:	4621      	mov	r1, r4
   d4e64:	f7ff ffda 	bl	d4e1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4e68:	4628      	mov	r0, r5
   d4e6a:	f7ff f91d 	bl	d40a8 <__cxa_guard_release>
   d4e6e:	4a07      	ldr	r2, [pc, #28]	; (d4e8c <_Z22__fetch_global_Serial1v+0x44>)
   d4e70:	4907      	ldr	r1, [pc, #28]	; (d4e90 <_Z22__fetch_global_Serial1v+0x48>)
   d4e72:	4805      	ldr	r0, [pc, #20]	; (d4e88 <_Z22__fetch_global_Serial1v+0x40>)
   d4e74:	f000 fa36 	bl	d52e4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4e78:	4803      	ldr	r0, [pc, #12]	; (d4e88 <_Z22__fetch_global_Serial1v+0x40>)
   d4e7a:	bd38      	pop	{r3, r4, r5, pc}
   d4e7c:	2003e484 	.word	0x2003e484
   d4e80:	2003e488 	.word	0x2003e488
   d4e84:	2003e400 	.word	0x2003e400
   d4e88:	2003e3ec 	.word	0x2003e3ec
   d4e8c:	2003e39c 	.word	0x2003e39c
   d4e90:	000d4dc9 	.word	0x000d4dc9

000d4e94 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4e94:	4770      	bx	lr

000d4e96 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e98:	4606      	mov	r6, r0
   d4e9a:	4615      	mov	r5, r2
   d4e9c:	460c      	mov	r4, r1
   d4e9e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4ea0:	42bc      	cmp	r4, r7
   d4ea2:	d006      	beq.n	d4eb2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4ea4:	6833      	ldr	r3, [r6, #0]
   d4ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4eaa:	689b      	ldr	r3, [r3, #8]
   d4eac:	4630      	mov	r0, r6
   d4eae:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4eb0:	e7f6      	b.n	d4ea0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4eb2:	4628      	mov	r0, r5
   d4eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4eb6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4eb6:	2200      	movs	r2, #0
   d4eb8:	7c00      	ldrb	r0, [r0, #16]
   d4eba:	f7ff ba53 	b.w	d4364 <HAL_I2C_Write_Data>

000d4ebe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4ebe:	2100      	movs	r1, #0
   d4ec0:	7c00      	ldrb	r0, [r0, #16]
   d4ec2:	f7ff ba57 	b.w	d4374 <HAL_I2C_Available_Data>

000d4ec6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4ec6:	2100      	movs	r1, #0
   d4ec8:	7c00      	ldrb	r0, [r0, #16]
   d4eca:	f7ff ba5b 	b.w	d4384 <HAL_I2C_Read_Data>

000d4ece <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4ece:	2100      	movs	r1, #0
   d4ed0:	7c00      	ldrb	r0, [r0, #16]
   d4ed2:	f7ff ba5f 	b.w	d4394 <HAL_I2C_Peek_Data>

000d4ed6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4ed6:	2100      	movs	r1, #0
   d4ed8:	7c00      	ldrb	r0, [r0, #16]
   d4eda:	f7ff ba63 	b.w	d43a4 <HAL_I2C_Flush_Data>

000d4ede <_ZN7TwoWireD0Ev>:
   d4ede:	b510      	push	{r4, lr}
   d4ee0:	4604      	mov	r4, r0
   d4ee2:	f7ff f8d8 	bl	d4096 <_ZdlPv>
   d4ee6:	4620      	mov	r0, r4
   d4ee8:	bd10      	pop	{r4, pc}
	...

000d4eec <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4eec:	b510      	push	{r4, lr}
   d4eee:	4604      	mov	r4, r0
   d4ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4ef4:	4608      	mov	r0, r1
   d4ef6:	60a3      	str	r3, [r4, #8]
   d4ef8:	2100      	movs	r1, #0
   d4efa:	4b04      	ldr	r3, [pc, #16]	; (d4f0c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4efc:	7420      	strb	r0, [r4, #16]
   d4efe:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4f00:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4f02:	f7ff fa57 	bl	d43b4 <HAL_I2C_Init>

}
   d4f06:	4620      	mov	r0, r4
   d4f08:	bd10      	pop	{r4, pc}
   d4f0a:	bf00      	nop
   d4f0c:	000d62cc 	.word	0x000d62cc

000d4f10 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4f10:	2300      	movs	r3, #0
   d4f12:	461a      	mov	r2, r3
   d4f14:	4619      	mov	r1, r3
   d4f16:	7c00      	ldrb	r0, [r0, #16]
   d4f18:	f7ff ba1c 	b.w	d4354 <HAL_I2C_Begin>

000d4f1c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d4f1c:	b510      	push	{r4, lr}
  if (0 == max) {
   d4f1e:	4604      	mov	r4, r0
   d4f20:	b130      	cbz	r0, d4f30 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d4f22:	f000 fcab 	bl	d587c <rand>
   d4f26:	fb90 f3f4 	sdiv	r3, r0, r4
   d4f2a:	fb03 0014 	mls	r0, r3, r4, r0
   d4f2e:	bd10      	pop	{r4, pc}
}
   d4f30:	bd10      	pop	{r4, pc}

000d4f32 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d4f32:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d4f34:	b510      	push	{r4, lr}
   d4f36:	4604      	mov	r4, r0
  if (min >= max) {
   d4f38:	da04      	bge.n	d4f44 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d4f3a:	1a08      	subs	r0, r1, r0
   d4f3c:	f7ff ffee 	bl	d4f1c <_Z6randomi>
   d4f40:	4420      	add	r0, r4
   d4f42:	bd10      	pop	{r4, pc}
}
   d4f44:	bd10      	pop	{r4, pc}

000d4f46 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f46:	2200      	movs	r2, #0
   d4f48:	4611      	mov	r1, r2
   d4f4a:	6840      	ldr	r0, [r0, #4]
   d4f4c:	f7ff bae6 	b.w	d451c <network_listening>

000d4f50 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f50:	2200      	movs	r2, #0
   d4f52:	4611      	mov	r1, r2
   d4f54:	6840      	ldr	r0, [r0, #4]
   d4f56:	f7ff baf1 	b.w	d453c <network_get_listen_timeout>

000d4f5a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f5a:	2200      	movs	r2, #0
   d4f5c:	6840      	ldr	r0, [r0, #4]
   d4f5e:	f7ff bae5 	b.w	d452c <network_set_listen_timeout>

000d4f62 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f62:	2200      	movs	r2, #0
   d4f64:	f081 0101 	eor.w	r1, r1, #1
   d4f68:	6840      	ldr	r0, [r0, #4]
   d4f6a:	f7ff bacf 	b.w	d450c <network_listen>

000d4f6e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4f6e:	2300      	movs	r3, #0
   d4f70:	461a      	mov	r2, r3
   d4f72:	4619      	mov	r1, r3
   d4f74:	6840      	ldr	r0, [r0, #4]
   d4f76:	f7ff bac1 	b.w	d44fc <network_off>

000d4f7a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4f7a:	2300      	movs	r3, #0
   d4f7c:	461a      	mov	r2, r3
   d4f7e:	4619      	mov	r1, r3
   d4f80:	6840      	ldr	r0, [r0, #4]
   d4f82:	f7ff bab3 	b.w	d44ec <network_on>

000d4f86 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f86:	2200      	movs	r2, #0
   d4f88:	4611      	mov	r1, r2
   d4f8a:	6840      	ldr	r0, [r0, #4]
   d4f8c:	f7ff baa6 	b.w	d44dc <network_ready>

000d4f90 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f90:	2200      	movs	r2, #0
   d4f92:	4611      	mov	r1, r2
   d4f94:	6840      	ldr	r0, [r0, #4]
   d4f96:	f7ff ba91 	b.w	d44bc <network_connecting>

000d4f9a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f9a:	2200      	movs	r2, #0
   d4f9c:	2102      	movs	r1, #2
   d4f9e:	6840      	ldr	r0, [r0, #4]
   d4fa0:	f7ff ba94 	b.w	d44cc <network_disconnect>

000d4fa4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4fa4:	2300      	movs	r3, #0
   d4fa6:	461a      	mov	r2, r3
   d4fa8:	6840      	ldr	r0, [r0, #4]
   d4faa:	f7ff ba7f 	b.w	d44ac <network_connect>

000d4fae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4fae:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4fb0:	4605      	mov	r5, r0
   d4fb2:	b178      	cbz	r0, d4fd4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4fb4:	6804      	ldr	r4, [r0, #0]
   d4fb6:	b144      	cbz	r4, d4fca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    ~_Function_base()
    {
      if (_M_manager)
   d4fb8:	68a3      	ldr	r3, [r4, #8]
   d4fba:	b11b      	cbz	r3, d4fc4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4fbc:	2203      	movs	r2, #3
   d4fbe:	4621      	mov	r1, r4
   d4fc0:	4620      	mov	r0, r4
   d4fc2:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	f7ff f866 	bl	d4096 <_ZdlPv>
   d4fca:	4628      	mov	r0, r5
      }
   d4fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4fd0:	f7ff b861 	b.w	d4096 <_ZdlPv>
   d4fd4:	bd38      	pop	{r3, r4, r5, pc}

000d4fd6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d4fd6:	b110      	cbz	r0, d4fde <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d4fd8:	6803      	ldr	r3, [r0, #0]
   d4fda:	685b      	ldr	r3, [r3, #4]
   d4fdc:	4718      	bx	r3
   d4fde:	4770      	bx	lr

000d4fe0 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4fe0:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4fe2:	6803      	ldr	r3, [r0, #0]
   d4fe4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4fe6:	b1bb      	cbz	r3, d5018 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4fe8:	6858      	ldr	r0, [r3, #4]
   d4fea:	f7ff f94b 	bl	d4284 <os_thread_is_current>
   d4fee:	b978      	cbnz	r0, d5010 <_ZN6ThreadD1Ev+0x30>
   d4ff0:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4ff2:	7c5a      	ldrb	r2, [r3, #17]
   d4ff4:	b912      	cbnz	r2, d4ffc <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4ff6:	6858      	ldr	r0, [r3, #4]
   d4ff8:	f7ff f94c 	bl	d4294 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4ffc:	6823      	ldr	r3, [r4, #0]
   d4ffe:	6858      	ldr	r0, [r3, #4]
   d5000:	f7ff f950 	bl	d42a4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5004:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5006:	2300      	movs	r3, #0
   d5008:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d500a:	b128      	cbz	r0, d5018 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d500c:	f7ff ffcf 	bl	d4fae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5010:	6820      	ldr	r0, [r4, #0]
   d5012:	b108      	cbz	r0, d5018 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5014:	f7ff ffcb 	bl	d4fae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5018:	4620      	mov	r0, r4
   d501a:	bd10      	pop	{r4, pc}

000d501c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d501c:	b538      	push	{r3, r4, r5, lr}
   d501e:	4b0b      	ldr	r3, [pc, #44]	; (d504c <_ZN5spark9MeshClassD1Ev+0x30>)
   d5020:	6003      	str	r3, [r0, #0]
   d5022:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5024:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5028:	b108      	cbz	r0, d502e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d502a:	f7ff f836 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d502e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5032:	b12d      	cbz	r5, d5040 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5034:	4628      	mov	r0, r5
   d5036:	f7ff ffd3 	bl	d4fe0 <_ZN6ThreadD1Ev>
   d503a:	4628      	mov	r0, r5
   d503c:	f7ff f82b 	bl	d4096 <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5040:	68a0      	ldr	r0, [r4, #8]
   d5042:	b108      	cbz	r0, d5048 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d5044:	f7ff ffc7 	bl	d4fd6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5048:	4620      	mov	r0, r4
   d504a:	bd38      	pop	{r3, r4, r5, pc}
   d504c:	000d62f4 	.word	0x000d62f4

000d5050 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5050:	b538      	push	{r3, r4, r5, lr}
   d5052:	4c0d      	ldr	r4, [pc, #52]	; (d5088 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5054:	4b0d      	ldr	r3, [pc, #52]	; (d508c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5056:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5058:	2500      	movs	r5, #0
   d505a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d505c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5060:	6063      	str	r3, [r4, #4]
   d5062:	60a5      	str	r5, [r4, #8]
   d5064:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5068:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d506c:	f7ff f92a 	bl	d42c4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5070:	4b07      	ldr	r3, [pc, #28]	; (d5090 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5072:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5076:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5078:	4620      	mov	r0, r4
   d507a:	4a06      	ldr	r2, [pc, #24]	; (d5094 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d507c:	4906      	ldr	r1, [pc, #24]	; (d5098 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d507e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5082:	f000 b92f 	b.w	d52e4 <__aeabi_atexit>
   d5086:	bf00      	nop
   d5088:	2003e50c 	.word	0x2003e50c
   d508c:	000d635c 	.word	0x000d635c
   d5090:	000d62f4 	.word	0x000d62f4
   d5094:	2003e39c 	.word	0x2003e39c
   d5098:	000d501d 	.word	0x000d501d

000d509c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d509c:	2200      	movs	r2, #0
   d509e:	4611      	mov	r1, r2
   d50a0:	6840      	ldr	r0, [r0, #4]
   d50a2:	f7ff ba1b 	b.w	d44dc <network_ready>

000d50a6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50a6:	2200      	movs	r2, #0
   d50a8:	4611      	mov	r1, r2
   d50aa:	6840      	ldr	r0, [r0, #4]
   d50ac:	f7ff ba36 	b.w	d451c <network_listening>

000d50b0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d50b0:	2200      	movs	r2, #0
   d50b2:	4611      	mov	r1, r2
   d50b4:	6840      	ldr	r0, [r0, #4]
   d50b6:	f7ff ba41 	b.w	d453c <network_get_listen_timeout>

000d50ba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d50ba:	2200      	movs	r2, #0
   d50bc:	6840      	ldr	r0, [r0, #4]
   d50be:	f7ff ba35 	b.w	d452c <network_set_listen_timeout>

000d50c2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d50c2:	2200      	movs	r2, #0
   d50c4:	f081 0101 	eor.w	r1, r1, #1
   d50c8:	6840      	ldr	r0, [r0, #4]
   d50ca:	f7ff ba1f 	b.w	d450c <network_listen>

000d50ce <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d50ce:	2300      	movs	r3, #0
   d50d0:	461a      	mov	r2, r3
   d50d2:	4619      	mov	r1, r3
   d50d4:	6840      	ldr	r0, [r0, #4]
   d50d6:	f7ff ba11 	b.w	d44fc <network_off>

000d50da <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d50da:	2300      	movs	r3, #0
   d50dc:	461a      	mov	r2, r3
   d50de:	4619      	mov	r1, r3
   d50e0:	6840      	ldr	r0, [r0, #4]
   d50e2:	f7ff ba03 	b.w	d44ec <network_on>

000d50e6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d50e6:	2200      	movs	r2, #0
   d50e8:	4611      	mov	r1, r2
   d50ea:	6840      	ldr	r0, [r0, #4]
   d50ec:	f7ff b9e6 	b.w	d44bc <network_connecting>

000d50f0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d50f0:	2200      	movs	r2, #0
   d50f2:	2102      	movs	r1, #2
   d50f4:	6840      	ldr	r0, [r0, #4]
   d50f6:	f7ff b9e9 	b.w	d44cc <network_disconnect>

000d50fa <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d50fa:	2300      	movs	r3, #0
   d50fc:	461a      	mov	r2, r3
   d50fe:	6840      	ldr	r0, [r0, #4]
   d5100:	f7ff b9d4 	b.w	d44ac <network_connect>

000d5104 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5104:	4b02      	ldr	r3, [pc, #8]	; (d5110 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5106:	2204      	movs	r2, #4
   d5108:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d510a:	4a02      	ldr	r2, [pc, #8]	; (d5114 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d510c:	601a      	str	r2, [r3, #0]
   d510e:	4770      	bx	lr
   d5110:	2003e6dc 	.word	0x2003e6dc
   d5114:	000d6328 	.word	0x000d6328

000d5118 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5118:	2300      	movs	r3, #0
   d511a:	461a      	mov	r2, r3
   d511c:	6840      	ldr	r0, [r0, #4]
   d511e:	f7ff b9c5 	b.w	d44ac <network_connect>

000d5122 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5122:	2200      	movs	r2, #0
   d5124:	2102      	movs	r1, #2
   d5126:	6840      	ldr	r0, [r0, #4]
   d5128:	f7ff b9d0 	b.w	d44cc <network_disconnect>

000d512c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d512c:	2200      	movs	r2, #0
   d512e:	4611      	mov	r1, r2
   d5130:	6840      	ldr	r0, [r0, #4]
   d5132:	f7ff b9c3 	b.w	d44bc <network_connecting>

000d5136 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5136:	2200      	movs	r2, #0
   d5138:	4611      	mov	r1, r2
   d513a:	6840      	ldr	r0, [r0, #4]
   d513c:	f7ff b9ce 	b.w	d44dc <network_ready>

000d5140 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5140:	2300      	movs	r3, #0
   d5142:	461a      	mov	r2, r3
   d5144:	4619      	mov	r1, r3
   d5146:	6840      	ldr	r0, [r0, #4]
   d5148:	f7ff b9d0 	b.w	d44ec <network_on>

000d514c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d514c:	2300      	movs	r3, #0
   d514e:	461a      	mov	r2, r3
   d5150:	4619      	mov	r1, r3
   d5152:	6840      	ldr	r0, [r0, #4]
   d5154:	f7ff b9d2 	b.w	d44fc <network_off>

000d5158 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5158:	2200      	movs	r2, #0
   d515a:	f081 0101 	eor.w	r1, r1, #1
   d515e:	6840      	ldr	r0, [r0, #4]
   d5160:	f7ff b9d4 	b.w	d450c <network_listen>

000d5164 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5164:	2200      	movs	r2, #0
   d5166:	6840      	ldr	r0, [r0, #4]
   d5168:	f7ff b9e0 	b.w	d452c <network_set_listen_timeout>

000d516c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d516c:	2200      	movs	r2, #0
   d516e:	4611      	mov	r1, r2
   d5170:	6840      	ldr	r0, [r0, #4]
   d5172:	f7ff b9e3 	b.w	d453c <network_get_listen_timeout>

000d5176 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5176:	2200      	movs	r2, #0
   d5178:	4611      	mov	r1, r2
   d517a:	6840      	ldr	r0, [r0, #4]
   d517c:	f7ff b9ce 	b.w	d451c <network_listening>

000d5180 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5184:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5186:	b095      	sub	sp, #84	; 0x54
   d5188:	4616      	mov	r6, r2
   d518a:	460d      	mov	r5, r1
   d518c:	4607      	mov	r7, r0
    IPAddress addr;
   d518e:	f7ff fd6d 	bl	d4c6c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5192:	4621      	mov	r1, r4
   d5194:	2220      	movs	r2, #32
   d5196:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5198:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d519a:	f000 fb3e 	bl	d581a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d519e:	2340      	movs	r3, #64	; 0x40
   d51a0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d51a2:	4621      	mov	r1, r4
   d51a4:	466b      	mov	r3, sp
   d51a6:	aa0c      	add	r2, sp, #48	; 0x30
   d51a8:	4630      	mov	r0, r6
   d51aa:	f7ff f833 	bl	d4214 <netdb_getaddrinfo>
    if (!r) {
   d51ae:	4604      	mov	r4, r0
   d51b0:	2800      	cmp	r0, #0
   d51b2:	d144      	bne.n	d523e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d51b4:	4602      	mov	r2, r0
   d51b6:	2101      	movs	r1, #1
   d51b8:	6868      	ldr	r0, [r5, #4]
   d51ba:	f7ff f98f 	bl	d44dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d51be:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d51c0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d51c2:	4622      	mov	r2, r4
   d51c4:	6868      	ldr	r0, [r5, #4]
   d51c6:	f7ff f989 	bl	d44dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d51ca:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d51cc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d51ce:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d51d0:	2e00      	cmp	r6, #0
   d51d2:	d034      	beq.n	d523e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d51d4:	2900      	cmp	r1, #0
   d51d6:	d132      	bne.n	d523e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d51d8:	6873      	ldr	r3, [r6, #4]
   d51da:	2b02      	cmp	r3, #2
   d51dc:	d002      	beq.n	d51e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d51de:	2b0a      	cmp	r3, #10
   d51e0:	d009      	beq.n	d51f6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d51e2:	e02a      	b.n	d523a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d51e4:	f1b8 0f00 	cmp.w	r8, #0
   d51e8:	d027      	beq.n	d523a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d51ea:	6971      	ldr	r1, [r6, #20]
   d51ec:	4638      	mov	r0, r7
   d51ee:	3104      	adds	r1, #4
   d51f0:	f7ff fd69 	bl	d4cc6 <_ZN9IPAddressaSEPKh>
   d51f4:	e020      	b.n	d5238 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d51f6:	f1b9 0f00 	cmp.w	r9, #0
   d51fa:	d01e      	beq.n	d523a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d51fc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d51fe:	2211      	movs	r2, #17
   d5200:	a801      	add	r0, sp, #4
   d5202:	f000 fb0a 	bl	d581a <memset>
                    a.v = 6;
   d5206:	2306      	movs	r3, #6
   d5208:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d520c:	ad01      	add	r5, sp, #4
   d520e:	f104 0308 	add.w	r3, r4, #8
   d5212:	3418      	adds	r4, #24
   d5214:	6818      	ldr	r0, [r3, #0]
   d5216:	6859      	ldr	r1, [r3, #4]
   d5218:	462a      	mov	r2, r5
   d521a:	c203      	stmia	r2!, {r0, r1}
   d521c:	3308      	adds	r3, #8
   d521e:	42a3      	cmp	r3, r4
   d5220:	4615      	mov	r5, r2
   d5222:	d1f7      	bne.n	d5214 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5224:	a901      	add	r1, sp, #4
   d5226:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5228:	ad07      	add	r5, sp, #28
   d522a:	f7ff fd2d 	bl	d4c88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d522e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5230:	1d3c      	adds	r4, r7, #4
   d5232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5234:	682b      	ldr	r3, [r5, #0]
   d5236:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5238:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d523a:	69f6      	ldr	r6, [r6, #28]
   d523c:	e7c8      	b.n	d51d0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d523e:	9800      	ldr	r0, [sp, #0]
   d5240:	f7fe ffe0 	bl	d4204 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5244:	4638      	mov	r0, r7
   d5246:	b015      	add	sp, #84	; 0x54
   d5248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d524c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d524c:	4b02      	ldr	r3, [pc, #8]	; (d5258 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d524e:	4a03      	ldr	r2, [pc, #12]	; (d525c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5250:	601a      	str	r2, [r3, #0]
   d5252:	2200      	movs	r2, #0
   d5254:	605a      	str	r2, [r3, #4]
   d5256:	4770      	bx	lr
   d5258:	2003e6e4 	.word	0x2003e6e4
   d525c:	000d635c 	.word	0x000d635c

000d5260 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5260:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5262:	4c0c      	ldr	r4, [pc, #48]	; (d5294 <_GLOBAL__sub_I_SPI+0x34>)
   d5264:	4e0c      	ldr	r6, [pc, #48]	; (d5298 <_GLOBAL__sub_I_SPI+0x38>)
   d5266:	4d0d      	ldr	r5, [pc, #52]	; (d529c <_GLOBAL__sub_I_SPI+0x3c>)
   d5268:	2100      	movs	r1, #0
   d526a:	4620      	mov	r0, r4
   d526c:	f7ff fa1c 	bl	d46a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5270:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5272:	4c0b      	ldr	r4, [pc, #44]	; (d52a0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5274:	4632      	mov	r2, r6
   d5276:	4629      	mov	r1, r5
   d5278:	f000 f834 	bl	d52e4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d527c:	2101      	movs	r1, #1
   d527e:	4620      	mov	r0, r4
   d5280:	f7ff fa12 	bl	d46a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5284:	4632      	mov	r2, r6
   d5286:	4629      	mov	r1, r5
   d5288:	4620      	mov	r0, r4
   d528a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d528e:	f000 b829 	b.w	d52e4 <__aeabi_atexit>
   d5292:	bf00      	nop
   d5294:	2003e6ec 	.word	0x2003e6ec
   d5298:	2003e39c 	.word	0x2003e39c
   d529c:	000d4699 	.word	0x000d4699
   d52a0:	2003e6fc 	.word	0x2003e6fc

000d52a4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d52a4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d52a6:	4d0b      	ldr	r5, [pc, #44]	; (d52d4 <_Z19__fetch_global_Wirev+0x30>)
   d52a8:	6829      	ldr	r1, [r5, #0]
   d52aa:	f011 0401 	ands.w	r4, r1, #1
   d52ae:	d10f      	bne.n	d52d0 <_Z19__fetch_global_Wirev+0x2c>
   d52b0:	4628      	mov	r0, r5
   d52b2:	f7fe fef4 	bl	d409e <__cxa_guard_acquire>
   d52b6:	b158      	cbz	r0, d52d0 <_Z19__fetch_global_Wirev+0x2c>
   d52b8:	4621      	mov	r1, r4
   d52ba:	4807      	ldr	r0, [pc, #28]	; (d52d8 <_Z19__fetch_global_Wirev+0x34>)
   d52bc:	f7ff fe16 	bl	d4eec <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d52c0:	4628      	mov	r0, r5
   d52c2:	f7fe fef1 	bl	d40a8 <__cxa_guard_release>
   d52c6:	4a05      	ldr	r2, [pc, #20]	; (d52dc <_Z19__fetch_global_Wirev+0x38>)
   d52c8:	4905      	ldr	r1, [pc, #20]	; (d52e0 <_Z19__fetch_global_Wirev+0x3c>)
   d52ca:	4803      	ldr	r0, [pc, #12]	; (d52d8 <_Z19__fetch_global_Wirev+0x34>)
   d52cc:	f000 f80a 	bl	d52e4 <__aeabi_atexit>
	return wire;
}
   d52d0:	4801      	ldr	r0, [pc, #4]	; (d52d8 <_Z19__fetch_global_Wirev+0x34>)
   d52d2:	bd38      	pop	{r3, r4, r5, pc}
   d52d4:	2003e710 	.word	0x2003e710
   d52d8:	2003e714 	.word	0x2003e714
   d52dc:	2003e39c 	.word	0x2003e39c
   d52e0:	000d4e95 	.word	0x000d4e95

000d52e4 <__aeabi_atexit>:
   d52e4:	460b      	mov	r3, r1
   d52e6:	4601      	mov	r1, r0
   d52e8:	4618      	mov	r0, r3
   d52ea:	f000 b985 	b.w	d55f8 <__cxa_atexit>
	...

000d52f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d52f0:	4b18      	ldr	r3, [pc, #96]	; (d5354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d52f2:	681a      	ldr	r2, [r3, #0]
   d52f4:	07d1      	lsls	r1, r2, #31
   d52f6:	bf5c      	itt	pl
   d52f8:	2201      	movpl	r2, #1
   d52fa:	601a      	strpl	r2, [r3, #0]
   d52fc:	4b16      	ldr	r3, [pc, #88]	; (d5358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d52fe:	681a      	ldr	r2, [r3, #0]
   d5300:	07d2      	lsls	r2, r2, #31
   d5302:	bf5c      	itt	pl
   d5304:	2201      	movpl	r2, #1
   d5306:	601a      	strpl	r2, [r3, #0]
   d5308:	4b14      	ldr	r3, [pc, #80]	; (d535c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d530a:	681a      	ldr	r2, [r3, #0]
   d530c:	07d0      	lsls	r0, r2, #31
   d530e:	bf5c      	itt	pl
   d5310:	2201      	movpl	r2, #1
   d5312:	601a      	strpl	r2, [r3, #0]
   d5314:	4b12      	ldr	r3, [pc, #72]	; (d5360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5316:	681a      	ldr	r2, [r3, #0]
   d5318:	07d1      	lsls	r1, r2, #31
   d531a:	bf5c      	itt	pl
   d531c:	2201      	movpl	r2, #1
   d531e:	601a      	strpl	r2, [r3, #0]
   d5320:	4b10      	ldr	r3, [pc, #64]	; (d5364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5322:	681a      	ldr	r2, [r3, #0]
   d5324:	07d2      	lsls	r2, r2, #31
   d5326:	bf5c      	itt	pl
   d5328:	2201      	movpl	r2, #1
   d532a:	601a      	strpl	r2, [r3, #0]
   d532c:	4b0e      	ldr	r3, [pc, #56]	; (d5368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d532e:	681a      	ldr	r2, [r3, #0]
   d5330:	07d0      	lsls	r0, r2, #31
   d5332:	bf5c      	itt	pl
   d5334:	2201      	movpl	r2, #1
   d5336:	601a      	strpl	r2, [r3, #0]
   d5338:	4b0c      	ldr	r3, [pc, #48]	; (d536c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d533a:	681a      	ldr	r2, [r3, #0]
   d533c:	07d1      	lsls	r1, r2, #31
   d533e:	bf5c      	itt	pl
   d5340:	2201      	movpl	r2, #1
   d5342:	601a      	strpl	r2, [r3, #0]
   d5344:	4b0a      	ldr	r3, [pc, #40]	; (d5370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5346:	681a      	ldr	r2, [r3, #0]
   d5348:	07d2      	lsls	r2, r2, #31
   d534a:	bf5c      	itt	pl
   d534c:	2201      	movpl	r2, #1
   d534e:	601a      	strpl	r2, [r3, #0]
   d5350:	4770      	bx	lr
   d5352:	bf00      	nop
   d5354:	2003e744 	.word	0x2003e744
   d5358:	2003e740 	.word	0x2003e740
   d535c:	2003e73c 	.word	0x2003e73c
   d5360:	2003e738 	.word	0x2003e738
   d5364:	2003e734 	.word	0x2003e734
   d5368:	2003e730 	.word	0x2003e730
   d536c:	2003e72c 	.word	0x2003e72c
   d5370:	2003e728 	.word	0x2003e728

000d5374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5374:	4b24      	ldr	r3, [pc, #144]	; (d5408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5376:	681a      	ldr	r2, [r3, #0]
   d5378:	07d0      	lsls	r0, r2, #31
   d537a:	bf5c      	itt	pl
   d537c:	2201      	movpl	r2, #1
   d537e:	601a      	strpl	r2, [r3, #0]
   d5380:	4b22      	ldr	r3, [pc, #136]	; (d540c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5382:	681a      	ldr	r2, [r3, #0]
   d5384:	07d1      	lsls	r1, r2, #31
   d5386:	bf5c      	itt	pl
   d5388:	2201      	movpl	r2, #1
   d538a:	601a      	strpl	r2, [r3, #0]
   d538c:	4b20      	ldr	r3, [pc, #128]	; (d5410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d538e:	681a      	ldr	r2, [r3, #0]
   d5390:	07d2      	lsls	r2, r2, #31
   d5392:	bf5c      	itt	pl
   d5394:	2201      	movpl	r2, #1
   d5396:	601a      	strpl	r2, [r3, #0]
   d5398:	4b1e      	ldr	r3, [pc, #120]	; (d5414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d539a:	681a      	ldr	r2, [r3, #0]
   d539c:	07d0      	lsls	r0, r2, #31
   d539e:	bf5c      	itt	pl
   d53a0:	2201      	movpl	r2, #1
   d53a2:	601a      	strpl	r2, [r3, #0]
   d53a4:	4b1c      	ldr	r3, [pc, #112]	; (d5418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d53a6:	681a      	ldr	r2, [r3, #0]
   d53a8:	07d1      	lsls	r1, r2, #31
   d53aa:	bf5c      	itt	pl
   d53ac:	2201      	movpl	r2, #1
   d53ae:	601a      	strpl	r2, [r3, #0]
   d53b0:	4b1a      	ldr	r3, [pc, #104]	; (d541c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d53b2:	681a      	ldr	r2, [r3, #0]
   d53b4:	07d2      	lsls	r2, r2, #31
   d53b6:	bf5c      	itt	pl
   d53b8:	2201      	movpl	r2, #1
   d53ba:	601a      	strpl	r2, [r3, #0]
   d53bc:	4b18      	ldr	r3, [pc, #96]	; (d5420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d53be:	681a      	ldr	r2, [r3, #0]
   d53c0:	07d0      	lsls	r0, r2, #31
   d53c2:	bf5c      	itt	pl
   d53c4:	2201      	movpl	r2, #1
   d53c6:	601a      	strpl	r2, [r3, #0]
   d53c8:	4b16      	ldr	r3, [pc, #88]	; (d5424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d53ca:	681a      	ldr	r2, [r3, #0]
   d53cc:	07d1      	lsls	r1, r2, #31
   d53ce:	bf5c      	itt	pl
   d53d0:	2201      	movpl	r2, #1
   d53d2:	601a      	strpl	r2, [r3, #0]
   d53d4:	4b14      	ldr	r3, [pc, #80]	; (d5428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d53d6:	681a      	ldr	r2, [r3, #0]
   d53d8:	07d2      	lsls	r2, r2, #31
   d53da:	bf5c      	itt	pl
   d53dc:	2201      	movpl	r2, #1
   d53de:	601a      	strpl	r2, [r3, #0]
   d53e0:	4b12      	ldr	r3, [pc, #72]	; (d542c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d53e2:	681a      	ldr	r2, [r3, #0]
   d53e4:	07d0      	lsls	r0, r2, #31
   d53e6:	bf5c      	itt	pl
   d53e8:	2201      	movpl	r2, #1
   d53ea:	601a      	strpl	r2, [r3, #0]
   d53ec:	4b10      	ldr	r3, [pc, #64]	; (d5430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d53ee:	681a      	ldr	r2, [r3, #0]
   d53f0:	07d1      	lsls	r1, r2, #31
   d53f2:	bf5c      	itt	pl
   d53f4:	2201      	movpl	r2, #1
   d53f6:	601a      	strpl	r2, [r3, #0]
   d53f8:	4b0e      	ldr	r3, [pc, #56]	; (d5434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d53fa:	681a      	ldr	r2, [r3, #0]
   d53fc:	07d2      	lsls	r2, r2, #31
   d53fe:	bf5c      	itt	pl
   d5400:	2201      	movpl	r2, #1
   d5402:	601a      	strpl	r2, [r3, #0]
   d5404:	4770      	bx	lr
   d5406:	bf00      	nop
   d5408:	2003e774 	.word	0x2003e774
   d540c:	2003e770 	.word	0x2003e770
   d5410:	2003e76c 	.word	0x2003e76c
   d5414:	2003e768 	.word	0x2003e768
   d5418:	2003e764 	.word	0x2003e764
   d541c:	2003e760 	.word	0x2003e760
   d5420:	2003e75c 	.word	0x2003e75c
   d5424:	2003e758 	.word	0x2003e758
   d5428:	2003e754 	.word	0x2003e754
   d542c:	2003e750 	.word	0x2003e750
   d5430:	2003e74c 	.word	0x2003e74c
   d5434:	2003e748 	.word	0x2003e748

000d5438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5438:	4b24      	ldr	r3, [pc, #144]	; (d54cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d543a:	681a      	ldr	r2, [r3, #0]
   d543c:	07d0      	lsls	r0, r2, #31
   d543e:	bf5c      	itt	pl
   d5440:	2201      	movpl	r2, #1
   d5442:	601a      	strpl	r2, [r3, #0]
   d5444:	4b22      	ldr	r3, [pc, #136]	; (d54d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5446:	681a      	ldr	r2, [r3, #0]
   d5448:	07d1      	lsls	r1, r2, #31
   d544a:	bf5c      	itt	pl
   d544c:	2201      	movpl	r2, #1
   d544e:	601a      	strpl	r2, [r3, #0]
   d5450:	4b20      	ldr	r3, [pc, #128]	; (d54d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5452:	681a      	ldr	r2, [r3, #0]
   d5454:	07d2      	lsls	r2, r2, #31
   d5456:	bf5c      	itt	pl
   d5458:	2201      	movpl	r2, #1
   d545a:	601a      	strpl	r2, [r3, #0]
   d545c:	4b1e      	ldr	r3, [pc, #120]	; (d54d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d545e:	681a      	ldr	r2, [r3, #0]
   d5460:	07d0      	lsls	r0, r2, #31
   d5462:	bf5c      	itt	pl
   d5464:	2201      	movpl	r2, #1
   d5466:	601a      	strpl	r2, [r3, #0]
   d5468:	4b1c      	ldr	r3, [pc, #112]	; (d54dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d546a:	681a      	ldr	r2, [r3, #0]
   d546c:	07d1      	lsls	r1, r2, #31
   d546e:	bf5c      	itt	pl
   d5470:	2201      	movpl	r2, #1
   d5472:	601a      	strpl	r2, [r3, #0]
   d5474:	4b1a      	ldr	r3, [pc, #104]	; (d54e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5476:	681a      	ldr	r2, [r3, #0]
   d5478:	07d2      	lsls	r2, r2, #31
   d547a:	bf5c      	itt	pl
   d547c:	2201      	movpl	r2, #1
   d547e:	601a      	strpl	r2, [r3, #0]
   d5480:	4b18      	ldr	r3, [pc, #96]	; (d54e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5482:	681a      	ldr	r2, [r3, #0]
   d5484:	07d0      	lsls	r0, r2, #31
   d5486:	bf5c      	itt	pl
   d5488:	2201      	movpl	r2, #1
   d548a:	601a      	strpl	r2, [r3, #0]
   d548c:	4b16      	ldr	r3, [pc, #88]	; (d54e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d548e:	681a      	ldr	r2, [r3, #0]
   d5490:	07d1      	lsls	r1, r2, #31
   d5492:	bf5c      	itt	pl
   d5494:	2201      	movpl	r2, #1
   d5496:	601a      	strpl	r2, [r3, #0]
   d5498:	4b14      	ldr	r3, [pc, #80]	; (d54ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d549a:	681a      	ldr	r2, [r3, #0]
   d549c:	07d2      	lsls	r2, r2, #31
   d549e:	bf5c      	itt	pl
   d54a0:	2201      	movpl	r2, #1
   d54a2:	601a      	strpl	r2, [r3, #0]
   d54a4:	4b12      	ldr	r3, [pc, #72]	; (d54f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d54a6:	681a      	ldr	r2, [r3, #0]
   d54a8:	07d0      	lsls	r0, r2, #31
   d54aa:	bf5c      	itt	pl
   d54ac:	2201      	movpl	r2, #1
   d54ae:	601a      	strpl	r2, [r3, #0]
   d54b0:	4b10      	ldr	r3, [pc, #64]	; (d54f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d54b2:	681a      	ldr	r2, [r3, #0]
   d54b4:	07d1      	lsls	r1, r2, #31
   d54b6:	bf5c      	itt	pl
   d54b8:	2201      	movpl	r2, #1
   d54ba:	601a      	strpl	r2, [r3, #0]
   d54bc:	4b0e      	ldr	r3, [pc, #56]	; (d54f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d54be:	681a      	ldr	r2, [r3, #0]
   d54c0:	07d2      	lsls	r2, r2, #31
   d54c2:	bf5c      	itt	pl
   d54c4:	2201      	movpl	r2, #1
   d54c6:	601a      	strpl	r2, [r3, #0]
   d54c8:	4770      	bx	lr
   d54ca:	bf00      	nop
   d54cc:	2003e7a4 	.word	0x2003e7a4
   d54d0:	2003e7a0 	.word	0x2003e7a0
   d54d4:	2003e79c 	.word	0x2003e79c
   d54d8:	2003e798 	.word	0x2003e798
   d54dc:	2003e794 	.word	0x2003e794
   d54e0:	2003e790 	.word	0x2003e790
   d54e4:	2003e78c 	.word	0x2003e78c
   d54e8:	2003e788 	.word	0x2003e788
   d54ec:	2003e784 	.word	0x2003e784
   d54f0:	2003e780 	.word	0x2003e780
   d54f4:	2003e77c 	.word	0x2003e77c
   d54f8:	2003e778 	.word	0x2003e778

000d54fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d54fc:	4b18      	ldr	r3, [pc, #96]	; (d5560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d54fe:	681a      	ldr	r2, [r3, #0]
   d5500:	07d1      	lsls	r1, r2, #31
   d5502:	bf5c      	itt	pl
   d5504:	2201      	movpl	r2, #1
   d5506:	601a      	strpl	r2, [r3, #0]
   d5508:	4b16      	ldr	r3, [pc, #88]	; (d5564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d550a:	681a      	ldr	r2, [r3, #0]
   d550c:	07d2      	lsls	r2, r2, #31
   d550e:	bf5c      	itt	pl
   d5510:	2201      	movpl	r2, #1
   d5512:	601a      	strpl	r2, [r3, #0]
   d5514:	4b14      	ldr	r3, [pc, #80]	; (d5568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5516:	681a      	ldr	r2, [r3, #0]
   d5518:	07d0      	lsls	r0, r2, #31
   d551a:	bf5c      	itt	pl
   d551c:	2201      	movpl	r2, #1
   d551e:	601a      	strpl	r2, [r3, #0]
   d5520:	4b12      	ldr	r3, [pc, #72]	; (d556c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5522:	681a      	ldr	r2, [r3, #0]
   d5524:	07d1      	lsls	r1, r2, #31
   d5526:	bf5c      	itt	pl
   d5528:	2201      	movpl	r2, #1
   d552a:	601a      	strpl	r2, [r3, #0]
   d552c:	4b10      	ldr	r3, [pc, #64]	; (d5570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d552e:	681a      	ldr	r2, [r3, #0]
   d5530:	07d2      	lsls	r2, r2, #31
   d5532:	bf5c      	itt	pl
   d5534:	2201      	movpl	r2, #1
   d5536:	601a      	strpl	r2, [r3, #0]
   d5538:	4b0e      	ldr	r3, [pc, #56]	; (d5574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d553a:	681a      	ldr	r2, [r3, #0]
   d553c:	07d0      	lsls	r0, r2, #31
   d553e:	bf5c      	itt	pl
   d5540:	2201      	movpl	r2, #1
   d5542:	601a      	strpl	r2, [r3, #0]
   d5544:	4b0c      	ldr	r3, [pc, #48]	; (d5578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5546:	681a      	ldr	r2, [r3, #0]
   d5548:	07d1      	lsls	r1, r2, #31
   d554a:	bf5c      	itt	pl
   d554c:	2201      	movpl	r2, #1
   d554e:	601a      	strpl	r2, [r3, #0]
   d5550:	4b0a      	ldr	r3, [pc, #40]	; (d557c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5552:	681a      	ldr	r2, [r3, #0]
   d5554:	07d2      	lsls	r2, r2, #31
   d5556:	bf5c      	itt	pl
   d5558:	2201      	movpl	r2, #1
   d555a:	601a      	strpl	r2, [r3, #0]
   d555c:	4770      	bx	lr
   d555e:	bf00      	nop
   d5560:	2003e7c4 	.word	0x2003e7c4
   d5564:	2003e7c0 	.word	0x2003e7c0
   d5568:	2003e7bc 	.word	0x2003e7bc
   d556c:	2003e7b8 	.word	0x2003e7b8
   d5570:	2003e7b4 	.word	0x2003e7b4
   d5574:	2003e7b0 	.word	0x2003e7b0
   d5578:	2003e7ac 	.word	0x2003e7ac
   d557c:	2003e7a8 	.word	0x2003e7a8

000d5580 <asctime>:
   d5580:	4b09      	ldr	r3, [pc, #36]	; (d55a8 <asctime+0x28>)
   d5582:	b570      	push	{r4, r5, r6, lr}
   d5584:	681c      	ldr	r4, [r3, #0]
   d5586:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d5588:	4606      	mov	r6, r0
   d558a:	b93d      	cbnz	r5, d559c <asctime+0x1c>
   d558c:	201a      	movs	r0, #26
   d558e:	f7ff f80d 	bl	d45ac <malloc>
   d5592:	221a      	movs	r2, #26
   d5594:	6420      	str	r0, [r4, #64]	; 0x40
   d5596:	4629      	mov	r1, r5
   d5598:	f000 f93f 	bl	d581a <memset>
   d559c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d559e:	4630      	mov	r0, r6
   d55a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d55a4:	f000 b802 	b.w	d55ac <asctime_r>
   d55a8:	2003e34c 	.word	0x2003e34c

000d55ac <asctime_r>:
   d55ac:	b510      	push	{r4, lr}
   d55ae:	460c      	mov	r4, r1
   d55b0:	6941      	ldr	r1, [r0, #20]
   d55b2:	6903      	ldr	r3, [r0, #16]
   d55b4:	6982      	ldr	r2, [r0, #24]
   d55b6:	b086      	sub	sp, #24
   d55b8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d55bc:	9104      	str	r1, [sp, #16]
   d55be:	6801      	ldr	r1, [r0, #0]
   d55c0:	9103      	str	r1, [sp, #12]
   d55c2:	6841      	ldr	r1, [r0, #4]
   d55c4:	9102      	str	r1, [sp, #8]
   d55c6:	6881      	ldr	r1, [r0, #8]
   d55c8:	9101      	str	r1, [sp, #4]
   d55ca:	68c1      	ldr	r1, [r0, #12]
   d55cc:	9100      	str	r1, [sp, #0]
   d55ce:	4907      	ldr	r1, [pc, #28]	; (d55ec <asctime_r+0x40>)
   d55d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d55d4:	440b      	add	r3, r1
   d55d6:	4906      	ldr	r1, [pc, #24]	; (d55f0 <asctime_r+0x44>)
   d55d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d55dc:	440a      	add	r2, r1
   d55de:	4620      	mov	r0, r4
   d55e0:	4904      	ldr	r1, [pc, #16]	; (d55f4 <asctime_r+0x48>)
   d55e2:	f7fe fffb 	bl	d45dc <siprintf>
   d55e6:	4620      	mov	r0, r4
   d55e8:	b006      	add	sp, #24
   d55ea:	bd10      	pop	{r4, pc}
   d55ec:	000d639d 	.word	0x000d639d
   d55f0:	000d6388 	.word	0x000d6388
   d55f4:	000d63c1 	.word	0x000d63c1

000d55f8 <__cxa_atexit>:
   d55f8:	b510      	push	{r4, lr}
   d55fa:	4c05      	ldr	r4, [pc, #20]	; (d5610 <__cxa_atexit+0x18>)
   d55fc:	4613      	mov	r3, r2
   d55fe:	b12c      	cbz	r4, d560c <__cxa_atexit+0x14>
   d5600:	460a      	mov	r2, r1
   d5602:	4601      	mov	r1, r0
   d5604:	2002      	movs	r0, #2
   d5606:	f3af 8000 	nop.w
   d560a:	bd10      	pop	{r4, pc}
   d560c:	4620      	mov	r0, r4
   d560e:	bd10      	pop	{r4, pc}
   d5610:	00000000 	.word	0x00000000

000d5614 <localtime>:
   d5614:	b538      	push	{r3, r4, r5, lr}
   d5616:	4b07      	ldr	r3, [pc, #28]	; (d5634 <localtime+0x20>)
   d5618:	681c      	ldr	r4, [r3, #0]
   d561a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d561c:	4605      	mov	r5, r0
   d561e:	b91b      	cbnz	r3, d5628 <localtime+0x14>
   d5620:	2024      	movs	r0, #36	; 0x24
   d5622:	f7fe ffc3 	bl	d45ac <malloc>
   d5626:	63e0      	str	r0, [r4, #60]	; 0x3c
   d5628:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d562a:	4628      	mov	r0, r5
   d562c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5630:	f000 b802 	b.w	d5638 <localtime_r>
   d5634:	2003e34c 	.word	0x2003e34c

000d5638 <localtime_r>:
   d5638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d563c:	460c      	mov	r4, r1
   d563e:	4680      	mov	r8, r0
   d5640:	f000 fc94 	bl	d5f6c <__gettzinfo>
   d5644:	4621      	mov	r1, r4
   d5646:	4607      	mov	r7, r0
   d5648:	4640      	mov	r0, r8
   d564a:	f000 fc93 	bl	d5f74 <gmtime_r>
   d564e:	6946      	ldr	r6, [r0, #20]
   d5650:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d5654:	07b3      	lsls	r3, r6, #30
   d5656:	4604      	mov	r4, r0
   d5658:	d105      	bne.n	d5666 <localtime_r+0x2e>
   d565a:	2264      	movs	r2, #100	; 0x64
   d565c:	fb96 f3f2 	sdiv	r3, r6, r2
   d5660:	fb02 6313 	mls	r3, r2, r3, r6
   d5664:	b94b      	cbnz	r3, d567a <localtime_r+0x42>
   d5666:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d566a:	fb96 f3f5 	sdiv	r3, r6, r5
   d566e:	fb05 6513 	mls	r5, r5, r3, r6
   d5672:	fab5 f385 	clz	r3, r5
   d5676:	095b      	lsrs	r3, r3, #5
   d5678:	e000      	b.n	d567c <localtime_r+0x44>
   d567a:	2301      	movs	r3, #1
   d567c:	4a5f      	ldr	r2, [pc, #380]	; (d57fc <localtime_r+0x1c4>)
   d567e:	2530      	movs	r5, #48	; 0x30
   d5680:	fb05 2503 	mla	r5, r5, r3, r2
   d5684:	f000 faa6 	bl	d5bd4 <__tz_lock>
   d5688:	f000 faa6 	bl	d5bd8 <_tzset_unlocked>
   d568c:	4b5c      	ldr	r3, [pc, #368]	; (d5800 <localtime_r+0x1c8>)
   d568e:	681b      	ldr	r3, [r3, #0]
   d5690:	b1f3      	cbz	r3, d56d0 <localtime_r+0x98>
   d5692:	687b      	ldr	r3, [r7, #4]
   d5694:	429e      	cmp	r6, r3
   d5696:	d105      	bne.n	d56a4 <localtime_r+0x6c>
   d5698:	6839      	ldr	r1, [r7, #0]
   d569a:	f8d8 3000 	ldr.w	r3, [r8]
   d569e:	69fa      	ldr	r2, [r7, #28]
   d56a0:	b941      	cbnz	r1, d56b4 <localtime_r+0x7c>
   d56a2:	e00a      	b.n	d56ba <localtime_r+0x82>
   d56a4:	4630      	mov	r0, r6
   d56a6:	f000 f9ed 	bl	d5a84 <__tzcalc_limits>
   d56aa:	2800      	cmp	r0, #0
   d56ac:	d1f4      	bne.n	d5698 <localtime_r+0x60>
   d56ae:	f04f 33ff 	mov.w	r3, #4294967295
   d56b2:	e00d      	b.n	d56d0 <localtime_r+0x98>
   d56b4:	4293      	cmp	r3, r2
   d56b6:	db08      	blt.n	d56ca <localtime_r+0x92>
   d56b8:	e001      	b.n	d56be <localtime_r+0x86>
   d56ba:	4293      	cmp	r3, r2
   d56bc:	da07      	bge.n	d56ce <localtime_r+0x96>
   d56be:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d56c0:	4293      	cmp	r3, r2
   d56c2:	bfac      	ite	ge
   d56c4:	2300      	movge	r3, #0
   d56c6:	2301      	movlt	r3, #1
   d56c8:	e002      	b.n	d56d0 <localtime_r+0x98>
   d56ca:	2300      	movs	r3, #0
   d56cc:	e000      	b.n	d56d0 <localtime_r+0x98>
   d56ce:	2301      	movs	r3, #1
   d56d0:	6223      	str	r3, [r4, #32]
   d56d2:	6a23      	ldr	r3, [r4, #32]
   d56d4:	2b01      	cmp	r3, #1
   d56d6:	bf0c      	ite	eq
   d56d8:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d56da:	6a39      	ldrne	r1, [r7, #32]
   d56dc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d56e0:	203c      	movs	r0, #60	; 0x3c
   d56e2:	fb91 f6f3 	sdiv	r6, r1, r3
   d56e6:	fb03 1316 	mls	r3, r3, r6, r1
   d56ea:	6861      	ldr	r1, [r4, #4]
   d56ec:	fb93 f2f0 	sdiv	r2, r3, r0
   d56f0:	fb00 3012 	mls	r0, r0, r2, r3
   d56f4:	6823      	ldr	r3, [r4, #0]
   d56f6:	1a89      	subs	r1, r1, r2
   d56f8:	68a2      	ldr	r2, [r4, #8]
   d56fa:	6061      	str	r1, [r4, #4]
   d56fc:	1a1b      	subs	r3, r3, r0
   d56fe:	1b92      	subs	r2, r2, r6
   d5700:	2b3b      	cmp	r3, #59	; 0x3b
   d5702:	6023      	str	r3, [r4, #0]
   d5704:	60a2      	str	r2, [r4, #8]
   d5706:	dd03      	ble.n	d5710 <localtime_r+0xd8>
   d5708:	3101      	adds	r1, #1
   d570a:	6061      	str	r1, [r4, #4]
   d570c:	3b3c      	subs	r3, #60	; 0x3c
   d570e:	e004      	b.n	d571a <localtime_r+0xe2>
   d5710:	2b00      	cmp	r3, #0
   d5712:	da03      	bge.n	d571c <localtime_r+0xe4>
   d5714:	3901      	subs	r1, #1
   d5716:	6061      	str	r1, [r4, #4]
   d5718:	333c      	adds	r3, #60	; 0x3c
   d571a:	6023      	str	r3, [r4, #0]
   d571c:	6863      	ldr	r3, [r4, #4]
   d571e:	2b3b      	cmp	r3, #59	; 0x3b
   d5720:	dd03      	ble.n	d572a <localtime_r+0xf2>
   d5722:	3201      	adds	r2, #1
   d5724:	60a2      	str	r2, [r4, #8]
   d5726:	3b3c      	subs	r3, #60	; 0x3c
   d5728:	e004      	b.n	d5734 <localtime_r+0xfc>
   d572a:	2b00      	cmp	r3, #0
   d572c:	da03      	bge.n	d5736 <localtime_r+0xfe>
   d572e:	3a01      	subs	r2, #1
   d5730:	60a2      	str	r2, [r4, #8]
   d5732:	333c      	adds	r3, #60	; 0x3c
   d5734:	6063      	str	r3, [r4, #4]
   d5736:	68a3      	ldr	r3, [r4, #8]
   d5738:	2b17      	cmp	r3, #23
   d573a:	dd22      	ble.n	d5782 <localtime_r+0x14a>
   d573c:	69e2      	ldr	r2, [r4, #28]
   d573e:	3201      	adds	r2, #1
   d5740:	61e2      	str	r2, [r4, #28]
   d5742:	69a2      	ldr	r2, [r4, #24]
   d5744:	3201      	adds	r2, #1
   d5746:	2a06      	cmp	r2, #6
   d5748:	bfc8      	it	gt
   d574a:	2200      	movgt	r2, #0
   d574c:	61a2      	str	r2, [r4, #24]
   d574e:	68e2      	ldr	r2, [r4, #12]
   d5750:	3b18      	subs	r3, #24
   d5752:	3201      	adds	r2, #1
   d5754:	60a3      	str	r3, [r4, #8]
   d5756:	6923      	ldr	r3, [r4, #16]
   d5758:	60e2      	str	r2, [r4, #12]
   d575a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d575e:	428a      	cmp	r2, r1
   d5760:	dd46      	ble.n	d57f0 <localtime_r+0x1b8>
   d5762:	3301      	adds	r3, #1
   d5764:	2b0c      	cmp	r3, #12
   d5766:	bf0c      	ite	eq
   d5768:	6963      	ldreq	r3, [r4, #20]
   d576a:	6123      	strne	r3, [r4, #16]
   d576c:	eba2 0201 	sub.w	r2, r2, r1
   d5770:	60e2      	str	r2, [r4, #12]
   d5772:	bf01      	itttt	eq
   d5774:	3301      	addeq	r3, #1
   d5776:	2200      	moveq	r2, #0
   d5778:	6122      	streq	r2, [r4, #16]
   d577a:	6163      	streq	r3, [r4, #20]
   d577c:	bf08      	it	eq
   d577e:	61e2      	streq	r2, [r4, #28]
   d5780:	e036      	b.n	d57f0 <localtime_r+0x1b8>
   d5782:	2b00      	cmp	r3, #0
   d5784:	da34      	bge.n	d57f0 <localtime_r+0x1b8>
   d5786:	69e2      	ldr	r2, [r4, #28]
   d5788:	3a01      	subs	r2, #1
   d578a:	61e2      	str	r2, [r4, #28]
   d578c:	69a2      	ldr	r2, [r4, #24]
   d578e:	3a01      	subs	r2, #1
   d5790:	bf48      	it	mi
   d5792:	2206      	movmi	r2, #6
   d5794:	61a2      	str	r2, [r4, #24]
   d5796:	68e2      	ldr	r2, [r4, #12]
   d5798:	3318      	adds	r3, #24
   d579a:	3a01      	subs	r2, #1
   d579c:	60e2      	str	r2, [r4, #12]
   d579e:	60a3      	str	r3, [r4, #8]
   d57a0:	bb32      	cbnz	r2, d57f0 <localtime_r+0x1b8>
   d57a2:	6923      	ldr	r3, [r4, #16]
   d57a4:	3b01      	subs	r3, #1
   d57a6:	d401      	bmi.n	d57ac <localtime_r+0x174>
   d57a8:	6123      	str	r3, [r4, #16]
   d57aa:	e01d      	b.n	d57e8 <localtime_r+0x1b0>
   d57ac:	230b      	movs	r3, #11
   d57ae:	6123      	str	r3, [r4, #16]
   d57b0:	6963      	ldr	r3, [r4, #20]
   d57b2:	1e5a      	subs	r2, r3, #1
   d57b4:	f012 0f03 	tst.w	r2, #3
   d57b8:	6162      	str	r2, [r4, #20]
   d57ba:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d57be:	d105      	bne.n	d57cc <localtime_r+0x194>
   d57c0:	2164      	movs	r1, #100	; 0x64
   d57c2:	fb93 f2f1 	sdiv	r2, r3, r1
   d57c6:	fb01 3212 	mls	r2, r1, r2, r3
   d57ca:	b94a      	cbnz	r2, d57e0 <localtime_r+0x1a8>
   d57cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d57d0:	fb93 f2f1 	sdiv	r2, r3, r1
   d57d4:	fb01 3312 	mls	r3, r1, r2, r3
   d57d8:	fab3 f383 	clz	r3, r3
   d57dc:	095b      	lsrs	r3, r3, #5
   d57de:	e000      	b.n	d57e2 <localtime_r+0x1aa>
   d57e0:	2301      	movs	r3, #1
   d57e2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d57e6:	61e3      	str	r3, [r4, #28]
   d57e8:	6923      	ldr	r3, [r4, #16]
   d57ea:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d57ee:	60e3      	str	r3, [r4, #12]
   d57f0:	f000 f9f1 	bl	d5bd6 <__tz_unlock>
   d57f4:	4620      	mov	r0, r4
   d57f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d57fa:	bf00      	nop
   d57fc:	000d6548 	.word	0x000d6548
   d5800:	2003e7e4 	.word	0x2003e7e4

000d5804 <memcpy>:
   d5804:	b510      	push	{r4, lr}
   d5806:	1e43      	subs	r3, r0, #1
   d5808:	440a      	add	r2, r1
   d580a:	4291      	cmp	r1, r2
   d580c:	d004      	beq.n	d5818 <memcpy+0x14>
   d580e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5812:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5816:	e7f8      	b.n	d580a <memcpy+0x6>
   d5818:	bd10      	pop	{r4, pc}

000d581a <memset>:
   d581a:	4402      	add	r2, r0
   d581c:	4603      	mov	r3, r0
   d581e:	4293      	cmp	r3, r2
   d5820:	d002      	beq.n	d5828 <memset+0xe>
   d5822:	f803 1b01 	strb.w	r1, [r3], #1
   d5826:	e7fa      	b.n	d581e <memset+0x4>
   d5828:	4770      	bx	lr
	...

000d582c <srand>:
   d582c:	b538      	push	{r3, r4, r5, lr}
   d582e:	4b12      	ldr	r3, [pc, #72]	; (d5878 <srand+0x4c>)
   d5830:	681c      	ldr	r4, [r3, #0]
   d5832:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5834:	4605      	mov	r5, r0
   d5836:	b9d3      	cbnz	r3, d586e <srand+0x42>
   d5838:	2018      	movs	r0, #24
   d583a:	f7fe feb7 	bl	d45ac <malloc>
   d583e:	f243 330e 	movw	r3, #13070	; 0x330e
   d5842:	63a0      	str	r0, [r4, #56]	; 0x38
   d5844:	8003      	strh	r3, [r0, #0]
   d5846:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d584a:	8043      	strh	r3, [r0, #2]
   d584c:	f241 2334 	movw	r3, #4660	; 0x1234
   d5850:	8083      	strh	r3, [r0, #4]
   d5852:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5856:	80c3      	strh	r3, [r0, #6]
   d5858:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d585c:	8103      	strh	r3, [r0, #8]
   d585e:	2305      	movs	r3, #5
   d5860:	8143      	strh	r3, [r0, #10]
   d5862:	230b      	movs	r3, #11
   d5864:	8183      	strh	r3, [r0, #12]
   d5866:	2201      	movs	r2, #1
   d5868:	2300      	movs	r3, #0
   d586a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d586e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5870:	2200      	movs	r2, #0
   d5872:	611d      	str	r5, [r3, #16]
   d5874:	615a      	str	r2, [r3, #20]
   d5876:	bd38      	pop	{r3, r4, r5, pc}
   d5878:	2003e34c 	.word	0x2003e34c

000d587c <rand>:
   d587c:	4b19      	ldr	r3, [pc, #100]	; (d58e4 <rand+0x68>)
   d587e:	b510      	push	{r4, lr}
   d5880:	681c      	ldr	r4, [r3, #0]
   d5882:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5884:	b9d3      	cbnz	r3, d58bc <rand+0x40>
   d5886:	2018      	movs	r0, #24
   d5888:	f7fe fe90 	bl	d45ac <malloc>
   d588c:	f243 330e 	movw	r3, #13070	; 0x330e
   d5890:	63a0      	str	r0, [r4, #56]	; 0x38
   d5892:	8003      	strh	r3, [r0, #0]
   d5894:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5898:	8043      	strh	r3, [r0, #2]
   d589a:	f241 2334 	movw	r3, #4660	; 0x1234
   d589e:	8083      	strh	r3, [r0, #4]
   d58a0:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d58a4:	80c3      	strh	r3, [r0, #6]
   d58a6:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d58aa:	8103      	strh	r3, [r0, #8]
   d58ac:	2305      	movs	r3, #5
   d58ae:	8143      	strh	r3, [r0, #10]
   d58b0:	230b      	movs	r3, #11
   d58b2:	8183      	strh	r3, [r0, #12]
   d58b4:	2201      	movs	r2, #1
   d58b6:	2300      	movs	r3, #0
   d58b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d58bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d58be:	4c0a      	ldr	r4, [pc, #40]	; (d58e8 <rand+0x6c>)
   d58c0:	690b      	ldr	r3, [r1, #16]
   d58c2:	6948      	ldr	r0, [r1, #20]
   d58c4:	4a09      	ldr	r2, [pc, #36]	; (d58ec <rand+0x70>)
   d58c6:	435c      	muls	r4, r3
   d58c8:	fb02 4000 	mla	r0, r2, r0, r4
   d58cc:	fba3 2302 	umull	r2, r3, r3, r2
   d58d0:	3201      	adds	r2, #1
   d58d2:	4403      	add	r3, r0
   d58d4:	f143 0300 	adc.w	r3, r3, #0
   d58d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d58dc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d58e0:	bd10      	pop	{r4, pc}
   d58e2:	bf00      	nop
   d58e4:	2003e34c 	.word	0x2003e34c
   d58e8:	5851f42d 	.word	0x5851f42d
   d58ec:	4c957f2d 	.word	0x4c957f2d

000d58f0 <strcmp>:
   d58f0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d58f4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d58f8:	2a01      	cmp	r2, #1
   d58fa:	bf28      	it	cs
   d58fc:	429a      	cmpcs	r2, r3
   d58fe:	d0f7      	beq.n	d58f0 <strcmp>
   d5900:	1ad0      	subs	r0, r2, r3
   d5902:	4770      	bx	lr

000d5904 <strcpy>:
   d5904:	4603      	mov	r3, r0
   d5906:	f811 2b01 	ldrb.w	r2, [r1], #1
   d590a:	f803 2b01 	strb.w	r2, [r3], #1
   d590e:	2a00      	cmp	r2, #0
   d5910:	d1f9      	bne.n	d5906 <strcpy+0x2>
   d5912:	4770      	bx	lr

000d5914 <strlen>:
   d5914:	4603      	mov	r3, r0
   d5916:	f813 2b01 	ldrb.w	r2, [r3], #1
   d591a:	2a00      	cmp	r2, #0
   d591c:	d1fb      	bne.n	d5916 <strlen+0x2>
   d591e:	1a18      	subs	r0, r3, r0
   d5920:	3801      	subs	r0, #1
   d5922:	4770      	bx	lr

000d5924 <strncmp>:
   d5924:	b530      	push	{r4, r5, lr}
   d5926:	b182      	cbz	r2, d594a <strncmp+0x26>
   d5928:	1e45      	subs	r5, r0, #1
   d592a:	3901      	subs	r1, #1
   d592c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d5930:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d5934:	42a3      	cmp	r3, r4
   d5936:	d106      	bne.n	d5946 <strncmp+0x22>
   d5938:	43ec      	mvns	r4, r5
   d593a:	4414      	add	r4, r2
   d593c:	42e0      	cmn	r0, r4
   d593e:	d001      	beq.n	d5944 <strncmp+0x20>
   d5940:	2b00      	cmp	r3, #0
   d5942:	d1f3      	bne.n	d592c <strncmp+0x8>
   d5944:	461c      	mov	r4, r3
   d5946:	1b18      	subs	r0, r3, r4
   d5948:	bd30      	pop	{r4, r5, pc}
   d594a:	4610      	mov	r0, r2
   d594c:	bd30      	pop	{r4, r5, pc}

000d594e <strncpy>:
   d594e:	b510      	push	{r4, lr}
   d5950:	4603      	mov	r3, r0
   d5952:	b142      	cbz	r2, d5966 <strncpy+0x18>
   d5954:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5958:	f803 4b01 	strb.w	r4, [r3], #1
   d595c:	3a01      	subs	r2, #1
   d595e:	2c00      	cmp	r4, #0
   d5960:	d1f7      	bne.n	d5952 <strncpy+0x4>
   d5962:	441a      	add	r2, r3
   d5964:	e000      	b.n	d5968 <strncpy+0x1a>
   d5966:	bd10      	pop	{r4, pc}
   d5968:	4293      	cmp	r3, r2
   d596a:	d002      	beq.n	d5972 <strncpy+0x24>
   d596c:	f803 4b01 	strb.w	r4, [r3], #1
   d5970:	e7fa      	b.n	d5968 <strncpy+0x1a>
   d5972:	bd10      	pop	{r4, pc}

000d5974 <_strtoul_r>:
   d5974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5978:	4680      	mov	r8, r0
   d597a:	483c      	ldr	r0, [pc, #240]	; (d5a6c <_strtoul_r+0xf8>)
   d597c:	f8d0 9000 	ldr.w	r9, [r0]
   d5980:	460e      	mov	r6, r1
   d5982:	4635      	mov	r5, r6
   d5984:	f815 4b01 	ldrb.w	r4, [r5], #1
   d5988:	eb09 0004 	add.w	r0, r9, r4
   d598c:	7840      	ldrb	r0, [r0, #1]
   d598e:	f000 0008 	and.w	r0, r0, #8
   d5992:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d5996:	b108      	cbz	r0, d599c <_strtoul_r+0x28>
   d5998:	462e      	mov	r6, r5
   d599a:	e7f2      	b.n	d5982 <_strtoul_r+0xe>
   d599c:	2c2d      	cmp	r4, #45	; 0x2d
   d599e:	d103      	bne.n	d59a8 <_strtoul_r+0x34>
   d59a0:	1cb5      	adds	r5, r6, #2
   d59a2:	7874      	ldrb	r4, [r6, #1]
   d59a4:	2701      	movs	r7, #1
   d59a6:	e003      	b.n	d59b0 <_strtoul_r+0x3c>
   d59a8:	2c2b      	cmp	r4, #43	; 0x2b
   d59aa:	bf04      	itt	eq
   d59ac:	7874      	ldrbeq	r4, [r6, #1]
   d59ae:	1cb5      	addeq	r5, r6, #2
   d59b0:	b113      	cbz	r3, d59b8 <_strtoul_r+0x44>
   d59b2:	2b10      	cmp	r3, #16
   d59b4:	d10a      	bne.n	d59cc <_strtoul_r+0x58>
   d59b6:	e053      	b.n	d5a60 <_strtoul_r+0xec>
   d59b8:	2c30      	cmp	r4, #48	; 0x30
   d59ba:	d14f      	bne.n	d5a5c <_strtoul_r+0xe8>
   d59bc:	7828      	ldrb	r0, [r5, #0]
   d59be:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d59c2:	2858      	cmp	r0, #88	; 0x58
   d59c4:	d145      	bne.n	d5a52 <_strtoul_r+0xde>
   d59c6:	786c      	ldrb	r4, [r5, #1]
   d59c8:	2310      	movs	r3, #16
   d59ca:	3502      	adds	r5, #2
   d59cc:	f04f 3cff 	mov.w	ip, #4294967295
   d59d0:	2600      	movs	r6, #0
   d59d2:	fbbc fcf3 	udiv	ip, ip, r3
   d59d6:	fb03 fa0c 	mul.w	sl, r3, ip
   d59da:	ea6f 0a0a 	mvn.w	sl, sl
   d59de:	4630      	mov	r0, r6
   d59e0:	eb09 0e04 	add.w	lr, r9, r4
   d59e4:	f89e e001 	ldrb.w	lr, [lr, #1]
   d59e8:	f01e 0f04 	tst.w	lr, #4
   d59ec:	d001      	beq.n	d59f2 <_strtoul_r+0x7e>
   d59ee:	3c30      	subs	r4, #48	; 0x30
   d59f0:	e00b      	b.n	d5a0a <_strtoul_r+0x96>
   d59f2:	f01e 0e03 	ands.w	lr, lr, #3
   d59f6:	d01a      	beq.n	d5a2e <_strtoul_r+0xba>
   d59f8:	f1be 0f01 	cmp.w	lr, #1
   d59fc:	bf0c      	ite	eq
   d59fe:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d5a02:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d5a06:	ebce 0404 	rsb	r4, lr, r4
   d5a0a:	42a3      	cmp	r3, r4
   d5a0c:	dd0f      	ble.n	d5a2e <_strtoul_r+0xba>
   d5a0e:	2e00      	cmp	r6, #0
   d5a10:	db08      	blt.n	d5a24 <_strtoul_r+0xb0>
   d5a12:	4560      	cmp	r0, ip
   d5a14:	d806      	bhi.n	d5a24 <_strtoul_r+0xb0>
   d5a16:	d101      	bne.n	d5a1c <_strtoul_r+0xa8>
   d5a18:	4554      	cmp	r4, sl
   d5a1a:	dc03      	bgt.n	d5a24 <_strtoul_r+0xb0>
   d5a1c:	fb03 4000 	mla	r0, r3, r0, r4
   d5a20:	2601      	movs	r6, #1
   d5a22:	e001      	b.n	d5a28 <_strtoul_r+0xb4>
   d5a24:	f04f 36ff 	mov.w	r6, #4294967295
   d5a28:	f815 4b01 	ldrb.w	r4, [r5], #1
   d5a2c:	e7d8      	b.n	d59e0 <_strtoul_r+0x6c>
   d5a2e:	2e00      	cmp	r6, #0
   d5a30:	da07      	bge.n	d5a42 <_strtoul_r+0xce>
   d5a32:	2322      	movs	r3, #34	; 0x22
   d5a34:	f8c8 3000 	str.w	r3, [r8]
   d5a38:	f04f 30ff 	mov.w	r0, #4294967295
   d5a3c:	b92a      	cbnz	r2, d5a4a <_strtoul_r+0xd6>
   d5a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5a42:	b107      	cbz	r7, d5a46 <_strtoul_r+0xd2>
   d5a44:	4240      	negs	r0, r0
   d5a46:	b172      	cbz	r2, d5a66 <_strtoul_r+0xf2>
   d5a48:	b106      	cbz	r6, d5a4c <_strtoul_r+0xd8>
   d5a4a:	1e69      	subs	r1, r5, #1
   d5a4c:	6011      	str	r1, [r2, #0]
   d5a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5a52:	2430      	movs	r4, #48	; 0x30
   d5a54:	2b00      	cmp	r3, #0
   d5a56:	d1b9      	bne.n	d59cc <_strtoul_r+0x58>
   d5a58:	2308      	movs	r3, #8
   d5a5a:	e7b7      	b.n	d59cc <_strtoul_r+0x58>
   d5a5c:	230a      	movs	r3, #10
   d5a5e:	e7b5      	b.n	d59cc <_strtoul_r+0x58>
   d5a60:	2c30      	cmp	r4, #48	; 0x30
   d5a62:	d0ab      	beq.n	d59bc <_strtoul_r+0x48>
   d5a64:	e7b2      	b.n	d59cc <_strtoul_r+0x58>
   d5a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5a6a:	bf00      	nop
   d5a6c:	2003e2e8 	.word	0x2003e2e8

000d5a70 <strtoul>:
   d5a70:	4613      	mov	r3, r2
   d5a72:	460a      	mov	r2, r1
   d5a74:	4601      	mov	r1, r0
   d5a76:	4802      	ldr	r0, [pc, #8]	; (d5a80 <strtoul+0x10>)
   d5a78:	6800      	ldr	r0, [r0, #0]
   d5a7a:	f7ff bf7b 	b.w	d5974 <_strtoul_r>
   d5a7e:	bf00      	nop
   d5a80:	2003e34c 	.word	0x2003e34c

000d5a84 <__tzcalc_limits>:
   d5a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a88:	4604      	mov	r4, r0
   d5a8a:	f000 fa6f 	bl	d5f6c <__gettzinfo>
   d5a8e:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d5a92:	429c      	cmp	r4, r3
   d5a94:	f340 8096 	ble.w	d5bc4 <__tzcalc_limits+0x140>
   d5a98:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d5a9c:	18e3      	adds	r3, r4, r3
   d5a9e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d5aa2:	109b      	asrs	r3, r3, #2
   d5aa4:	f240 156d 	movw	r5, #365	; 0x16d
   d5aa8:	fb05 3502 	mla	r5, r5, r2, r3
   d5aac:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d5ab0:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d5ab4:	fb92 f3f3 	sdiv	r3, r2, r3
   d5ab8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d5abc:	442b      	add	r3, r5
   d5abe:	18a5      	adds	r5, r4, r2
   d5ac0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d5ac4:	fb95 f5f2 	sdiv	r5, r5, r2
   d5ac8:	441d      	add	r5, r3
   d5aca:	2364      	movs	r3, #100	; 0x64
   d5acc:	fb94 f7f2 	sdiv	r7, r4, r2
   d5ad0:	fb94 f6f3 	sdiv	r6, r4, r3
   d5ad4:	fb02 4717 	mls	r7, r2, r7, r4
   d5ad8:	fb03 4616 	mls	r6, r3, r6, r4
   d5adc:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d5ae0:	fab7 fe87 	clz	lr, r7
   d5ae4:	9301      	str	r3, [sp, #4]
   d5ae6:	f004 0303 	and.w	r3, r4, #3
   d5aea:	6044      	str	r4, [r0, #4]
   d5aec:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d5af0:	4601      	mov	r1, r0
   d5af2:	9300      	str	r3, [sp, #0]
   d5af4:	f04f 0c07 	mov.w	ip, #7
   d5af8:	7a0b      	ldrb	r3, [r1, #8]
   d5afa:	2b4a      	cmp	r3, #74	; 0x4a
   d5afc:	d10e      	bne.n	d5b1c <__tzcalc_limits+0x98>
   d5afe:	694b      	ldr	r3, [r1, #20]
   d5b00:	9a00      	ldr	r2, [sp, #0]
   d5b02:	18ec      	adds	r4, r5, r3
   d5b04:	b902      	cbnz	r2, d5b08 <__tzcalc_limits+0x84>
   d5b06:	b906      	cbnz	r6, d5b0a <__tzcalc_limits+0x86>
   d5b08:	b927      	cbnz	r7, d5b14 <__tzcalc_limits+0x90>
   d5b0a:	2b3b      	cmp	r3, #59	; 0x3b
   d5b0c:	bfd4      	ite	le
   d5b0e:	2300      	movle	r3, #0
   d5b10:	2301      	movgt	r3, #1
   d5b12:	e000      	b.n	d5b16 <__tzcalc_limits+0x92>
   d5b14:	2300      	movs	r3, #0
   d5b16:	4423      	add	r3, r4
   d5b18:	3b01      	subs	r3, #1
   d5b1a:	e03f      	b.n	d5b9c <__tzcalc_limits+0x118>
   d5b1c:	2b44      	cmp	r3, #68	; 0x44
   d5b1e:	d102      	bne.n	d5b26 <__tzcalc_limits+0xa2>
   d5b20:	694b      	ldr	r3, [r1, #20]
   d5b22:	442b      	add	r3, r5
   d5b24:	e03a      	b.n	d5b9c <__tzcalc_limits+0x118>
   d5b26:	9b00      	ldr	r3, [sp, #0]
   d5b28:	b92b      	cbnz	r3, d5b36 <__tzcalc_limits+0xb2>
   d5b2a:	2e00      	cmp	r6, #0
   d5b2c:	bf0c      	ite	eq
   d5b2e:	46f0      	moveq	r8, lr
   d5b30:	f04f 0801 	movne.w	r8, #1
   d5b34:	e000      	b.n	d5b38 <__tzcalc_limits+0xb4>
   d5b36:	46f0      	mov	r8, lr
   d5b38:	4b24      	ldr	r3, [pc, #144]	; (d5bcc <__tzcalc_limits+0x148>)
   d5b3a:	68cc      	ldr	r4, [r1, #12]
   d5b3c:	2230      	movs	r2, #48	; 0x30
   d5b3e:	fb02 3808 	mla	r8, r2, r8, r3
   d5b42:	f1a8 0a04 	sub.w	sl, r8, #4
   d5b46:	46a9      	mov	r9, r5
   d5b48:	2301      	movs	r3, #1
   d5b4a:	42a3      	cmp	r3, r4
   d5b4c:	da04      	bge.n	d5b58 <__tzcalc_limits+0xd4>
   d5b4e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d5b52:	3301      	adds	r3, #1
   d5b54:	44d9      	add	r9, fp
   d5b56:	e7f8      	b.n	d5b4a <__tzcalc_limits+0xc6>
   d5b58:	f109 0304 	add.w	r3, r9, #4
   d5b5c:	fb93 fbfc 	sdiv	fp, r3, ip
   d5b60:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d5b64:	2c01      	cmp	r4, #1
   d5b66:	ebca 0a03 	rsb	sl, sl, r3
   d5b6a:	694b      	ldr	r3, [r1, #20]
   d5b6c:	bfb8      	it	lt
   d5b6e:	2401      	movlt	r4, #1
   d5b70:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d5b74:	ebb3 0a0a 	subs.w	sl, r3, sl
   d5b78:	690b      	ldr	r3, [r1, #16]
   d5b7a:	f104 34ff 	add.w	r4, r4, #4294967295
   d5b7e:	f103 33ff 	add.w	r3, r3, #4294967295
   d5b82:	bf48      	it	mi
   d5b84:	f10a 0a07 	addmi.w	sl, sl, #7
   d5b88:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d5b8c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d5b90:	4453      	add	r3, sl
   d5b92:	42a3      	cmp	r3, r4
   d5b94:	db01      	blt.n	d5b9a <__tzcalc_limits+0x116>
   d5b96:	3b07      	subs	r3, #7
   d5b98:	e7fb      	b.n	d5b92 <__tzcalc_limits+0x10e>
   d5b9a:	444b      	add	r3, r9
   d5b9c:	698c      	ldr	r4, [r1, #24]
   d5b9e:	4a0c      	ldr	r2, [pc, #48]	; (d5bd0 <__tzcalc_limits+0x14c>)
   d5ba0:	fb02 4303 	mla	r3, r2, r3, r4
   d5ba4:	6a0c      	ldr	r4, [r1, #32]
   d5ba6:	4423      	add	r3, r4
   d5ba8:	f841 3f1c 	str.w	r3, [r1, #28]!
   d5bac:	9b01      	ldr	r3, [sp, #4]
   d5bae:	4299      	cmp	r1, r3
   d5bb0:	d1a2      	bne.n	d5af8 <__tzcalc_limits+0x74>
   d5bb2:	69c3      	ldr	r3, [r0, #28]
   d5bb4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d5bb6:	4293      	cmp	r3, r2
   d5bb8:	bfac      	ite	ge
   d5bba:	2300      	movge	r3, #0
   d5bbc:	2301      	movlt	r3, #1
   d5bbe:	6003      	str	r3, [r0, #0]
   d5bc0:	2001      	movs	r0, #1
   d5bc2:	e000      	b.n	d5bc6 <__tzcalc_limits+0x142>
   d5bc4:	2000      	movs	r0, #0
   d5bc6:	b003      	add	sp, #12
   d5bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5bcc:	000d6548 	.word	0x000d6548
   d5bd0:	00015180 	.word	0x00015180

000d5bd4 <__tz_lock>:
   d5bd4:	4770      	bx	lr

000d5bd6 <__tz_unlock>:
   d5bd6:	4770      	bx	lr

000d5bd8 <_tzset_unlocked>:
   d5bd8:	4b01      	ldr	r3, [pc, #4]	; (d5be0 <_tzset_unlocked+0x8>)
   d5bda:	6818      	ldr	r0, [r3, #0]
   d5bdc:	f000 b802 	b.w	d5be4 <_tzset_unlocked_r>
   d5be0:	2003e34c 	.word	0x2003e34c

000d5be4 <_tzset_unlocked_r>:
   d5be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5be8:	b08d      	sub	sp, #52	; 0x34
   d5bea:	4607      	mov	r7, r0
   d5bec:	f000 f9be 	bl	d5f6c <__gettzinfo>
   d5bf0:	49b0      	ldr	r1, [pc, #704]	; (d5eb4 <_tzset_unlocked_r+0x2d0>)
   d5bf2:	4eb1      	ldr	r6, [pc, #708]	; (d5eb8 <_tzset_unlocked_r+0x2d4>)
   d5bf4:	4604      	mov	r4, r0
   d5bf6:	4638      	mov	r0, r7
   d5bf8:	f000 f9b0 	bl	d5f5c <_getenv_r>
   d5bfc:	4605      	mov	r5, r0
   d5bfe:	b960      	cbnz	r0, d5c1a <_tzset_unlocked_r+0x36>
   d5c00:	4bae      	ldr	r3, [pc, #696]	; (d5ebc <_tzset_unlocked_r+0x2d8>)
   d5c02:	4aaf      	ldr	r2, [pc, #700]	; (d5ec0 <_tzset_unlocked_r+0x2dc>)
   d5c04:	6018      	str	r0, [r3, #0]
   d5c06:	4baf      	ldr	r3, [pc, #700]	; (d5ec4 <_tzset_unlocked_r+0x2e0>)
   d5c08:	6018      	str	r0, [r3, #0]
   d5c0a:	4baf      	ldr	r3, [pc, #700]	; (d5ec8 <_tzset_unlocked_r+0x2e4>)
   d5c0c:	6830      	ldr	r0, [r6, #0]
   d5c0e:	601a      	str	r2, [r3, #0]
   d5c10:	605a      	str	r2, [r3, #4]
   d5c12:	f7fe fcd3 	bl	d45bc <free>
   d5c16:	6035      	str	r5, [r6, #0]
   d5c18:	e148      	b.n	d5eac <_tzset_unlocked_r+0x2c8>
   d5c1a:	6831      	ldr	r1, [r6, #0]
   d5c1c:	b979      	cbnz	r1, d5c3e <_tzset_unlocked_r+0x5a>
   d5c1e:	6830      	ldr	r0, [r6, #0]
   d5c20:	f7fe fccc 	bl	d45bc <free>
   d5c24:	4628      	mov	r0, r5
   d5c26:	f7ff fe75 	bl	d5914 <strlen>
   d5c2a:	1c41      	adds	r1, r0, #1
   d5c2c:	4638      	mov	r0, r7
   d5c2e:	f7fe fced 	bl	d460c <_malloc_r>
   d5c32:	6030      	str	r0, [r6, #0]
   d5c34:	b148      	cbz	r0, d5c4a <_tzset_unlocked_r+0x66>
   d5c36:	4629      	mov	r1, r5
   d5c38:	f7ff fe64 	bl	d5904 <strcpy>
   d5c3c:	e005      	b.n	d5c4a <_tzset_unlocked_r+0x66>
   d5c3e:	f7ff fe57 	bl	d58f0 <strcmp>
   d5c42:	2800      	cmp	r0, #0
   d5c44:	f000 8132 	beq.w	d5eac <_tzset_unlocked_r+0x2c8>
   d5c48:	e7e9      	b.n	d5c1e <_tzset_unlocked_r+0x3a>
   d5c4a:	782b      	ldrb	r3, [r5, #0]
   d5c4c:	4a9f      	ldr	r2, [pc, #636]	; (d5ecc <_tzset_unlocked_r+0x2e8>)
   d5c4e:	49a0      	ldr	r1, [pc, #640]	; (d5ed0 <_tzset_unlocked_r+0x2ec>)
   d5c50:	2b3a      	cmp	r3, #58	; 0x3a
   d5c52:	bf08      	it	eq
   d5c54:	3501      	addeq	r5, #1
   d5c56:	ae0a      	add	r6, sp, #40	; 0x28
   d5c58:	4633      	mov	r3, r6
   d5c5a:	4628      	mov	r0, r5
   d5c5c:	f7fe fcc6 	bl	d45ec <siscanf>
   d5c60:	2800      	cmp	r0, #0
   d5c62:	f340 8123 	ble.w	d5eac <_tzset_unlocked_r+0x2c8>
   d5c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5c68:	18ef      	adds	r7, r5, r3
   d5c6a:	5ceb      	ldrb	r3, [r5, r3]
   d5c6c:	2b2d      	cmp	r3, #45	; 0x2d
   d5c6e:	d103      	bne.n	d5c78 <_tzset_unlocked_r+0x94>
   d5c70:	3701      	adds	r7, #1
   d5c72:	f04f 35ff 	mov.w	r5, #4294967295
   d5c76:	e003      	b.n	d5c80 <_tzset_unlocked_r+0x9c>
   d5c78:	2b2b      	cmp	r3, #43	; 0x2b
   d5c7a:	bf08      	it	eq
   d5c7c:	3701      	addeq	r7, #1
   d5c7e:	2501      	movs	r5, #1
   d5c80:	f10d 0a20 	add.w	sl, sp, #32
   d5c84:	f10d 0b1e 	add.w	fp, sp, #30
   d5c88:	f04f 0800 	mov.w	r8, #0
   d5c8c:	9603      	str	r6, [sp, #12]
   d5c8e:	f8cd a008 	str.w	sl, [sp, #8]
   d5c92:	9601      	str	r6, [sp, #4]
   d5c94:	f8cd b000 	str.w	fp, [sp]
   d5c98:	4633      	mov	r3, r6
   d5c9a:	aa07      	add	r2, sp, #28
   d5c9c:	498d      	ldr	r1, [pc, #564]	; (d5ed4 <_tzset_unlocked_r+0x2f0>)
   d5c9e:	f8ad 801e 	strh.w	r8, [sp, #30]
   d5ca2:	4638      	mov	r0, r7
   d5ca4:	f8ad 8020 	strh.w	r8, [sp, #32]
   d5ca8:	f7fe fca0 	bl	d45ec <siscanf>
   d5cac:	4540      	cmp	r0, r8
   d5cae:	f340 80fd 	ble.w	d5eac <_tzset_unlocked_r+0x2c8>
   d5cb2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d5cb6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d5cba:	f8df 9224 	ldr.w	r9, [pc, #548]	; d5ee0 <_tzset_unlocked_r+0x2fc>
   d5cbe:	213c      	movs	r1, #60	; 0x3c
   d5cc0:	fb01 3302 	mla	r3, r1, r2, r3
   d5cc4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d5cc8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d5ccc:	fb01 3302 	mla	r3, r1, r2, r3
   d5cd0:	435d      	muls	r5, r3
   d5cd2:	6225      	str	r5, [r4, #32]
   d5cd4:	4d7c      	ldr	r5, [pc, #496]	; (d5ec8 <_tzset_unlocked_r+0x2e4>)
   d5cd6:	4b7d      	ldr	r3, [pc, #500]	; (d5ecc <_tzset_unlocked_r+0x2e8>)
   d5cd8:	602b      	str	r3, [r5, #0]
   d5cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5cdc:	497c      	ldr	r1, [pc, #496]	; (d5ed0 <_tzset_unlocked_r+0x2ec>)
   d5cde:	441f      	add	r7, r3
   d5ce0:	464a      	mov	r2, r9
   d5ce2:	4633      	mov	r3, r6
   d5ce4:	4638      	mov	r0, r7
   d5ce6:	f7fe fc81 	bl	d45ec <siscanf>
   d5cea:	4540      	cmp	r0, r8
   d5cec:	dc08      	bgt.n	d5d00 <_tzset_unlocked_r+0x11c>
   d5cee:	682b      	ldr	r3, [r5, #0]
   d5cf0:	606b      	str	r3, [r5, #4]
   d5cf2:	4b72      	ldr	r3, [pc, #456]	; (d5ebc <_tzset_unlocked_r+0x2d8>)
   d5cf4:	6a22      	ldr	r2, [r4, #32]
   d5cf6:	601a      	str	r2, [r3, #0]
   d5cf8:	4b72      	ldr	r3, [pc, #456]	; (d5ec4 <_tzset_unlocked_r+0x2e0>)
   d5cfa:	f8c3 8000 	str.w	r8, [r3]
   d5cfe:	e0d5      	b.n	d5eac <_tzset_unlocked_r+0x2c8>
   d5d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5d02:	f8c5 9004 	str.w	r9, [r5, #4]
   d5d06:	18fd      	adds	r5, r7, r3
   d5d08:	5cfb      	ldrb	r3, [r7, r3]
   d5d0a:	2b2d      	cmp	r3, #45	; 0x2d
   d5d0c:	d103      	bne.n	d5d16 <_tzset_unlocked_r+0x132>
   d5d0e:	3501      	adds	r5, #1
   d5d10:	f04f 37ff 	mov.w	r7, #4294967295
   d5d14:	e003      	b.n	d5d1e <_tzset_unlocked_r+0x13a>
   d5d16:	2b2b      	cmp	r3, #43	; 0x2b
   d5d18:	bf08      	it	eq
   d5d1a:	3501      	addeq	r5, #1
   d5d1c:	2701      	movs	r7, #1
   d5d1e:	2300      	movs	r3, #0
   d5d20:	f8ad 301c 	strh.w	r3, [sp, #28]
   d5d24:	f8ad 301e 	strh.w	r3, [sp, #30]
   d5d28:	f8ad 3020 	strh.w	r3, [sp, #32]
   d5d2c:	930a      	str	r3, [sp, #40]	; 0x28
   d5d2e:	9603      	str	r6, [sp, #12]
   d5d30:	f8cd a008 	str.w	sl, [sp, #8]
   d5d34:	9601      	str	r6, [sp, #4]
   d5d36:	f8cd b000 	str.w	fp, [sp]
   d5d3a:	4633      	mov	r3, r6
   d5d3c:	aa07      	add	r2, sp, #28
   d5d3e:	4965      	ldr	r1, [pc, #404]	; (d5ed4 <_tzset_unlocked_r+0x2f0>)
   d5d40:	4628      	mov	r0, r5
   d5d42:	f7fe fc53 	bl	d45ec <siscanf>
   d5d46:	2800      	cmp	r0, #0
   d5d48:	dc04      	bgt.n	d5d54 <_tzset_unlocked_r+0x170>
   d5d4a:	6a23      	ldr	r3, [r4, #32]
   d5d4c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d5d50:	63e3      	str	r3, [r4, #60]	; 0x3c
   d5d52:	e00e      	b.n	d5d72 <_tzset_unlocked_r+0x18e>
   d5d54:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d5d58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d5d5c:	213c      	movs	r1, #60	; 0x3c
   d5d5e:	fb01 3302 	mla	r3, r1, r2, r3
   d5d62:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d5d66:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d5d6a:	fb01 3302 	mla	r3, r1, r2, r3
   d5d6e:	435f      	muls	r7, r3
   d5d70:	63e7      	str	r7, [r4, #60]	; 0x3c
   d5d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5d74:	4627      	mov	r7, r4
   d5d76:	441d      	add	r5, r3
   d5d78:	f04f 0900 	mov.w	r9, #0
   d5d7c:	782b      	ldrb	r3, [r5, #0]
   d5d7e:	2b2c      	cmp	r3, #44	; 0x2c
   d5d80:	bf08      	it	eq
   d5d82:	3501      	addeq	r5, #1
   d5d84:	f895 8000 	ldrb.w	r8, [r5]
   d5d88:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d5d8c:	d126      	bne.n	d5ddc <_tzset_unlocked_r+0x1f8>
   d5d8e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d5d92:	9302      	str	r3, [sp, #8]
   d5d94:	ab09      	add	r3, sp, #36	; 0x24
   d5d96:	9300      	str	r3, [sp, #0]
   d5d98:	9603      	str	r6, [sp, #12]
   d5d9a:	9601      	str	r6, [sp, #4]
   d5d9c:	4633      	mov	r3, r6
   d5d9e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d5da2:	494d      	ldr	r1, [pc, #308]	; (d5ed8 <_tzset_unlocked_r+0x2f4>)
   d5da4:	4628      	mov	r0, r5
   d5da6:	f7fe fc21 	bl	d45ec <siscanf>
   d5daa:	2803      	cmp	r0, #3
   d5dac:	d17e      	bne.n	d5eac <_tzset_unlocked_r+0x2c8>
   d5dae:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d5db2:	1e4b      	subs	r3, r1, #1
   d5db4:	2b0b      	cmp	r3, #11
   d5db6:	d879      	bhi.n	d5eac <_tzset_unlocked_r+0x2c8>
   d5db8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d5dbc:	1e53      	subs	r3, r2, #1
   d5dbe:	2b04      	cmp	r3, #4
   d5dc0:	d874      	bhi.n	d5eac <_tzset_unlocked_r+0x2c8>
   d5dc2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d5dc6:	2b06      	cmp	r3, #6
   d5dc8:	d870      	bhi.n	d5eac <_tzset_unlocked_r+0x2c8>
   d5dca:	f887 8008 	strb.w	r8, [r7, #8]
   d5dce:	60f9      	str	r1, [r7, #12]
   d5dd0:	613a      	str	r2, [r7, #16]
   d5dd2:	617b      	str	r3, [r7, #20]
   d5dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5dd6:	eb05 0803 	add.w	r8, r5, r3
   d5dda:	e02a      	b.n	d5e32 <_tzset_unlocked_r+0x24e>
   d5ddc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d5de0:	bf06      	itte	eq
   d5de2:	3501      	addeq	r5, #1
   d5de4:	4643      	moveq	r3, r8
   d5de6:	2344      	movne	r3, #68	; 0x44
   d5de8:	220a      	movs	r2, #10
   d5dea:	a90b      	add	r1, sp, #44	; 0x2c
   d5dec:	4628      	mov	r0, r5
   d5dee:	9305      	str	r3, [sp, #20]
   d5df0:	f7ff fe3e 	bl	d5a70 <strtoul>
   d5df4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d5df8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d5dfc:	4545      	cmp	r5, r8
   d5dfe:	9b05      	ldr	r3, [sp, #20]
   d5e00:	d114      	bne.n	d5e2c <_tzset_unlocked_r+0x248>
   d5e02:	234d      	movs	r3, #77	; 0x4d
   d5e04:	f1b9 0f00 	cmp.w	r9, #0
   d5e08:	d107      	bne.n	d5e1a <_tzset_unlocked_r+0x236>
   d5e0a:	7223      	strb	r3, [r4, #8]
   d5e0c:	2303      	movs	r3, #3
   d5e0e:	60e3      	str	r3, [r4, #12]
   d5e10:	2302      	movs	r3, #2
   d5e12:	6123      	str	r3, [r4, #16]
   d5e14:	f8c4 9014 	str.w	r9, [r4, #20]
   d5e18:	e00b      	b.n	d5e32 <_tzset_unlocked_r+0x24e>
   d5e1a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d5e1e:	230b      	movs	r3, #11
   d5e20:	62a3      	str	r3, [r4, #40]	; 0x28
   d5e22:	2301      	movs	r3, #1
   d5e24:	62e3      	str	r3, [r4, #44]	; 0x2c
   d5e26:	2300      	movs	r3, #0
   d5e28:	6323      	str	r3, [r4, #48]	; 0x30
   d5e2a:	e002      	b.n	d5e32 <_tzset_unlocked_r+0x24e>
   d5e2c:	b280      	uxth	r0, r0
   d5e2e:	723b      	strb	r3, [r7, #8]
   d5e30:	6178      	str	r0, [r7, #20]
   d5e32:	2302      	movs	r3, #2
   d5e34:	f8ad 301c 	strh.w	r3, [sp, #28]
   d5e38:	2300      	movs	r3, #0
   d5e3a:	f8ad 301e 	strh.w	r3, [sp, #30]
   d5e3e:	f8ad 3020 	strh.w	r3, [sp, #32]
   d5e42:	930a      	str	r3, [sp, #40]	; 0x28
   d5e44:	f898 3000 	ldrb.w	r3, [r8]
   d5e48:	2b2f      	cmp	r3, #47	; 0x2f
   d5e4a:	d10b      	bne.n	d5e64 <_tzset_unlocked_r+0x280>
   d5e4c:	9603      	str	r6, [sp, #12]
   d5e4e:	f8cd a008 	str.w	sl, [sp, #8]
   d5e52:	9601      	str	r6, [sp, #4]
   d5e54:	f8cd b000 	str.w	fp, [sp]
   d5e58:	4633      	mov	r3, r6
   d5e5a:	aa07      	add	r2, sp, #28
   d5e5c:	491f      	ldr	r1, [pc, #124]	; (d5edc <_tzset_unlocked_r+0x2f8>)
   d5e5e:	4640      	mov	r0, r8
   d5e60:	f7fe fbc4 	bl	d45ec <siscanf>
   d5e64:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d5e68:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d5e6c:	213c      	movs	r1, #60	; 0x3c
   d5e6e:	fb01 3302 	mla	r3, r1, r2, r3
   d5e72:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d5e76:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d5e7a:	fb01 3302 	mla	r3, r1, r2, r3
   d5e7e:	61bb      	str	r3, [r7, #24]
   d5e80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d5e82:	f109 0901 	add.w	r9, r9, #1
   d5e86:	f1b9 0f02 	cmp.w	r9, #2
   d5e8a:	4445      	add	r5, r8
   d5e8c:	f107 071c 	add.w	r7, r7, #28
   d5e90:	f47f af74 	bne.w	d5d7c <_tzset_unlocked_r+0x198>
   d5e94:	6860      	ldr	r0, [r4, #4]
   d5e96:	f7ff fdf5 	bl	d5a84 <__tzcalc_limits>
   d5e9a:	4b08      	ldr	r3, [pc, #32]	; (d5ebc <_tzset_unlocked_r+0x2d8>)
   d5e9c:	6a22      	ldr	r2, [r4, #32]
   d5e9e:	601a      	str	r2, [r3, #0]
   d5ea0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5ea2:	1a9b      	subs	r3, r3, r2
   d5ea4:	4a07      	ldr	r2, [pc, #28]	; (d5ec4 <_tzset_unlocked_r+0x2e0>)
   d5ea6:	bf18      	it	ne
   d5ea8:	2301      	movne	r3, #1
   d5eaa:	6013      	str	r3, [r2, #0]
   d5eac:	b00d      	add	sp, #52	; 0x34
   d5eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5eb2:	bf00      	nop
   d5eb4:	000d65a8 	.word	0x000d65a8
   d5eb8:	2003e7e0 	.word	0x2003e7e0
   d5ebc:	2003e7e8 	.word	0x2003e7e8
   d5ec0:	000d65ab 	.word	0x000d65ab
   d5ec4:	2003e7e4 	.word	0x2003e7e4
   d5ec8:	2003e350 	.word	0x2003e350
   d5ecc:	2003e7d3 	.word	0x2003e7d3
   d5ed0:	000d65af 	.word	0x000d65af
   d5ed4:	000d65d2 	.word	0x000d65d2
   d5ed8:	000d65be 	.word	0x000d65be
   d5edc:	000d65d1 	.word	0x000d65d1
   d5ee0:	2003e7c8 	.word	0x2003e7c8

000d5ee4 <_findenv_r>:
   d5ee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ee8:	4607      	mov	r7, r0
   d5eea:	468b      	mov	fp, r1
   d5eec:	4690      	mov	r8, r2
   d5eee:	f000 f8d9 	bl	d60a4 <__env_lock>
   d5ef2:	4b19      	ldr	r3, [pc, #100]	; (d5f58 <_findenv_r+0x74>)
   d5ef4:	681d      	ldr	r5, [r3, #0]
   d5ef6:	469a      	mov	sl, r3
   d5ef8:	b13d      	cbz	r5, d5f0a <_findenv_r+0x26>
   d5efa:	465c      	mov	r4, fp
   d5efc:	4623      	mov	r3, r4
   d5efe:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5f02:	b142      	cbz	r2, d5f16 <_findenv_r+0x32>
   d5f04:	2a3d      	cmp	r2, #61	; 0x3d
   d5f06:	461c      	mov	r4, r3
   d5f08:	d1f8      	bne.n	d5efc <_findenv_r+0x18>
   d5f0a:	4638      	mov	r0, r7
   d5f0c:	f000 f8cb 	bl	d60a6 <__env_unlock>
   d5f10:	2000      	movs	r0, #0
   d5f12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5f16:	ebcb 0404 	rsb	r4, fp, r4
   d5f1a:	46a9      	mov	r9, r5
   d5f1c:	f859 0b04 	ldr.w	r0, [r9], #4
   d5f20:	2800      	cmp	r0, #0
   d5f22:	d0f2      	beq.n	d5f0a <_findenv_r+0x26>
   d5f24:	4622      	mov	r2, r4
   d5f26:	4659      	mov	r1, fp
   d5f28:	f7ff fcfc 	bl	d5924 <strncmp>
   d5f2c:	b988      	cbnz	r0, d5f52 <_findenv_r+0x6e>
   d5f2e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d5f32:	191e      	adds	r6, r3, r4
   d5f34:	5d1b      	ldrb	r3, [r3, r4]
   d5f36:	2b3d      	cmp	r3, #61	; 0x3d
   d5f38:	d10b      	bne.n	d5f52 <_findenv_r+0x6e>
   d5f3a:	f8da 3000 	ldr.w	r3, [sl]
   d5f3e:	1aed      	subs	r5, r5, r3
   d5f40:	10ad      	asrs	r5, r5, #2
   d5f42:	4638      	mov	r0, r7
   d5f44:	f8c8 5000 	str.w	r5, [r8]
   d5f48:	f000 f8ad 	bl	d60a6 <__env_unlock>
   d5f4c:	1c70      	adds	r0, r6, #1
   d5f4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5f52:	464d      	mov	r5, r9
   d5f54:	e7e1      	b.n	d5f1a <_findenv_r+0x36>
   d5f56:	bf00      	nop
   d5f58:	2003e398 	.word	0x2003e398

000d5f5c <_getenv_r>:
   d5f5c:	b507      	push	{r0, r1, r2, lr}
   d5f5e:	aa01      	add	r2, sp, #4
   d5f60:	f7ff ffc0 	bl	d5ee4 <_findenv_r>
   d5f64:	b003      	add	sp, #12
   d5f66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5f6c <__gettzinfo>:
   d5f6c:	4800      	ldr	r0, [pc, #0]	; (d5f70 <__gettzinfo+0x4>)
   d5f6e:	4770      	bx	lr
   d5f70:	2003e358 	.word	0x2003e358

000d5f74 <gmtime_r>:
   d5f74:	6802      	ldr	r2, [r0, #0]
   d5f76:	4b47      	ldr	r3, [pc, #284]	; (d6094 <gmtime_r+0x120>)
   d5f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f7a:	fb92 f4f3 	sdiv	r4, r2, r3
   d5f7e:	fb03 2214 	mls	r2, r3, r4, r2
   d5f82:	2a00      	cmp	r2, #0
   d5f84:	bfbc      	itt	lt
   d5f86:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d5f8a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d5f8e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d5f92:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d5f96:	fb92 f3f0 	sdiv	r3, r2, r0
   d5f9a:	fb00 2213 	mls	r2, r0, r3, r2
   d5f9e:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d5fa2:	bfac      	ite	ge
   d5fa4:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d5fa8:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d5fac:	608b      	str	r3, [r1, #8]
   d5fae:	fb92 f3f0 	sdiv	r3, r2, r0
   d5fb2:	fb00 2213 	mls	r2, r0, r3, r2
   d5fb6:	604b      	str	r3, [r1, #4]
   d5fb8:	600a      	str	r2, [r1, #0]
   d5fba:	2307      	movs	r3, #7
   d5fbc:	1ce2      	adds	r2, r4, #3
   d5fbe:	fb92 f3f3 	sdiv	r3, r2, r3
   d5fc2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d5fc6:	1ad3      	subs	r3, r2, r3
   d5fc8:	618b      	str	r3, [r1, #24]
   d5fca:	4b33      	ldr	r3, [pc, #204]	; (d6098 <gmtime_r+0x124>)
   d5fcc:	4d33      	ldr	r5, [pc, #204]	; (d609c <gmtime_r+0x128>)
   d5fce:	fb94 f5f5 	sdiv	r5, r4, r5
   d5fd2:	fb03 4405 	mla	r4, r3, r5, r4
   d5fd6:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d5fda:	fbb4 f2f2 	udiv	r2, r4, r2
   d5fde:	4422      	add	r2, r4
   d5fe0:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d5fe4:	fbb4 f3f7 	udiv	r3, r4, r7
   d5fe8:	1ad2      	subs	r2, r2, r3
   d5fea:	482d      	ldr	r0, [pc, #180]	; (d60a0 <gmtime_r+0x12c>)
   d5fec:	fbb4 f0f0 	udiv	r0, r4, r0
   d5ff0:	f648 6694 	movw	r6, #36500	; 0x8e94
   d5ff4:	1a13      	subs	r3, r2, r0
   d5ff6:	fbb3 f6f6 	udiv	r6, r3, r6
   d5ffa:	4434      	add	r4, r6
   d5ffc:	f240 126d 	movw	r2, #365	; 0x16d
   d6000:	fbb3 f0f2 	udiv	r0, r3, r2
   d6004:	fbb3 f3f7 	udiv	r3, r3, r7
   d6008:	1ae3      	subs	r3, r4, r3
   d600a:	fb02 3310 	mls	r3, r2, r0, r3
   d600e:	2499      	movs	r4, #153	; 0x99
   d6010:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d6014:	3202      	adds	r2, #2
   d6016:	fbb2 f2f4 	udiv	r2, r2, r4
   d601a:	2a0a      	cmp	r2, #10
   d601c:	fb04 f402 	mul.w	r4, r4, r2
   d6020:	f104 0602 	add.w	r6, r4, #2
   d6024:	f04f 0405 	mov.w	r4, #5
   d6028:	fbb6 f4f4 	udiv	r4, r6, r4
   d602c:	bf34      	ite	cc
   d602e:	2602      	movcc	r6, #2
   d6030:	f06f 0609 	mvncs.w	r6, #9
   d6034:	4416      	add	r6, r2
   d6036:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d603a:	fb02 0505 	mla	r5, r2, r5, r0
   d603e:	1c5f      	adds	r7, r3, #1
   d6040:	2e01      	cmp	r6, #1
   d6042:	bf98      	it	ls
   d6044:	3501      	addls	r5, #1
   d6046:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d604a:	eba7 0704 	sub.w	r7, r7, r4
   d604e:	d302      	bcc.n	d6056 <gmtime_r+0xe2>
   d6050:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d6054:	e014      	b.n	d6080 <gmtime_r+0x10c>
   d6056:	0782      	lsls	r2, r0, #30
   d6058:	d105      	bne.n	d6066 <gmtime_r+0xf2>
   d605a:	2464      	movs	r4, #100	; 0x64
   d605c:	fbb0 f2f4 	udiv	r2, r0, r4
   d6060:	fb04 0212 	mls	r2, r4, r2, r0
   d6064:	b94a      	cbnz	r2, d607a <gmtime_r+0x106>
   d6066:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d606a:	fbb0 f4f2 	udiv	r4, r0, r2
   d606e:	fb02 0014 	mls	r0, r2, r4, r0
   d6072:	fab0 f280 	clz	r2, r0
   d6076:	0952      	lsrs	r2, r2, #5
   d6078:	e000      	b.n	d607c <gmtime_r+0x108>
   d607a:	2201      	movs	r2, #1
   d607c:	333b      	adds	r3, #59	; 0x3b
   d607e:	441a      	add	r2, r3
   d6080:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d6084:	2300      	movs	r3, #0
   d6086:	61ca      	str	r2, [r1, #28]
   d6088:	614d      	str	r5, [r1, #20]
   d608a:	610e      	str	r6, [r1, #16]
   d608c:	60cf      	str	r7, [r1, #12]
   d608e:	620b      	str	r3, [r1, #32]
   d6090:	4608      	mov	r0, r1
   d6092:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6094:	00015180 	.word	0x00015180
   d6098:	fffdc54f 	.word	0xfffdc54f
   d609c:	00023ab1 	.word	0x00023ab1
   d60a0:	00023ab0 	.word	0x00023ab0

000d60a4 <__env_lock>:
   d60a4:	4770      	bx	lr

000d60a6 <__env_unlock>:
   d60a6:	4770      	bx	lr

000d60a8 <dynalib_user>:
   d60a8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d60b8:	0000 0000 6542 6967 6c6e 6e69 7953 636e     ....BeginlinSync
   d60c8:	5400 6568 6320 7275 6572 746e 6420 7461     .The current dat
   d60d8:	2065 6e61 2064 6974 656d 6920 2073 7325     e and time is %s
   d60e8:	0a20 5400 6568 6320 7275 6572 746e 7420      ..The current t
   d60f8:	6d69 2065 7369 2520 2073 000a               ime is %s ..

000d6104 <_ZTVN5spark13EthernetClassE>:
	...
   d610c:	467b 000d 4671 000d 4667 000d 465d 000d     {F..qF..gF..]F..
   d611c:	4651 000d 4645 000d 4639 000d 4631 000d     QF..EF..9F..1F..
   d612c:	4627 000d 461d 000d 5181 000d               'F...F...Q..

000d6138 <_ZTV8SPIClass>:
	...
   d6140:	4699 000d 469b 000d 0066 6e6c 6600 006e     .F...F..f.ln.fn.
   d6150:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
   d6160:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d6170:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d6180:	0069 6564 6174 6c69 2073 203d 6200 7561     i.details = .bau
   d6190:	0064 6553 6972 6c61 5300 7265 6169 316c     d.Serial.Serial1
   d61a0:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
   d61b0:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
   d61c0:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
   d61d0:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
   d61e0:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
   d61f0:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
   d6200:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
   d6210:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d6220:	6e61 6369 6100 6c6c 2500 302b 6433 253a     anic.all.%+03d:%
   d6230:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d6240:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d6250 <_ZTV9IPAddress>:
	...
   d6258:	4c07 000d 4bf9 000d 4bfb 000d               .L...K...K..

000d6264 <_ZTV9USBSerial>:
	...
   d626c:	4ce1 000d 4d25 000d 4cff 000d 4889 000d     .L..%M...L...H..
   d627c:	4cf9 000d 4ce3 000d 4ceb 000d 4d1f 000d     .L...L...L...M..
   d628c:	4cf3 000d 4cdd 000d                         .L...L..

000d6294 <_ZTV11USARTSerial>:
	...
   d629c:	4dc9 000d 4ded 000d 4df9 000d 4889 000d     .M...M...M...H..
   d62ac:	4dd5 000d 4de1 000d 4ddb 000d 4de7 000d     .M...M...M...M..
   d62bc:	4dcb 000d 4dcf 000d                         .M...M..

000d62c4 <_ZTV7TwoWire>:
	...
   d62cc:	4e95 000d 4edf 000d 4eb7 000d 4e97 000d     .N...N...N...N..
   d62dc:	4ebf 000d 4ec7 000d 4ecf 000d 4ed7 000d     .N...N...N...N..

000d62ec <_ZTVN5spark9MeshClassE>:
	...
   d62f4:	4fa5 000d 4f9b 000d 4f91 000d 4f87 000d     .O...O...O...O..
   d6304:	4f7b 000d 4f6f 000d 4f63 000d 4f5b 000d     {O..oO..cO..[O..
   d6314:	4f51 000d 4f47 000d 5181 000d               QO..GO...Q..

000d6320 <_ZTVN5spark9WiFiClassE>:
	...
   d6328:	50fb 000d 50f1 000d 50e7 000d 509d 000d     .P...P...P...P..
   d6338:	50db 000d 50cf 000d 50c3 000d 50bb 000d     .P...P...P...P..
   d6348:	50b1 000d 50a7 000d 5181 000d               .P...P...Q..

000d6354 <_ZTVN5spark12NetworkClassE>:
	...
   d635c:	5119 000d 5123 000d 512d 000d 5137 000d     .Q..#Q..-Q..7Q..
   d636c:	5141 000d 514d 000d 5159 000d 5165 000d     AQ..MQ..YQ..eQ..
   d637c:	516d 000d 5177 000d 5181 000d               mQ..wQ...Q..

000d6388 <day_name.4725>:
   d6388:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d6398:	6972 6153 4a74                                   riSat

000d639d <mon_name.4726>:
   d639d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d63ad:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d63bd:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d63cd:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d63dd:	6425 000a                                   %d..

000d63e1 <_ctype_>:
   d63e1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d63f1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d6401:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d6411:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d6421:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d6431:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d6441:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d6451:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d6461:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d64e4 <__sf_fake_stdin>:
	...

000d6504 <__sf_fake_stdout>:
	...

000d6524 <__sf_fake_stderr>:
	...
   d6544:	0043 0000                                   C...

000d6548 <__month_lengths>:
   d6548:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d6558:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d6568:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d6578:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d6588:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d6598:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d65a8:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d65b8:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d65c8:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d65d8:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d65e4 <link_const_variable_data_end>:
   d65e4:	000d41ff 	.word	0x000d41ff
   d65e8:	000d4685 	.word	0x000d4685
   d65ec:	000d46d1 	.word	0x000d46d1
   d65f0:	000d49d9 	.word	0x000d49d9
   d65f4:	000d4ad1 	.word	0x000d4ad1
   d65f8:	000d4b09 	.word	0x000d4b09
   d65fc:	000d5051 	.word	0x000d5051
   d6600:	000d5105 	.word	0x000d5105
   d6604:	000d524d 	.word	0x000d524d
   d6608:	000d5261 	.word	0x000d5261
   d660c:	000d52f1 	.word	0x000d52f1
   d6610:	000d5375 	.word	0x000d5375
   d6614:	000d5439 	.word	0x000d5439
   d6618:	000d54fd 	.word	0x000d54fd

000d661c <link_constructors_end>:
   d661c:	00000000 	.word	0x00000000
